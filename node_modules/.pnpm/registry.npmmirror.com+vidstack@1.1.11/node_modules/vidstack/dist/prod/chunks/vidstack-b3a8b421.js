import { F as isNull, G as deferredPromise, k as isString, l as listenEvent, I as EventsTarget, D as DOMEvent, A as isNumber } from './vidstack-4af9f92b.js';

function preconnect(url, rel = "preconnect") {
  const exists = document.querySelector(`link[href="${url}"]`);
  if (!isNull(exists))
    return true;
  const link = document.createElement("link");
  link.rel = rel;
  link.href = url;
  link.crossOrigin = "true";
  document.head.append(link);
  return true;
}
const pendingRequests = {};
function loadScript(src) {
  if (pendingRequests[src])
    return pendingRequests[src].promise;
  const promise = deferredPromise(), exists = document.querySelector(`script[src="${src}"]`);
  if (!isNull(exists)) {
    promise.resolve();
    return promise.promise;
  }
  const script = document.createElement("script");
  script.src = src;
  script.onload = () => {
    promise.resolve();
    delete pendingRequests[src];
  };
  script.onerror = () => {
    promise.reject();
    delete pendingRequests[src];
  };
  setTimeout(() => document.head.append(script), 0);
  return promise.promise;
}
function getRequestCredentials(crossorigin) {
  return crossorigin === "use-credentials" ? "include" : isString(crossorigin) ? "same-origin" : void 0;
}

const CROSSORIGIN = Symbol(0), READY_STATE = Symbol(0), UPDATE_ACTIVE_CUES = Symbol(0), CAN_LOAD = Symbol(0), ON_MODE_CHANGE = Symbol(0), NATIVE = Symbol(0), NATIVE_HLS = Symbol(0);
const TextTrackSymbol = {
  Ba: CROSSORIGIN,
  na: READY_STATE,
  ta: UPDATE_ACTIVE_CUES,
  ua: CAN_LOAD,
  Ca: ON_MODE_CHANGE,
  va: NATIVE,
  ha: NATIVE_HLS
};

function findActiveCue(cues, time) {
  for (let i = 0, len = cues.length; i < len; i++) {
    if (isCueActive(cues[i], time))
      return cues[i];
  }
  return null;
}
function isCueActive(cue, time) {
  return time >= cue.startTime && time < cue.endTime;
}
function observeActiveTextTrack(tracks, kind, onChange) {
  let currentTrack = null;
  function onModeChange() {
    const kinds = isString(kind) ? [kind] : kind, track = tracks.toArray().find((track2) => kinds.includes(track2.kind) && track2.mode === "showing");
    if (track === currentTrack)
      return;
    if (!track) {
      onChange(null);
      return;
    }
    if (track.readyState == 2) {
      onChange(track);
    } else {
      onChange(null);
      track.addEventListener("load", () => onChange(track), { once: true });
    }
    currentTrack = track;
  }
  onModeChange();
  return listenEvent(tracks, "mode-change", onModeChange);
}

var _a, _b, _c;
class TextTrack extends EventsTarget {
  constructor(init) {
    super();
    this.id = "";
    this.label = "";
    this.language = "";
    this.default = false;
    this.ua = false;
    this.pa = 0;
    this.ra = "disabled";
    this.wa = {};
    this.sa = [];
    this.oa = [];
    this.qa = [];
    /* @internal */
    this[_a] = 0;
    /* @internal */
    this[_b] = null;
    /* @internal */
    this[_c] = null;
    for (const prop of Object.keys(init))
      this[prop] = init[prop];
    if (!this.type)
      this.type = "vtt";
    if (init.content) {
      import('media-captions').then(({ parseText, VTTCue, VTTRegion }) => {
        if (init.type === "json") {
          this.xa(init.content, VTTCue, VTTRegion);
        } else {
          parseText(init.content, { type: init.type }).then(({ cues, regions }) => {
            this.oa = cues;
            this.sa = regions;
            this.na();
          });
        }
      });
    } else if (!init.src)
      this[TextTrackSymbol.na] = 2;
  }
  static createId(track) {
    return `id::${track.type}-${track.kind}-${track.src ?? track.label}`;
  }
  get metadata() {
    return this.wa;
  }
  get regions() {
    return this.sa;
  }
  get cues() {
    return this.oa;
  }
  get activeCues() {
    return this.qa;
  }
  /**
   * - 0: Not Loading
   * - 1: Loading
   * - 2: Ready
   * - 3: Error
   */
  get readyState() {
    return this[TextTrackSymbol.na];
  }
  get mode() {
    return this.ra;
  }
  set mode(mode) {
    this.setMode(mode);
  }
  addCue(cue, trigger) {
    let i = 0, length = this.oa.length;
    for (i = 0; i < length; i++)
      if (cue.endTime <= this.oa[i].startTime)
        break;
    if (i === length)
      this.oa.push(cue);
    else
      this.oa.splice(i, 0, cue);
    if (trigger?.type !== "cuechange") {
      this[TextTrackSymbol.va]?.track.addCue(cue);
    }
    this.dispatchEvent(new DOMEvent("add-cue", { detail: cue, trigger }));
    if (isCueActive(cue, this.pa)) {
      this[TextTrackSymbol.ta](this.pa, trigger);
    }
  }
  removeCue(cue, trigger) {
    const index = this.oa.indexOf(cue);
    if (index >= 0) {
      const isActive = this.qa.includes(cue);
      this.oa.splice(index, 1);
      this[TextTrackSymbol.va]?.track.removeCue(cue);
      this.dispatchEvent(new DOMEvent("remove-cue", { detail: cue, trigger }));
      if (isActive) {
        this[TextTrackSymbol.ta](this.pa, trigger);
      }
    }
  }
  setMode(mode, trigger) {
    if (this.ra === mode)
      return;
    this.ra = mode;
    if (mode === "disabled") {
      this.qa = [];
      this.ya();
    } else if (this.readyState === 2) {
      this[TextTrackSymbol.ta](this.pa, trigger);
    } else {
      this.za();
    }
    this.dispatchEvent(new DOMEvent("mode-change", { detail: this, trigger }));
    this[TextTrackSymbol.Ca]?.();
  }
  /* @internal */
  [(_a = TextTrackSymbol.na, _b = TextTrackSymbol.Ca, _c = TextTrackSymbol.va, TextTrackSymbol.ta)](currentTime, trigger) {
    this.pa = currentTime;
    if (this.mode === "disabled" || !this.oa.length)
      return;
    const activeCues = [];
    for (let i = 0, length = this.oa.length; i < length; i++) {
      const cue = this.oa[i];
      if (isCueActive(cue, currentTime))
        activeCues.push(cue);
    }
    let changed = activeCues.length !== this.qa.length;
    if (!changed) {
      for (let i = 0; i < activeCues.length; i++) {
        if (!this.qa.includes(activeCues[i])) {
          changed = true;
          break;
        }
      }
    }
    this.qa = activeCues;
    if (changed)
      this.ya(trigger);
  }
  /* @internal */
  [TextTrackSymbol.ua]() {
    this.ua = true;
    if (this.ra !== "disabled")
      this.za();
  }
  async za() {
    if (!this.ua || !this.src || this[TextTrackSymbol.na] > 0)
      return;
    this[TextTrackSymbol.na] = 1;
    this.dispatchEvent(new DOMEvent("load-start"));
    try {
      const { parseResponse, VTTCue, VTTRegion } = await import('media-captions'), crossorigin = this[TextTrackSymbol.Ba]?.();
      const response = fetch(this.src, {
        headers: this.type === "json" ? { "Content-Type": "application/json" } : void 0,
        credentials: getRequestCredentials(crossorigin)
      });
      if (this.type === "json") {
        this.xa(await (await response).text(), VTTCue, VTTRegion);
      } else {
        const { errors, metadata, regions, cues } = await parseResponse(response, {
          type: this.type,
          encoding: this.encoding
        });
        if (errors[0]?.code === 0) {
          throw errors[0];
        } else {
          this.wa = metadata;
          this.sa = regions;
          this.oa = cues;
        }
      }
      this.na();
    } catch (error) {
      this.Aa(error);
    }
  }
  na() {
    this[TextTrackSymbol.na] = 2;
    if (!this.src || this.type !== "vtt") {
      const nativeTrack = this[TextTrackSymbol.va]?.track;
      if (nativeTrack)
        for (const cue of this.oa)
          nativeTrack.addCue(cue);
    }
    const loadEvent = new DOMEvent("load");
    this[TextTrackSymbol.ta](this.pa, loadEvent);
    this.dispatchEvent(loadEvent);
  }
  Aa(error) {
    this[TextTrackSymbol.na] = 3;
    this.dispatchEvent(new DOMEvent("error", { detail: error }));
  }
  xa(json, VTTCue, VTTRegion) {
    try {
      json = JSON.parse(json);
      if (json.regions) {
        this.sa = json.regions.map((json2) => Object.assign(new VTTRegion(), json2));
      }
      if (json.cues) {
        this.oa = json.cues.filter((json2) => isNumber(json2.startTime) && isNumber(json2.endTime)).map((json2) => Object.assign(new VTTCue(0, 0, ""), json2));
      }
    } catch (error) {
      this.Aa(error);
    }
  }
  ya(trigger) {
    this.dispatchEvent(new DOMEvent("cue-change", { trigger }));
  }
}
const captionRE = /captions|subtitles/;
function isTrackCaptionKind(track) {
  return captionRE.test(track.kind);
}

export { TextTrackSymbol as T, TextTrack as a, isCueActive as b, findActiveCue as f, getRequestCredentials as g, isTrackCaptionKind as i, loadScript as l, observeActiveTextTrack as o, preconnect as p };
