import { d as canUsePictureInPicture, e as canUseVideoPresentation, b as canPlayHLSNatively } from '../chunks/vidstack-bfe4dd65.js';
import { H as HTMLMediaProvider } from '../chunks/vidstack-768948c3.js';
import { a as TextTrack, T as TextTrackSymbol } from '../chunks/vidstack-b3a8b421.js';
import { o as onDispose, l as listenEvent, D as DOMEvent } from '../chunks/vidstack-4af9f92b.js';

class NativeHLSTextTracks {
  constructor(_video, _context) {
    this._ = _video;
    this.Of = _context;
    _video.textTracks.onaddtrack = this.ea.bind(this);
    onDispose(this.Pf.bind(this));
  }
  ea(event) {
    const nativeTrack = event.track;
    if (!nativeTrack || findTextTrackElement(this._, nativeTrack))
      return;
    const track = new TextTrack({
      id: nativeTrack.id,
      kind: nativeTrack.kind,
      label: nativeTrack.label,
      language: nativeTrack.language,
      type: "vtt"
    });
    track[TextTrackSymbol.va] = { track: nativeTrack };
    track[TextTrackSymbol.na] = 2;
    track[TextTrackSymbol.ha] = true;
    let lastIndex = 0;
    const onCueChange = (event2) => {
      if (!nativeTrack.cues)
        return;
      for (let i = lastIndex; i < nativeTrack.cues.length; i++) {
        track.addCue(nativeTrack.cues[i], event2);
        lastIndex++;
      }
    };
    onCueChange(event);
    nativeTrack.oncuechange = onCueChange;
    this.Of.textTracks.add(track, event);
    track.setMode(nativeTrack.mode, event);
  }
  Pf() {
    this._.textTracks.onaddtrack = null;
    for (const track of this.Of.textTracks) {
      const nativeTrack = track[TextTrackSymbol.va]?.track;
      if (nativeTrack?.oncuechange)
        nativeTrack.oncuechange = null;
    }
  }
}
function findTextTrackElement(video, track) {
  return Array.from(video.children).find((el) => el.track === track);
}

class VideoPictureInPicture {
  constructor(_video, _media) {
    this.R = (active, event) => {
      this.v.delegate.u("picture-in-picture-change", {
        detail: active,
        trigger: event
      });
    };
    this._ = _video;
    this.v = _media;
    listenEvent(this._, "enterpictureinpicture", this.Qf.bind(this));
    listenEvent(this._, "leavepictureinpicture", this.Rf.bind(this));
  }
  get active() {
    return document.pictureInPictureElement === this._;
  }
  get supported() {
    return canUsePictureInPicture(this._);
  }
  async enter() {
    return this._.requestPictureInPicture();
  }
  exit() {
    return document.exitPictureInPicture();
  }
  Qf(event) {
    this.R(true, event);
  }
  Rf(event) {
    this.R(false, event);
  }
}

class VideoPresentation {
  constructor(_video, _media) {
    this.ra = "inline";
    this._ = _video;
    this.v = _media;
    listenEvent(this._, "webkitpresentationmodechanged", this.Ca.bind(this));
  }
  get Uf() {
    return canUseVideoPresentation(this._);
  }
  async Tf(mode) {
    if (this.ra === mode)
      return;
    this._.webkitSetPresentationMode(mode);
  }
  Ca() {
    const prevMode = this.ra;
    this.ra = this._.webkitPresentationMode;
    this.v.player?.dispatch(
      new DOMEvent("video-presentation-change", {
        detail: this.ra,
        trigger: event
      })
    );
    ["fullscreen", "picture-in-picture"].forEach((type) => {
      if (this.ra === type || prevMode === type) {
        this.v.delegate.u(`${type}-change`, {
          detail: this.ra === type,
          trigger: event
        });
      }
    });
  }
}
class FullscreenPresentationAdapter {
  constructor(_presentation) {
    this.Sf = _presentation;
  }
  get active() {
    return this.Sf.ra === "fullscreen";
  }
  get supported() {
    return this.Sf.Uf;
  }
  async enter() {
    this.Sf.Tf("fullscreen");
  }
  async exit() {
    this.Sf.Tf("inline");
  }
}
class PIPPresentationAdapter {
  constructor(_presentation) {
    this.Sf = _presentation;
  }
  get active() {
    return this.Sf.ra === "picture-in-picture";
  }
  get supported() {
    return this.Sf.Uf;
  }
  async enter() {
    this.Sf.Tf("picture-in-picture");
  }
  async exit() {
    this.Sf.Tf("inline");
  }
}

class VideoProvider extends HTMLMediaProvider {
  constructor(video, context) {
    super(video);
    this.$$PROVIDER_TYPE = "VIDEO";
    if (canUseVideoPresentation(video)) {
      const presentation = new VideoPresentation(video, context);
      this.fullscreen = new FullscreenPresentationAdapter(presentation);
      this.pictureInPicture = new PIPPresentationAdapter(presentation);
    } else if (canUsePictureInPicture(video)) {
      this.pictureInPicture = new VideoPictureInPicture(video, context);
    }
  }
  get type() {
    return "video";
  }
  setup(context) {
    super.setup(context);
    if (canPlayHLSNatively(this.video)) {
      new NativeHLSTextTracks(this.video, context);
    }
    context.textRenderers.t(this.video);
    onDispose(() => {
      context.textRenderers.t(null);
    });
    if (this.type === "video")
      context.delegate.u("provider-setup", { detail: this });
  }
  /**
   * The native HTML `<video>` element.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement}
   */
  get video() {
    return this.v;
  }
}

export { VideoProvider };
