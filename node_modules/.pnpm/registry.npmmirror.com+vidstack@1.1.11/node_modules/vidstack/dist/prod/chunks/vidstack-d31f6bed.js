import { H as Host, e as effect, f as setAttribute, j as computed } from './vidstack-4af9f92b.js';
import { u as useMediaContext, M as MediaProvider, a as MediaPlayer } from './vidstack-e5068f63.js';

class MediaProviderElement extends Host(HTMLElement, MediaProvider) {
  constructor() {
    super(...arguments);
    this.Af = null;
  }
  static {
    this.tagName = "media-provider";
  }
  onSetup() {
    this.v = useMediaContext();
    this.setAttribute("keep-alive", "");
  }
  onDestroy() {
    this.Af?.remove();
    this.Af = null;
  }
  onConnect() {
    effect(() => {
      const loader = this.$state.loader();
      const media = loader ? loader.mediaType() === "audio" ? this.Bf() : this.Cf() : null;
      if (this.Af !== media) {
        const parent = this.Af?.parentElement ?? this;
        this.Af?.remove();
        this.Af = media;
        if (media)
          parent.prepend(media);
      }
      this.load(media);
    });
  }
  Bf() {
    const audio = this.Af instanceof HTMLAudioElement ? this.Af : document.createElement("audio");
    setAttribute(audio, "preload", "none");
    setAttribute(audio, "aria-hidden", "true");
    const { controls, crossorigin } = this.v.$state;
    effect(() => {
      setAttribute(audio, "controls", controls());
      setAttribute(audio, "crossorigin", crossorigin());
    });
    return audio;
  }
  Cf() {
    const video = this.Af instanceof HTMLVideoElement ? this.Af : document.createElement("video");
    const { controls, crossorigin, poster } = this.v.$state, $poster = computed(() => poster() && controls() ? poster() : null);
    effect(() => {
      setAttribute(video, "controls", controls());
      setAttribute(video, "crossorigin", crossorigin());
      setAttribute(video, "poster", $poster());
    });
    return video;
  }
}

class MediaPlayerElement extends Host(HTMLElement, MediaPlayer) {
  static {
    this.tagName = "media-player";
  }
  static {
    this.attrs = {
      preferNativeHLS: "prefer-native-hls"
    };
  }
}

export { MediaProviderElement as M, MediaPlayerElement as a };
