import { M as MediaProviderLoader, A as AudioProvider, a as MediaSrc, b as MediaType, V as VideoProvider, c as MediaContext, H as HLSProvider, T as Thumbnail, S as SliderOrientation, d as TextRenderer, e as TextTrack, f as TextTrackList, g as MediaKeyShortcuts, h as MediaKeyShortcut } from './dist/types/vidstack-a81d76d8.js';
export { b$ as AnyMediaProvider, eQ as AudioRadioGroup, eU as AudioRadioGroupChangeEvent, eS as AudioRadioGroupEvents, eR as AudioRadioGroupProps, eT as AudioRadioOption, bH as AudioTrack, bK as AudioTrackAddEvent, bM as AudioTrackChangeEvent, bG as AudioTrackList, bJ as AudioTrackListEvent, bI as AudioTrackListEvents, bL as AudioTrackRemoveEvent, dB as CaptionButton, dA as CaptionButtonProps, fc as Captions, fb as CaptionsProps, eV as CaptionsRadioGroup, eZ as CaptionsRadioGroupChangeEvent, eX as CaptionsRadioGroupEvents, eW as CaptionsRadioGroupProps, eY as CaptionsRadioOption, bN as ChangeAudioTrackEventDetail, eM as ChapterRadioGroupProps, eL as ChaptersRadioGroup, eO as ChaptersRadioGroupChangeEvent, eN as ChaptersRadioGroupEvents, eP as ChaptersRadioOption, di as Controls, dl as ControlsChangeEvent, dk as ControlsEvents, dm as ControlsGroup, dj as ControlsProps, d6 as DefaultAudioLayout, d5 as DefaultLayout, da as DefaultLayoutContext, d8 as DefaultLayoutProps, d9 as DefaultLayoutTranslations, d7 as DefaultVideoLayout, bm as FindMediaPlayerEvent, bl as FindMediaPlayerEventDetail, p as FullscreenAdapter, dD as FullscreenButton, dC as FullscreenButtonProps, r as FullscreenChangeEvent, F as FullscreenController, s as FullscreenErrorEvent, q as FullscreenEvents, f7 as Gesture, fa as GestureAction, f9 as GestureEventType, f8 as GestureProps, cC as HLSAudioTrackLoadedEvent, cB as HLSAudioTrackLoadingEvent, cA as HLSAudioTrackSwitchedEvent, cz as HLSAudioTrackSwitchingEvent, cy as HLSAudioTracksUpdatedEvent, d0 as HLSBackBufferReachedEvent, ck as HLSBufferAppendedEvent, cj as HLSBufferAppendingEvent, ch as HLSBufferCodecsEvent, ci as HLSBufferCreatedEvent, cl as HLSBufferEosEvent, cn as HLSBufferFlushedEvent, cm as HLSBufferFlushingEvent, cg as HLSBufferResetEvent, d1 as HLSConstructor, d2 as HLSConstructorLoader, cJ as HLSCuesParsedEvent, cZ as HLSDestroyingEvent, cY as HLSErrorEvent, cW as HLSFpsDropEvent, cX as HLSFpsDropLevelCappingEvent, cU as HLSFragBufferedDataEvent, cV as HLSFragChangedEvent, cP as HLSFragDecryptedEvent, cN as HLSFragLoadEmergencyAbortedEvent, cO as HLSFragLoadedEvent, cM as HLSFragLoadingEvent, cT as HLSFragParsedEvent, cQ as HLSFragParsingInitSegmentEvent, cS as HLSFragParsingMetadataEvent, cR as HLSFragParsingUserdataEvent, cL as HLSInitPtsFoundEvent, d4 as HLSInstanceCallback, ca as HLSInstanceEvent, c$ as HLSKeyLoadedEvent, c_ as HLSKeyLoadingEvent, cu as HLSLevelLoadedEvent, ct as HLSLevelLoadingEvent, cw as HLSLevelPtsUpdatedEvent, cs as HLSLevelSwitchedEvent, cr as HLSLevelSwitchingEvent, cv as HLSLevelUpdatedEvent, cx as HLSLevelsUpdatedEvent, c9 as HLSLibLoadErrorEvent, c7 as HLSLibLoadStartEvent, c8 as HLSLibLoadedEvent, d3 as HLSLibrary, cp as HLSManifestLoadedEvent, co as HLSManifestLoadingEvent, cq as HLSManifestParsedEvent, cd as HLSMediaAttachedEvent, cc as HLSMediaAttachingEvent, cf as HLSMediaDetachedEvent, ce as HLSMediaDetachingEvent, c6 as HLSMediaEvent, cK as HLSNonNativeTextTracksFoundEvent, c5 as HLSProviderEvents, cI as HLSSubtitleFragProcessedEvent, cH as HLSSubtitleTrackLoadedEvent, cG as HLSSubtitleTrackLoadingEvent, cF as HLSSubtitleTrackSwitchEvent, cE as HLSSubtitleTracksClearedEvent, cD as HLSSubtitleTracksUpdatedEvent, cb as HLSUnsupportedEvent, j as List, l as ListAddEvent, k as ListEvents, i as ListItem, n as ListReadonlyChangeEvent, m as ListRemoveEvent, dL as LiveButton, dK as LiveButtonProps, v as LogEvent, u as LogEventDetail, L as Logger, t as LoggerEvents, P as MediaAbortEvent, R as MediaAudioTrackChangeEvent, aS as MediaAudioTrackChangeRequestEvent, Q as MediaAudioTracksChangeEvent, U as MediaAutoplayChangeEvent, X as MediaAutoplayEvent, W as MediaAutoplayFailEvent, Y as MediaCanLoadEvent, _ as MediaCanPlayDetail, Z as MediaCanPlayEvent, $ as MediaCanPlayThroughEvent, K as MediaControls, a0 as MediaControlsChangeEvent, a3 as MediaDestroyEvent, a4 as MediaDurationChangeEvent, a5 as MediaEmptiedEvent, a6 as MediaEndEvent, a7 as MediaEndedEvent, aT as MediaEnterFullscreenRequestEvent, aV as MediaEnterPIPRequestEvent, bb as MediaErrorCode, bc as MediaErrorDetail, a8 as MediaErrorEvent, O as MediaEvent, N as MediaEvents, aU as MediaExitFullscreenRequestEvent, aW as MediaExitPIPRequestEvent, c2 as MediaFullscreenAdapter, a9 as MediaFullscreenChangeEvent, aa as MediaFullscreenErrorEvent, aR as MediaFullscreenRequestTarget, b6 as MediaHidePosterRequestEvent, b_ as MediaKeyTarget, ae as MediaLiveChangeEvent, af as MediaLiveEdgeChangeEvent, aX as MediaLiveEdgeRequestEvent, ag as MediaLoadStartEvent, ab as MediaLoadedDataEvent, ac as MediaLoadedMetadataEvent, ba as MediaLoadingStrategy, ad as MediaLoopChangeEvent, b7 as MediaLoopRequestEvent, aP as MediaMuteRequestEvent, aC as MediaOrientationChangeEvent, as as MediaPIPChangeEvent, at as MediaPIPErrorEvent, b4 as MediaPauseControlsRequestEvent, ai as MediaPauseEvent, a$ as MediaPauseRequestEvent, aj as MediaPlayEvent, ak as MediaPlayFailEvent, aY as MediaPlayRequestEvent, de as MediaPlayer, bk as MediaPlayerConnectEvent, I as MediaPlayerEvents, E as MediaPlayerProps, be as MediaPlayerState, al as MediaPlayingEvent, am as MediaPlaysinlineChangeEvent, an as MediaPosterChangeEvent, ao as MediaProgressEvent, dh as MediaProvider, c0 as MediaProviderAdapter, aq as MediaProviderChangeEvent, ap as MediaProviderLoaderChangeEvent, df as MediaProviderProps, ar as MediaProviderSetupEvent, dg as MediaProviderState, au as MediaQualitiesChangeEvent, av as MediaQualityChangeEvent, aZ as MediaQualityChangeRequestEvent, a1 as MediaRateChangeEvent, a_ as MediaRateChangeRequestEvent, J as MediaRemoteControl, aD as MediaReplayEvent, aM as MediaRequestEvents, bd as MediaResource, b3 as MediaResumeControlsRequestEvent, b0 as MediaSeekRequestEvent, aw as MediaSeekedEvent, ax as MediaSeekingEvent, b1 as MediaSeekingRequestEvent, c1 as MediaSetupContext, b5 as MediaShowPosterRequestEvent, a2 as MediaSourceChangeEvent, ay as MediaSourcesChangeEvent, az as MediaStalledEvent, aN as MediaStartLoadingRequestEvent, aA as MediaStartedEvent, bj as MediaState, G as MediaStateAccessors, bh as MediaStore, b8 as MediaStreamType, aF as MediaStreamTypeChangeEvent, aB as MediaSuspendEvent, aH as MediaTextTrackChangeEvent, aO as MediaTextTrackChangeRequestEvent, aG as MediaTextTracksChangeEvent, aE as MediaTimeUpdateEvent, ah as MediaTypeChangeEvent, aQ as MediaUnmuteRequestEvent, bn as MediaUserEvents, b9 as MediaViewType, aI as MediaViewTypeChangeEvent, aJ as MediaVolumeChange, aK as MediaVolumeChangeEvent, b2 as MediaVolumeChangeRequestEvent, aL as MediaWaitingEvent, ei as Menu, en as MenuButton, ep as MenuButtonEvents, eo as MenuButtonProps, eq as MenuButtonSelectEvent, em as MenuCloseEvent, ek as MenuEvents, er as MenuItem, ew as MenuItems, eA as MenuItemsProps, el as MenuOpenEvent, ex as MenuPlacement, ez as MenuPlacementAlign, ey as MenuPlacementSide, es as MenuPortal, eu as MenuPortalContext, et as MenuPortalProps, ej as MenuProps, dF as MuteButton, dE as MuteButtonProps, dH as PIPButton, dG as PIPButtonProps, dz as PlayButton, dy as PlayButtonProps, bO as PlayerQueryList, bQ as PlayerQueryListChangeEvent, bP as PlayerQueryListEvents, bi as PlayerStore, ff as Poster, fd as PosterProps, fe as PosterState, f2 as QualityRadioGroup, f6 as QualityRadioGroupChangeEvent, f5 as QualityRadioGroupEvents, f3 as QualityRadioGroupProps, f4 as QualityRadioOption, eF as Radio, eI as RadioChangeEvent, eH as RadioEvents, eB as RadioGroup, eE as RadioGroupChangeEvent, eD as RadioGroupEvents, eC as RadioGroupProps, eK as RadioOption, eG as RadioProps, eJ as RadioSelectEvent, z as ScreenOrientationChangeEvent, y as ScreenOrientationChangeEventDetail, w as ScreenOrientationController, x as ScreenOrientationEvents, C as ScreenOrientationLockType, B as ScreenOrientationType, dJ as SeekButton, dI as SeekButtonProps, dX as Slider, dT as SliderCSSVars, eg as SliderChapters, eh as SliderChaptersProps, d_ as SliderController, d$ as SliderControllerProps, dZ as SliderDelegate, dP as SliderDragEndEvent, dO as SliderDragStartEvent, dR as SliderDragValueChangeEvent, dN as SliderEvent, dM as SliderEvents, dS as SliderPointerValueChangeEvent, e8 as SliderPreview, ea as SliderPreviewProps, dY as SliderProps, dW as SliderState, dV as SliderStore, e6 as SliderValue, dQ as SliderValueChangeEvent, e7 as SliderValueProps, e0 as SliderVideo, e4 as SliderVideoCanPlayEvent, e5 as SliderVideoErrorEvent, e3 as SliderVideoEvents, e1 as SliderVideoProps, e2 as SliderVideoState, e_ as SpeedRadioGroup, f1 as SpeedRadioGroupChangeEvent, f0 as SpeedRadioGroupEvents, e$ as SpeedRadioGroupProps, bo as TextRenderers, bw as TextTrackAddCueEvent, bD as TextTrackAddEvent, by as TextTrackCueChangeEvent, bv as TextTrackErrorEvent, bs as TextTrackEvent, br as TextTrackEvents, bq as TextTrackInit, bC as TextTrackListEvent, bB as TextTrackListEvents, bF as TextTrackListModeChangeEvent, bu as TextTrackLoadEvent, bt as TextTrackLoadStartEvent, bz as TextTrackModeChangeEvent, bp as TextTrackReadyState, bx as TextTrackRemoveCueEvent, bE as TextTrackRemoveEvent, fl as ThumbnailCoords, fk as ThumbnailProps, fj as ThumbnailState, fm as ThumbnailsLoader, fg as Time, fh as TimeProps, ed as TimeSlider, ee as TimeSliderCSSVars, ef as TimeSliderProps, fi as TimeState, dx as ToggleButton, dw as ToggleButtonProps, dn as Tooltip, dr as TooltipContent, dv as TooltipContentProps, ds as TooltipPlacement, du as TooltipPlacementAlign, dt as TooltipPlacementSide, dp as TooltipProps, dq as TooltipTrigger, c4 as VideoPresentationChangeEvent, c3 as VideoPresentationEvents, bS as VideoQuality, bV as VideoQualityAddEvent, bZ as VideoQualityAutoChangeEvent, bX as VideoQualityChangeEvent, bY as VideoQualityChangeEventDetail, bR as VideoQualityList, bU as VideoQualityListEvent, bT as VideoQualityListEvents, bW as VideoQualityRemoveEvent, ec as VolumeSlider, eb as VolumeSliderProps, o as canFullscreen, db as defaultLayoutContext, bA as isTrackCaptionKind, D as mediaContext, bf as mediaState, ev as menuPortalContext, dU as sliderState, bg as softResetMediaState, e9 as updateSliderPreviewPlacement, dd as useDefaultLayoutContext, dc as useDefaultLayoutLang } from './dist/types/vidstack-a81d76d8.js';
import { R as ReadSignal, W as WriteSignal, C as Context, E as EventsTarget, D as Dispose, V as ViewController } from './dist/types/vidstack-b17407b1.js';
export { a as appendTriggerEvent, f as findTriggerEvent, h as hasTriggerEvent, b as isKeyboardClick, c as isKeyboardEvent, i as isPointerEvent, w as walkTriggerEventChain } from './dist/types/vidstack-b17407b1.js';
import { VTTCue } from 'media-captions';
export { IconProps } from './icons.js';
import 'hls.js';
import 'media-icons';

declare class AudioProviderLoader implements MediaProviderLoader<AudioProvider> {
    target: HTMLAudioElement;
    canPlay({ src, type }: MediaSrc): boolean;
    mediaType(): MediaType;
    load(): Promise<AudioProvider>;
}

declare class VideoProviderLoader implements MediaProviderLoader<VideoProvider> {
    target: HTMLVideoElement;
    canPlay(src: MediaSrc): boolean;
    mediaType(): MediaType;
    load(context: MediaContext): Promise<VideoProvider>;
}

declare class HLSProviderLoader extends VideoProviderLoader implements MediaProviderLoader<HLSProvider> {
    static supported: boolean;
    preconnect(): void;
    canPlay({ src, type }: MediaSrc): boolean;
    load(context: any): Promise<HLSProvider>;
}

/** @see {@link https://www.vidstack.io/docs/player/providers/audio} */
declare function isAudioProvider(provider: any): provider is AudioProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/video} */
declare function isVideoProvider(provider: any): provider is VideoProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/hls} */
declare function isHLSProvider(provider: any): provider is HLSProvider;
/** @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement} */
declare function isHTMLAudioElement(element: unknown): element is HTMLAudioElement;
/** @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement} */
declare function isHTMLVideoElement(element: unknown): element is HTMLVideoElement;
/** @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement} */
declare function isHTMLMediaElement(element: unknown): element is HTMLMediaElement;

/**
 * Used to display preview thumbnails when the user is hovering or dragging the time slider.
 * The time ranges in the WebVTT file will automatically be matched based on the current slider
 * pointer position.
 *
 * @attr data-loading - Whether thumbnail image is loading.
 * @attr data-error - Whether an error occurred loading thumbnail.
 * @attr data-hidden - Whether thumbnail is not available or failed to load.
 * @docs {@link https://www.vidstack.io/docs/player/components/sliders/slider-thumbnail}
 */
declare class SliderThumbnail extends Thumbnail {
    private _slider;
    protected onAttach(el: HTMLElement): void;
    protected _getTime(): number;
}

interface SliderContext {
    _disabled: ReadSignal<boolean>;
    _orientation: ReadSignal<SliderOrientation>;
    _preview: WriteSignal<HTMLElement | null>;
}
declare const sliderContext: Context<SliderContext>;

declare class TimeRange implements TimeRanges {
    private readonly _ranges;
    get length(): number;
    constructor(start?: number | [number, number][], end?: number);
    start(index: number): number;
    end(index: number): number;
}
declare function getTimeRangesStart(range: TimeRanges): number | null;
declare function getTimeRangesEnd(range: TimeRanges): number | null;

declare class LibASSTextRenderer implements TextRenderer {
    readonly loader: LibASSModuleLoader;
    config?: LibASSConfig | undefined;
    readonly priority = 1;
    private _instance;
    private _track;
    private _typeRE;
    constructor(loader: LibASSModuleLoader, config?: LibASSConfig | undefined);
    canRender(track: TextTrack): boolean;
    attach(video: HTMLVideoElement): void;
    changeTrack(track: TextTrack | null): void;
    detach(): void;
    private _freeTrack;
}
interface LibASSModuleLoader {
    (): Promise<{
        default: LibASSConstructor;
    }>;
}
interface LibASSConstructor {
    new (config?: {
        video: HTMLVideoElement;
        canvas?: HTMLCanvasElement;
        subUrl?: string;
    } & LibASSConfig): LibASSInstance;
}
interface LibASSInstance extends EventsTarget<LibASSInstanceEvents> {
    _video: HTMLVideoElement;
    _canvas: HTMLVideoElement | null;
    setTrackByUrl(url: string): void;
    setCurrentTime(time: number): void;
    freeTrack(): void;
    destroy(): void;
}
interface LibASSInstanceEvents {
    ready: LibASSReadyEvent;
    error: LibASSErrorEvent;
}
interface LibASSReadyEvent extends Event {
}
interface LibASSErrorEvent extends ErrorEvent {
}
/**
 * @see {@link https://github.com/ThaUnknown/jassub/tree/main#options}
 */
interface LibASSConfig {
    /**
     * Which image blending mode to use. WASM will perform better on lower end devices, JS will
     * perform better if the device and browser supports hardware acceleration.
     *
     * @defaultValue "js"
     */
    blendMode?: 'js' | 'wasm';
    /**
     * Whether or not to use async rendering, which offloads the CPU by creating image bitmaps on
     * the GPU.
     *
     * @defaultValue true
     */
    asyncRender?: boolean;
    /**
     * Whether or not to render things fully on the worker, greatly reduces CPU usage.
     *
     * @defaultValue true
     */
    offscreenRender?: boolean;
    /**
     * Whether or not to render subtitles as the video player renders frames, rather than predicting
     * which frame the player is on using events.
     *
     * @defaultValue true
     */
    onDemandRender?: boolean;
    /**
     * Target FPS to render subtitles at. Ignored when onDemandRender is enabled.
     *
     * @defaultValue 24
     */
    targetFps?: number;
    /**
     * Subtitle time offset in seconds.
     *
     * @defaultValue 0
     */
    timeOffset?: number;
    /**
     * Whether or not to print debug information.
     *
     * @defaultValue false
     */
    debug?: boolean;
    /**
     * Scale down (< 1.0) the subtitles canvas to improve performance at the expense of quality, or
     * scale it up (> 1.0).
     *
     * @defaultValue 1.0
     */
    prescaleFactor?: number;
    /**
     * The height in pixels beyond which the subtitles canvas won't be pre-scaled.
     *
     * @defaultValue 1080
     */
    prescaleHeightLimit?: number;
    /**
     * The maximum rendering height in pixels of the subtitles canvas. Beyond this subtitles will
     * be up-scaled by the browser.
     *
     * @defaultValue 0
     */
    maxRenderHeight?: number;
    /**
     * Attempt to discard all animated tags. Enabling this may severely mangle complex subtitles
     * and should only be considered as an last ditch effort of uncertain success for hardware
     * otherwise incapable of displaying anything. Will not reliably work with manually edited or
     * allocated events.
     *
     * @defaultValue false
     */
    dropAllAnimations?: boolean;
    /**
     * The URL of the worker.
     *
     * @defaultValue "jassub-worker.js"
     */
    workerUrl?: string;
    /**
     * The URL of the legacy worker. Only loaded if the browser doesn't support WASM.
     *
     * @defaultValue "jassub-worker-legacy.js"
     */
    legacyWorkerUrl?: string;
    /**
     * The URL of the subtitle file to play.
     *
     */
    subUrl?: string;
    /**
     * The content of the subtitle file to play.
     *
     */
    subContent?: string;
    /**
     * An array of links or `Uint8Array` to the fonts used in the subtitle. If `Uint8Array` is used
     * the array is copied, not referenced. This forces all the fonts in this array to be loaded
     * by the renderer, regardless of if they are used.
     *
     */
    fonts?: string[] | Uint8Array[];
    /**
     * Object with all available fonts. Key is font family in lower case, value is link or
     * `Uint8Array`. These fonts are selectively loaded if detected as used in the current
     * subtitle track.
     *
     * @defaultValue {'liberation sans': './default.woff2'}}
     */
    availableFonts?: Record<string, string>;
    /**
     * The font family key of the fallback font in `availableFonts` to use if the other font
     * for the style is missing special glyphs or unicode.
     *
     * @defaultValue "liberation sans"
     */
    fallbackFont?: string;
    /**
     * If the Local Font Access API is enabled `[chrome://flags/#font-access]`, the library will
     * query for permissions to use local fonts and use them if any are missing. The permission can
     * be queried beforehand using `navigator.permissions.request({ name: 'local-fonts' })`.
     *
     * @defaultValue true
     */
    useLocalFonts?: boolean;
    /**
     * libass bitmap cache memory limit in MiB (approximate).
     */
    libassMemoryLimit?: number;
    /**
     * libass glyph cache memory limit in MiB (approximate).
     */
    libassGlyphLimit?: number;
}

declare function findActiveCue(cues: readonly VTTCue[], time: number): VTTCue | null;
declare function isCueActive(cue: VTTCue, time: number): boolean;
declare function observeActiveTextTrack(tracks: TextTrackList, kind: TextTrackKind | TextTrackKind[], onChange: (track: TextTrack | null) => void): Dispose;

declare const MEDIA_KEY_SHORTCUTS: MediaKeyShortcuts;

declare class ARIAKeyShortcuts extends ViewController {
    private _shortcut;
    constructor(_shortcut: MediaKeyShortcut);
    protected onAttach(el: HTMLElement): void;
}

/**
 * Formats the given `duration` into a human readable form that can be displayed to the user.
 *
 * @param duration - The length of time to parse in seconds.
 * @param shouldPadHours - Whether to pad the hours to be length of 2.
 * @param shouldPadMinutes - Whether to pad the minutes to be length of 2.
 * @param shouldAlwaysShowHours - Whether to always show the hours unit.
 * @example `01:20 -> minutes:seconds`
 * @example `3:01:20 -> hours:minutes:seconds`
 * @example If `shouldPadHours` is `true` - `03:01:20`
 * @example If `shouldAlwaysShowHours` is `true` - `0:01:20`
 */
declare function formatTime(duration: number, shouldPadHours?: boolean | null, shouldPadMinutes?: boolean | null, shouldAlwaysShowHours?: boolean): string;
/**
 * Formats the given `duration` into human spoken form.
 *
 * @param duration - The length of time to parse in seconds.
 * @example `2 hour 3 min 4 sec`
 */
declare function formatSpokenTime(duration: number): string;

/**
 * Checks if the ScreenOrientation API is available.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
 */
declare function canOrientScreen(): boolean;
/**
 * Checks if the screen orientation can be changed.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
 */
declare function canRotateScreen(): boolean;
/**
 * Checks if the native HTML5 video player can play HLS.
 */
declare function canPlayHLSNatively(video?: HTMLVideoElement): boolean;
/**
 * Checks if the native HTML5 video player can enter picture-in-picture (PIP) mode when using
 * the Chrome browser.
 *
 * @see {@link https://developers.google.com/web/updates/2018/10/watch-video-using-picture-in-picture}
 */
declare function canUsePictureInPicture(video: HTMLVideoElement): boolean;
/**
 * Checks if the native HTML5 video player can use the presentation API in Safari.
 *
 * @see {@link https://developer.apple.com/documentation/webkitjs/htmlvideoelement/1631913-webkitpresentationmode}
 */
declare function canUseVideoPresentation(video: HTMLVideoElement): boolean;
declare function canChangeVolume(): Promise<boolean>;

export { ARIAKeyShortcuts, AudioProvider, AudioProviderLoader, HLSProvider, HLSProviderLoader, LibASSConfig, LibASSConstructor, LibASSErrorEvent, LibASSInstance, LibASSInstanceEvents, LibASSModuleLoader, LibASSReadyEvent, LibASSTextRenderer, MEDIA_KEY_SHORTCUTS, MediaContext, MediaKeyShortcut, MediaKeyShortcuts, MediaProviderLoader, MediaSrc, MediaType, SliderContext, SliderOrientation, SliderThumbnail, TextRenderer, TextTrack, TextTrackList, Thumbnail, TimeRange, VideoProvider, VideoProviderLoader, canChangeVolume, canOrientScreen, canPlayHLSNatively, canRotateScreen, canUsePictureInPicture, canUseVideoPresentation, findActiveCue, formatSpokenTime, formatTime, getTimeRangesEnd, getTimeRangesStart, isAudioProvider, isCueActive, isHLSProvider, isHTMLAudioElement, isHTMLMediaElement, isHTMLVideoElement, isVideoProvider, observeActiveTextTrack, sliderContext };
