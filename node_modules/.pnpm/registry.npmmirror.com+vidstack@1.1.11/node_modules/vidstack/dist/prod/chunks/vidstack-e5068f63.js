import { I as EventsTarget, D as DOMEvent, V as ViewController, l as listenEvent, o as onDispose, h as signal, p as peek, M as isArray, y as isUndefined, S as State, N as tick, O as createContext, v as useContext, C as Component, e as effect, t as isKeyboardEvent, j as computed, P as root, L as unwrap, Q as kebabToCamelCase, x as camelToKebabCase, k as isString, i as isKeyboardClick, R as waitIdlePeriod, q as appendTriggerEvent, f as setAttribute, G as deferredPromise, g as getScope, T as provideContext, K as animationFrameThrottle, U as uppercaseFirstChar, a as setStyle, s as scoped, W as prop, X as method, Y as untrack, Z as ariaBool$1, _ as isWriteSignal, F as isNull, A as isNumber, $ as isDOMEvent, a0 as hasProvidedContext, a1 as noop, u as useState, a2 as createScope, r as isPointerEvent, a3 as isMouseEvent, a4 as isTouchEvent, a5 as createDisposalBin } from './vidstack-4af9f92b.js';
import { i as isTrackCaptionKind, T as TextTrackSymbol, a as TextTrack, p as preconnect, g as getRequestCredentials, f as findActiveCue, o as observeActiveTextTrack, b as isCueActive } from './vidstack-b3a8b421.js';
import { L as ListSymbol, a as canOrientScreen, A as AUDIO_EXTENSIONS, l as AUDIO_TYPES, V as VIDEO_EXTENSIONS, m as VIDEO_TYPES, h as isHLSSrc, b as canPlayHLSNatively, i as isHLSSupported, H as HLS_VIDEO_EXTENSIONS, n as HLS_VIDEO_TYPES, o as IS_IPHONE, c as canChangeVolume, p as clampNumber, g as IS_SAFARI, r as round, j as getNumberOfDecimalPlaces } from './vidstack-bfe4dd65.js';
import { Q as QualitySymbol, c as coerceToError } from './vidstack-9f573e3f.js';
import { s as setAttributeIfEmpty, h as hasAnimation, r as requestScopedAnimationFrame, d as autoPlacement, o as onPress, e as setARIALabel, i as isElementParent } from './vidstack-e557f714.js';

var _a$1;
const GROUPED_LOG = Symbol(0);
class GroupedLog {
  constructor(logger, level, title, root, parent) {
    this[_a$1] = true;
    this.logs = [];
    this.logger = logger;
    this.level = level;
    this.title = title;
    this.root = root;
    this.parent = parent;
  }
  static {
    _a$1 = GROUPED_LOG;
  }
  log(...data) {
    this.logs.push({ data });
    return this;
  }
  labelledLog(label, ...data) {
    this.logs.push({ label, data });
    return this;
  }
  groupStart(title) {
    return new GroupedLog(this.logger, this.level, title, this.root ?? this, this);
  }
  groupEnd() {
    this.parent?.logs.push(this);
    return this.parent ?? this;
  }
  dispatch() {
    return this.logger.dispatch(this.level, this.root ?? this);
  }
}

var _a;
class List extends EventsTarget {
  constructor() {
    super(...arguments);
    this.d = [];
    /* @internal */
    this[_a] = false;
  }
  get length() {
    return this.d.length;
  }
  get readonly() {
    return this[ListSymbol.e];
  }
  /**
   * Transform list to an array.
   */
  toArray() {
    return [...this.d];
  }
  [(_a = ListSymbol.e, Symbol.iterator)]() {
    return this.d.values();
  }
  /* @internal */
  [ListSymbol.h](item, trigger) {
    const index = this.d.length;
    if (!("" + index in this)) {
      Object.defineProperty(this, index, {
        get() {
          return this.d[index];
        }
      });
    }
    if (this.d.includes(item))
      return;
    this.d.push(item);
    this.dispatchEvent(new DOMEvent("add", { detail: item, trigger }));
  }
  /* @internal */
  [ListSymbol.f](item, trigger) {
    const index = this.d.indexOf(item);
    if (index >= 0) {
      this[ListSymbol.i]?.(item, trigger);
      this.d.splice(index, 1);
      this.dispatchEvent(new DOMEvent("remove", { detail: item, trigger }));
    }
  }
  /* @internal */
  [ListSymbol.j](trigger) {
    for (const item of [...this.d])
      this[ListSymbol.f](item, trigger);
    this.d = [];
    this[ListSymbol.g](false, trigger);
    this[ListSymbol.k]?.();
  }
  /* @internal */
  [ListSymbol.g](readonly, trigger) {
    if (this[ListSymbol.e] === readonly)
      return;
    this[ListSymbol.e] = readonly;
    this.dispatchEvent(new DOMEvent("readonly-change", { detail: readonly, trigger }));
  }
}

var key = {
  fullscreenEnabled: 0,
  fullscreenElement: 1,
  requestFullscreen: 2,
  exitFullscreen: 3,
  fullscreenchange: 4,
  fullscreenerror: 5,
  fullscreen: 6
};
var webkit = [
  "webkitFullscreenEnabled",
  "webkitFullscreenElement",
  "webkitRequestFullscreen",
  "webkitExitFullscreen",
  "webkitfullscreenchange",
  "webkitfullscreenerror",
  "-webkit-full-screen"
];
var moz = [
  "mozFullScreenEnabled",
  "mozFullScreenElement",
  "mozRequestFullScreen",
  "mozCancelFullScreen",
  "mozfullscreenchange",
  "mozfullscreenerror",
  "-moz-full-screen"
];
var ms = [
  "msFullscreenEnabled",
  "msFullscreenElement",
  "msRequestFullscreen",
  "msExitFullscreen",
  "MSFullscreenChange",
  "MSFullscreenError",
  "-ms-fullscreen"
];
var document$1 = typeof window !== "undefined" && typeof window.document !== "undefined" ? window.document : {};
var vendor = "fullscreenEnabled" in document$1 && Object.keys(key) || webkit[0] in document$1 && webkit || moz[0] in document$1 && moz || ms[0] in document$1 && ms || [];
var fscreen = {
  requestFullscreen: function(element) {
    return element[vendor[key.requestFullscreen]]();
  },
  requestFullscreenFunction: function(element) {
    return element[vendor[key.requestFullscreen]];
  },
  get exitFullscreen() {
    return document$1[vendor[key.exitFullscreen]].bind(document$1);
  },
  get fullscreenPseudoClass() {
    return ":" + vendor[key.fullscreen];
  },
  addEventListener: function(type, handler, options) {
    return document$1.addEventListener(vendor[key[type]], handler, options);
  },
  removeEventListener: function(type, handler, options) {
    return document$1.removeEventListener(vendor[key[type]], handler, options);
  },
  get fullscreenEnabled() {
    return Boolean(document$1[vendor[key.fullscreenEnabled]]);
  },
  set fullscreenEnabled(val) {
  },
  get fullscreenElement() {
    return document$1[vendor[key.fullscreenElement]];
  },
  set fullscreenElement(val) {
  },
  get onfullscreenchange() {
    return document$1[("on" + vendor[key.fullscreenchange]).toLowerCase()];
  },
  set onfullscreenchange(handler) {
    return document$1[("on" + vendor[key.fullscreenchange]).toLowerCase()] = handler;
  },
  get onfullscreenerror() {
    return document$1[("on" + vendor[key.fullscreenerror]).toLowerCase()];
  },
  set onfullscreenerror(handler) {
    return document$1[("on" + vendor[key.fullscreenerror]).toLowerCase()] = handler;
  }
};
var fscreen$1 = fscreen;

const CAN_FULLSCREEN = fscreen$1.fullscreenEnabled;
class FullscreenController extends ViewController {
  constructor() {
    super(...arguments);
    /**
     * Tracks whether we're the active fullscreen event listener. Fullscreen events can only be
     * listened to globally on the document so we need to know if they relate to the current host
     * element or not.
     */
    this.l = false;
    this.m = false;
  }
  get active() {
    return this.m;
  }
  get supported() {
    return CAN_FULLSCREEN;
  }
  onConnect() {
    listenEvent(fscreen$1, "fullscreenchange", this.n.bind(this));
    listenEvent(fscreen$1, "fullscreenerror", this.o.bind(this));
    onDispose(this.c.bind(this));
  }
  async c() {
    if (CAN_FULLSCREEN)
      await this.exit();
  }
  n(event) {
    const active = isFullscreen(this.el);
    if (active === this.m)
      return;
    if (!active)
      this.l = false;
    this.m = active;
    this.dispatch("fullscreen-change", { detail: active, trigger: event });
  }
  o(event) {
    if (!this.l)
      return;
    this.dispatch("fullscreen-error", { detail: null, trigger: event });
    this.l = false;
  }
  async enter() {
    try {
      this.l = true;
      if (!this.el || isFullscreen(this.el))
        return;
      assertFullscreenAPI();
      return fscreen$1.requestFullscreen(this.el);
    } catch (error) {
      this.l = false;
      throw error;
    }
  }
  async exit() {
    if (!this.el || !isFullscreen(this.el))
      return;
    assertFullscreenAPI();
    return fscreen$1.exitFullscreen();
  }
}
function canFullscreen() {
  return CAN_FULLSCREEN;
}
function isFullscreen(host) {
  if (fscreen$1.fullscreenElement === host)
    return true;
  try {
    return host.matches(
      // @ts-expect-error - `fullscreenPseudoClass` is missing from `@types/fscreen`.
      fscreen$1.fullscreenPseudoClass
    );
  } catch (error) {
    return false;
  }
}
function assertFullscreenAPI() {
  if (CAN_FULLSCREEN)
    return;
  throw Error(
    "[vidstack] no fullscreen API"
  );
}

const CAN_USE_SCREEN_ORIENTATION_API = canOrientScreen();
class ScreenOrientationController extends ViewController {
  constructor() {
    super(...arguments);
    this.q = signal(getScreenOrientation());
    this.p = signal(false);
  }
  /**
   * The current screen orientation type.
   *
   * @signal
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation}
   * @see https://w3c.github.io/screen-orientation/#screen-orientation-types-and-locks
   */
  get type() {
    return this.q();
  }
  /**
   * Whether the screen orientation is currently locked.
   *
   * @signal
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation}
   * @see https://w3c.github.io/screen-orientation/#screen-orientation-types-and-locks
   */
  get locked() {
    return this.p();
  }
  /**
   * Whether the viewport is in a portrait orientation.
   *
   * @signal
   */
  get portrait() {
    return this.q().startsWith("portrait");
  }
  /**
   * Whether the viewport is in a landscape orientation.
   *
   * @signal
   */
  get landscape() {
    return this.q().startsWith("landscape");
  }
  /**
   * Whether the native Screen Orientation API is available.
   */
  get supported() {
    return CAN_USE_SCREEN_ORIENTATION_API;
  }
  onConnect() {
    if (CAN_USE_SCREEN_ORIENTATION_API) {
      listenEvent(screen.orientation, "change", this.s.bind(this));
    } else {
      const query = window.matchMedia("(orientation: landscape)");
      query.onchange = this.s.bind(this);
      onDispose(() => query.onchange = null);
    }
    onDispose(this.c.bind(this));
  }
  async c() {
    if (CAN_USE_SCREEN_ORIENTATION_API && this.p())
      await this.unlock();
  }
  s(event) {
    this.q.set(getScreenOrientation());
    this.dispatch("orientation-change", {
      detail: {
        orientation: peek(this.q),
        lock: this.r
      },
      trigger: event
    });
  }
  /**
   * Locks the orientation of the screen to the desired orientation type using the
   * Screen Orientation API.
   *
   * @param lockType - The screen lock orientation type.
   * @throws Error - If screen orientation API is unavailable.
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
   * @see {@link https://w3c.github.io/screen-orientation}
   */
  async lock(lockType) {
    if (peek(this.p) || this.r === lockType)
      return;
    assertScreenOrientationAPI();
    await screen.orientation.lock(lockType);
    this.p.set(true);
    this.r = lockType;
  }
  /**
   * Unlocks the orientation of the screen to it's default state using the Screen Orientation
   * API. This method will throw an error if the API is unavailable.
   *
   * @throws Error - If screen orientation API is unavailable.
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
   * @see {@link https://w3c.github.io/screen-orientation}
   */
  async unlock() {
    if (!peek(this.p))
      return;
    assertScreenOrientationAPI();
    this.r = void 0;
    await screen.orientation.unlock();
    this.p.set(false);
  }
}
function assertScreenOrientationAPI() {
  if (CAN_USE_SCREEN_ORIENTATION_API)
    return;
  throw Error(
    "[vidstack] no orientation API"
  );
}
function getScreenOrientation() {
  if (CAN_USE_SCREEN_ORIENTATION_API)
    return window.screen.orientation.type;
  return window.innerWidth >= window.innerHeight ? "landscape-primary" : "portrait-primary";
}

class TimeRange {
  get length() {
    return this.G.length;
  }
  constructor(start, end) {
    if (isArray(start)) {
      this.G = start;
    } else if (!isUndefined(start) && !isUndefined(end)) {
      this.G = [[start, end]];
    } else {
      this.G = [];
    }
  }
  start(index) {
    return this.G[index][0] ?? Infinity;
  }
  end(index) {
    return this.G[index][1] ?? Infinity;
  }
}
function getTimeRangesStart(range) {
  if (!range.length)
    return null;
  let min = range.start(0);
  for (let i = 1; i < range.length; i++) {
    const value = range.start(i);
    if (value < min)
      min = value;
  }
  return min;
}
function getTimeRangesEnd(range) {
  if (!range.length)
    return null;
  let max = range.end(0);
  for (let i = 1; i < range.length; i++) {
    const value = range.end(i);
    if (value > max)
      max = value;
  }
  return max;
}

const mediaState = new State({
  audioTracks: [],
  audioTrack: null,
  autoplay: false,
  autoplayError: void 0,
  buffered: new TimeRange(),
  duration: 0,
  canLoad: false,
  canFullscreen: false,
  canPictureInPicture: false,
  canPlay: false,
  controls: false,
  controlsVisible: false,
  crossorigin: null,
  poster: "",
  currentTime: 0,
  ended: false,
  error: void 0,
  fullscreen: false,
  loop: false,
  logLevel: "silent",
  mediaType: "unknown",
  muted: false,
  paused: true,
  played: new TimeRange(),
  playing: false,
  playsinline: false,
  pictureInPicture: false,
  preload: "metadata",
  playbackRate: 1,
  qualities: [],
  quality: null,
  autoQuality: false,
  canSetQuality: true,
  canSetVolume: false,
  seekable: new TimeRange(),
  seeking: false,
  source: { src: "", type: "" },
  sources: [],
  started: false,
  title: "",
  textTracks: [],
  textTrack: null,
  volume: 1,
  waiting: false,
  get viewType() {
    return this.providedViewType !== "unknown" ? this.providedViewType : this.inferredViewType;
  },
  get streamType() {
    return this.providedStreamType !== "unknown" ? this.providedStreamType : this.inferredStreamType;
  },
  get currentSrc() {
    return this.source;
  },
  get bufferedStart() {
    return getTimeRangesStart(this.buffered) ?? 0;
  },
  get bufferedEnd() {
    return getTimeRangesEnd(this.buffered) ?? 0;
  },
  get seekableStart() {
    return getTimeRangesStart(this.seekable) ?? 0;
  },
  get seekableEnd() {
    return this.canPlay ? getTimeRangesEnd(this.seekable) ?? Infinity : 0;
  },
  get seekableWindow() {
    return Math.max(0, this.seekableEnd - this.seekableStart);
  },
  // ~~ responsive design ~~
  pointer: "fine",
  orientation: "landscape",
  width: 0,
  height: 0,
  mediaWidth: 0,
  mediaHeight: 0,
  // ~~ user props ~~
  userBehindLiveEdge: false,
  // ~~ live props ~~
  liveEdgeTolerance: 10,
  minLiveDVRWindow: 60,
  get canSeek() {
    return /unknown|on-demand|:dvr/.test(this.streamType) && Number.isFinite(this.seekableWindow) && (!this.live || /:dvr/.test(this.streamType) && this.seekableWindow >= this.minLiveDVRWindow);
  },
  get live() {
    return this.streamType.includes("live") || !Number.isFinite(this.duration);
  },
  get liveEdgeStart() {
    return this.live && Number.isFinite(this.seekableEnd) ? Math.max(0, (this.liveSyncPosition ?? this.seekableEnd) - this.liveEdgeTolerance) : 0;
  },
  get liveEdge() {
    return this.live && (!this.canSeek || !this.userBehindLiveEdge && this.currentTime >= this.liveEdgeStart);
  },
  get liveEdgeWindow() {
    return this.live && Number.isFinite(this.seekableEnd) ? this.seekableEnd - this.liveEdgeStart : 0;
  },
  // ~~ internal props ~~
  autoplaying: false,
  inferredViewType: "unknown",
  providedViewType: "unknown",
  providedStreamType: "unknown",
  inferredStreamType: "unknown",
  liveSyncPosition: null
});
const DO_NOT_RESET_ON_SRC_CHANGE = /* @__PURE__ */ new Set([
  "autoplay",
  "canFullscreen",
  "canLoad",
  "canPictureInPicture",
  "canSetVolume",
  "controls",
  "crossorigin",
  "fullscreen",
  "height",
  "logLevel",
  "loop",
  "mediaHeight",
  "mediaWidth",
  "mediaType",
  "muted",
  "orientation",
  "pictureInPicture",
  "playsinline",
  "pointer",
  "poster",
  "preload",
  "providedStreamType",
  "inferredViewType",
  "providedViewType",
  "source",
  "sources",
  "textTrack",
  "textTracks",
  "title",
  "volume",
  "width"
]);
function softResetMediaState($media) {
  mediaState.reset($media, (prop) => !DO_NOT_RESET_ON_SRC_CHANGE.has(prop));
  tick();
}

const mediaContext = createContext();
function useMediaContext() {
  return useContext(mediaContext);
}

class MediaRemoteControl {
  constructor(_logger = void 0) {
    this.b = null;
    this.I = null;
    this.K = -1;
    this.a = _logger;
  }
  /**
   * Set the target from which to dispatch media requests events from. The events should bubble
   * up from this target to the `<media-player>` element.
   *
   * @example
   * ```ts
   * const button = document.querySelector('button');
   * remote.setTarget(button);
   * ```
   */
  setTarget(target) {
    this.b = target;
  }
  /**
   * Returns the current `<media-player>` element. This method will attempt to find the player by
   * searching up from either the given `target` or default target set via `remote.setTarget`.
   *
   * @example
   * ```ts
   * const player = remote.getPlayer();
   * ```
   */
  getPlayer(target) {
    if (this.I)
      return this.I;
    (target ?? this.b)?.dispatchEvent(
      new DOMEvent("find-media-player", {
        detail: (player) => void (this.I = player),
        bubbles: true,
        composed: true
      })
    );
    return this.I;
  }
  /**
   * Set the current `<media-player>` element so the remote can support toggle methods such as
   * `togglePaused` as they rely on the current media state.
   */
  setPlayer(player) {
    this.I = player;
  }
  /**
   * Dispatch a request to start the media loading process. This will only work if the media
   * player has been initialized with a custom loading strategy `<media-player load="custom">`.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/loading#loading-strategies}
   */
  startLoading(trigger) {
    this.H("media-start-loading", trigger);
  }
  /**
   * Dispatch a request to begin/resume media playback.
   */
  play(trigger) {
    this.H("media-play-request", trigger);
  }
  /**
   * Dispatch a request to pause media playback.
   */
  pause(trigger) {
    this.H("media-pause-request", trigger);
  }
  /**
   * Dispatch a request to set the media volume to mute (0).
   */
  mute(trigger) {
    this.H("media-mute-request", trigger);
  }
  /**
   * Dispatch a request to unmute the media volume and set it back to it's previous state.
   */
  unmute(trigger) {
    this.H("media-unmute-request", trigger);
  }
  /**
   * Dispatch a request to enter fullscreen.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/fullscreen#media-remote}
   */
  enterFullscreen(target, trigger) {
    this.H("media-enter-fullscreen-request", trigger, target);
  }
  /**
   * Dispatch a request to exit fullscreen.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/fullscreen#media-remote}
   */
  exitFullscreen(target, trigger) {
    this.H("media-exit-fullscreen-request", trigger, target);
  }
  /**
   * Dispatch a request to enter picture-in-picture mode.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/picture-in-picture#media-remote}
   */
  enterPictureInPicture(trigger) {
    this.H("media-enter-pip-request", trigger);
  }
  /**
   * Dispatch a request to exit picture-in-picture mode.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/picture-in-picture#media-remote}
   */
  exitPictureInPicture(trigger) {
    this.H("media-exit-pip-request", trigger);
  }
  /**
   * Notify the media player that a seeking process is happening and to seek to the given `time`.
   */
  seeking(time, trigger) {
    this.H("media-seeking-request", trigger, time);
  }
  /**
   * Notify the media player that a seeking operation has completed and to seek to the given `time`.
   * This is generally called after a series of `remote.seeking()` calls.
   */
  seek(time, trigger) {
    this.H("media-seek-request", trigger, time);
  }
  seekToLiveEdge(trigger) {
    this.H("media-live-edge-request", trigger);
  }
  /**
   * Dispatch a request to update the media volume to the given `volume` level which is a value
   * between 0 and 1.
   *
   * @example
   * ```ts
   * remote.changeVolume(0); // 0%
   * remote.changeVolume(0.05); // 5%
   * remote.changeVolume(0.5); // 50%
   * remote.changeVolume(0.75); // 70%
   * remote.changeVolume(1); // 100%
   * ```
   */
  changeVolume(volume, trigger) {
    this.H("media-volume-change-request", trigger, Math.max(0, Math.min(1, volume)));
  }
  /**
   * Dispatch a request to change the current audio track.
   *
   * @example
   * ```ts
   * remote.changeAudioTrack(1); // track at index 1
   * ```
   */
  changeAudioTrack(index, trigger) {
    this.H("media-audio-track-change-request", trigger, index);
  }
  /**
   * Dispatch a request to change the video quality. The special value `-1` represents auto quality
   * selection.
   *
   * @example
   * ```ts
   * remote.changeQuality(-1); // auto
   * remote.changeQuality(1); // quality at index 1
   * ```
   */
  changeQuality(index, trigger) {
    this.H("media-quality-change-request", trigger, index);
  }
  /**
   * Request auto quality selection.
   */
  requestAutoQuality(trigger) {
    this.changeQuality(-1, trigger);
  }
  /**
   * Dispatch a request to change the mode of the text track at the given index.
   *
   * @example
   * ```ts
   * remote.changeTextTrackMode(1, 'showing'); // track at index 1
   * ```
   */
  changeTextTrackMode(index, mode, trigger) {
    this.H("media-text-track-change-request", trigger, {
      index,
      mode
    });
  }
  /**
   * Dispatch a request to change the media playback rate.
   *
   * @example
   * ```ts
   * remote.changePlaybackRate(0.5); // Half the normal speed
   * remote.changePlaybackRate(1); // Normal speed
   * remote.changePlaybackRate(1.5); // 50% faster than normal
   * remote.changePlaybackRate(2); // Double the normal speed
   * ```
   */
  changePlaybackRate(rate, trigger) {
    this.H("media-rate-change-request", trigger, rate);
  }
  /**
   * Dispatch a request to resume idle tracking on controls. Refer to for more information.
   */
  resumeControls(trigger) {
    this.H("media-resume-controls-request", trigger);
  }
  /**
   * Dispatch a request to pause controls idle tracking. Pausing tracking will result in the
   * controls being visible until `remote.resumeControls()` is called. This method
   * is generally used when building custom controls and you'd like to prevent the UI from
   * disappearing.
   *
   * @example
   * ```ts
   * // Prevent controls hiding while menu is being interacted with.
   * function onSettingsOpen() {
   *   remote.pauseControls();
   * }
   *
   * function onSettingsClose() {
   *   remote.resumeControls();
   * }
   * ```
   */
  pauseControls(trigger) {
    this.H("media-pause-controls-request", trigger);
  }
  /**
   * Dispatch a request to toggle the media playback state.
   */
  togglePaused(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.paused)
      this.play(trigger);
    else
      this.pause(trigger);
  }
  /**
   * Dispatch a request to toggle the controls visibility.
   */
  toggleControls(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (!player.controls.showing) {
      player.controls.show(0, trigger);
    } else {
      player.controls.hide(0, trigger);
    }
  }
  /**
   * Dispatch a request to toggle the media muted state.
   */
  toggleMuted(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.muted)
      this.unmute(trigger);
    else
      this.mute(trigger);
  }
  /**
   * Dispatch a request to toggle the media fullscreen state.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/fullscreen#media-remote}
   */
  toggleFullscreen(target, trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.fullscreen)
      this.exitFullscreen(target, trigger);
    else
      this.enterFullscreen(target, trigger);
  }
  /**
   * Dispatch a request to toggle the media picture-in-picture mode.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/picture-in-picture#media-remote}
   */
  togglePictureInPicture(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.pictureInPicture)
      this.exitPictureInPicture(trigger);
    else
      this.enterPictureInPicture(trigger);
  }
  /**
   * Turn captions off.
   */
  disableCaptions(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    const tracks = player.state.textTracks, track = player.state.textTrack;
    if (track) {
      const index = tracks.indexOf(track);
      this.changeTextTrackMode(index, "disabled", trigger);
    }
  }
  /**
   * Dispatch a request to toggle the current captions mode.
   */
  toggleCaptions(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    const tracks = player.state.textTracks, track = player.state.textTrack;
    if (track) {
      const index = tracks.indexOf(track);
      this.changeTextTrackMode(index, "disabled", trigger);
      this.K = index;
    } else {
      let index = this.K;
      if (!tracks[index] || !isTrackCaptionKind(tracks[index])) {
        index = -1;
      }
      if (index === -1) {
        index = tracks.findIndex((track2) => isTrackCaptionKind(track2) && track2.default);
      }
      if (index === -1) {
        index = tracks.findIndex((track2) => isTrackCaptionKind(track2));
      }
      if (index >= 0)
        this.changeTextTrackMode(index, "showing", trigger);
      this.K = -1;
    }
  }
  H(type, trigger, detail) {
    const request = new DOMEvent(type, {
      bubbles: true,
      composed: true,
      detail,
      trigger
    });
    let target = trigger?.target || null;
    if (target && target instanceof Component)
      target = target.el;
    const shouldUsePlayer = !target || target === document || target === window || target === document.body || this.I?.el && target instanceof Node && !this.I.el.contains(target);
    target = shouldUsePlayer ? this.b ?? this.getPlayer()?.el : target ?? this.b;
    if (this.I) {
      this.I.canPlayQueue.L(type, () => target?.dispatchEvent(request));
    } else {
      target?.dispatchEvent(request);
    }
  }
  J(method) {
  }
}

class MediaPlayerController extends ViewController {
}

class MediaControls extends MediaPlayerController {
  constructor() {
    super(...arguments);
    this.P = -2;
    this.M = false;
    this.N = null;
    /**
     * The default amount of delay in milliseconds while media playback is progressing without user
     * activity to indicate an idle state (i.e., hide controls).
     *
     * @defaultValue 2000
     */
    this.defaultDelay = 2e3;
  }
  /**
   * Whether media controls are currently visible.
   */
  get showing() {
    return this.$state.controlsVisible();
  }
  /**
   * Show controls.
   */
  show(delay = 0, trigger) {
    this.Q();
    if (!this.M) {
      this.O(true, delay, trigger);
    }
  }
  /**
   * Hide controls.
   */
  hide(delay = this.defaultDelay, trigger) {
    this.Q();
    if (!this.M) {
      this.O(false, delay, trigger);
    }
  }
  /**
   * Whether all idle tracking on controls should be paused until resumed again.
   */
  pause(trigger) {
    this.M = true;
    this.Q();
    this.O(true, 0, trigger);
  }
  resume(trigger) {
    this.M = false;
    if (this.$state.paused())
      return;
    this.O(false, this.defaultDelay, trigger);
  }
  onConnect() {
    effect(this.S.bind(this));
    const onPlay = this.T.bind(this), onPause = this.U.bind(this);
    this.listen("can-play", (event) => this.show(0, event));
    this.listen("play", onPlay);
    this.listen("pause", onPause);
    this.listen("autoplay-fail", onPause);
  }
  S() {
    const { paused, started, autoplayError } = this.$state;
    if (paused() || autoplayError() && !started())
      return;
    const onStopIdle = this.V.bind(this);
    for (const eventType of ["pointerup", "keydown"]) {
      listenEvent(this.el, eventType, onStopIdle);
    }
    effect(() => {
      if (this.$state.pointer() === "fine") {
        listenEvent(this.el, "pointermove", onStopIdle);
      }
    });
  }
  T(event) {
    this.show(0, event);
    this.hide(this.defaultDelay, event);
  }
  U(event) {
    this.show(0, event);
  }
  Q() {
    window.clearTimeout(this.P);
    this.P = -1;
  }
  V(event) {
    if (event.MEDIA_GESTURE || this.M)
      return;
    if (isKeyboardEvent(event)) {
      if (event.key === "Escape") {
        this.el?.focus();
        this.N = null;
      } else if (this.N) {
        event.preventDefault();
        requestAnimationFrame(() => {
          this.N?.focus();
          this.N = null;
        });
      }
    }
    this.show(0, event);
    this.hide(this.defaultDelay, event);
  }
  O(visible, delay, trigger) {
    if (delay === 0) {
      this.R(visible, trigger);
      return;
    }
    this.P = window.setTimeout(() => {
      this.R(visible && !this.M, trigger);
    }, delay);
  }
  R(visible, trigger) {
    if (this.$state.controlsVisible() === visible)
      return;
    this.$state.controlsVisible.set(visible);
    if (!visible && document.activeElement && this.el?.contains(document.activeElement)) {
      this.N = document.activeElement;
      requestAnimationFrame(() => this.el?.focus());
    }
    this.dispatch("controls-change", {
      detail: visible,
      trigger
    });
  }
}

class NativeTextRenderer {
  constructor() {
    this.priority = 0;
    this.ah = true;
    this._ = null;
    this.ia = null;
    this.$g = /* @__PURE__ */ new Set();
  }
  canRender() {
    return true;
  }
  attach(video) {
    this._ = video;
    video.textTracks.onchange = this.R.bind(this);
  }
  addTrack(track) {
    this.$g.add(track);
    this.ch(track);
  }
  removeTrack(track) {
    track[TextTrackSymbol.va]?.remove?.();
    track[TextTrackSymbol.va] = null;
    this.$g.delete(track);
  }
  changeTrack(track) {
    const current = track?.[TextTrackSymbol.va];
    if (current && current.track.mode !== "showing") {
      current.track.mode = "showing";
    }
    this.ia = track;
  }
  setDisplay(display) {
    this.ah = display;
    this.R();
  }
  detach() {
    if (this._)
      this._.textTracks.onchange = null;
    for (const track of this.$g)
      this.removeTrack(track);
    this.$g.clear();
    this._ = null;
    this.ia = null;
  }
  ch(track) {
    if (!this._)
      return;
    const el = track[TextTrackSymbol.va] ??= this.dh(track);
    if (el instanceof HTMLElement) {
      this._.append(el);
      el.track.mode = el.default ? "showing" : "hidden";
    }
  }
  dh(track) {
    const el = document.createElement("track"), isDefault = track.default || track.mode === "showing", isSupported = track.src && track.type === "vtt";
    el.id = track.id;
    el.src = isSupported ? track.src : "https://cdn.jsdelivr.net/npm/vidstack@next/empty.vtt";
    el.label = track.label;
    el.kind = track.kind;
    el.default = isDefault;
    track.language && (el.srclang = track.language);
    if (isDefault && !isSupported) {
      this.bh(track, el.track);
    }
    return el;
  }
  bh(track, native) {
    if (track.src && track.type === "vtt" || native.cues?.length)
      return;
    for (const cue of track.cues)
      native.addCue(cue);
  }
  R(event) {
    for (const track of this.$g) {
      const nativeTrack = track[TextTrackSymbol.va]?.track;
      if (!nativeTrack)
        continue;
      if (!this.ah) {
        nativeTrack.mode = "disabled";
        continue;
      }
      const isShowing = nativeTrack.mode === "showing";
      if (isShowing)
        this.bh(track, nativeTrack);
      track.setMode(isShowing ? "showing" : "disabled", event);
    }
  }
}

class TextRenderers {
  constructor(_media) {
    this._ = null;
    this.Z = [];
    this.aa = false;
    this.W = null;
    this.X = null;
    this.v = _media;
    const textTracks = _media.textTracks;
    this.$ = textTracks;
    effect(this.da.bind(this));
    onDispose(this.ba.bind(this));
    listenEvent(textTracks, "add", this.ea.bind(this));
    listenEvent(textTracks, "remove", this.fa.bind(this));
    listenEvent(textTracks, "mode-change", this.Y.bind(this));
  }
  da() {
    const { $state, $iosControls } = this.v;
    this.aa = $state.controls() || $iosControls();
    this.Y();
  }
  add(renderer) {
    this.Z.push(renderer);
    this.Y();
  }
  remove(renderer) {
    renderer.detach();
    this.Z.splice(this.Z.indexOf(renderer), 1);
    this.Y();
  }
  /* @internal */
  t(video) {
    requestAnimationFrame(() => {
      this._ = video;
      if (video) {
        this.W = new NativeTextRenderer();
        this.W.attach(video);
        for (const track of this.$)
          this.ca(track);
      }
      this.Y();
    });
  }
  ca(track) {
    if (!isTrackCaptionKind(track))
      return;
    this.W?.addTrack(track);
  }
  ga(track) {
    if (!isTrackCaptionKind(track))
      return;
    this.W?.removeTrack(track);
  }
  ea(event) {
    this.ca(event.detail);
  }
  fa(event) {
    this.ga(event.detail);
  }
  Y() {
    if (!this._) {
      this.ba();
      return;
    }
    const currentTrack = this.$.selected;
    if (this.aa || currentTrack?.[TextTrackSymbol.ha]) {
      this.X?.changeTrack(null);
      this.W.setDisplay(true);
      this.W.changeTrack(currentTrack);
      return;
    }
    this.W.setDisplay(false);
    this.W.changeTrack(null);
    if (!currentTrack) {
      this.X?.changeTrack(null);
      return;
    }
    const customRenderer = this.Z.sort((a, b) => a.priority - b.priority).find((loader) => loader.canRender(currentTrack));
    if (this.X !== customRenderer) {
      this.X?.detach();
      customRenderer?.attach(this._);
      this.X = customRenderer ?? null;
    }
    customRenderer?.changeTrack(currentTrack);
  }
  ba() {
    this.W?.detach();
    this.W = null;
    this.X?.detach();
    this.X = null;
  }
}

class TextTrackList extends List {
  constructor() {
    super(...arguments);
    this.ua = false;
    this.Da = {};
    this.Ea = this.Fa.bind(this);
  }
  get selected() {
    const track = this.d.find((t) => t.mode === "showing" && isTrackCaptionKind(t));
    return track ?? null;
  }
  add(init, trigger) {
    const isTrack = init instanceof TextTrack, track = isTrack ? init : new TextTrack(init);
    if (this.Da[init.kind] && init.default)
      delete init.default;
    track.addEventListener("mode-change", this.Ea);
    this[ListSymbol.h](track, trigger);
    track[TextTrackSymbol.Ba] = this[TextTrackSymbol.Ba];
    if (this.ua)
      track[TextTrackSymbol.ua]();
    if (init.default) {
      this.Da[init.kind] = track;
      track.mode = "showing";
    }
    return this;
  }
  remove(track, trigger) {
    if (!this.d.includes(track))
      return;
    if (track === this.Da[track.kind])
      delete this.Da[track.kind];
    track.mode = "disabled";
    track[TextTrackSymbol.Ca] = null;
    track.removeEventListener("mode-change", this.Ea);
    this[ListSymbol.f](track, trigger);
    return this;
  }
  clear(trigger) {
    for (const track of this.d)
      this.remove(track, trigger);
    return this;
  }
  getById(id) {
    return this.d.find((track) => track.id === id) ?? null;
  }
  getByKind(kind) {
    const kinds = Array.isArray(kind) ? kind : [kind];
    return this.d.filter((track) => kinds.includes(track.kind));
  }
  /* @internal */
  [(TextTrackSymbol.ua)]() {
    if (this.ua)
      return;
    for (const track of this.d)
      track[TextTrackSymbol.ua]();
    this.ua = true;
  }
  Fa(event) {
    const track = event.detail;
    if (track.mode === "showing") {
      const kinds = isTrackCaptionKind(track) ? ["captions", "subtitles"] : [track.kind];
      for (const t of this.d) {
        if (t.mode === "showing" && t != track && kinds.includes(t.kind)) {
          t.mode = "disabled";
        }
      }
    }
    this.dispatchEvent(
      new DOMEvent("mode-change", {
        detail: event.detail,
        trigger: event
      })
    );
  }
}

const SELECTED = Symbol(0);
class SelectList extends List {
  get selected() {
    return this.d.find((item) => item.selected) ?? null;
  }
  get selectedIndex() {
    return this.d.findIndex((item) => item.selected);
  }
  /* @internal */
  [ListSymbol.i](item, trigger) {
    this[ListSymbol.D](item, false, trigger);
  }
  /* @internal */
  [ListSymbol.h](item, trigger) {
    item[SELECTED] = false;
    Object.defineProperty(item, "selected", {
      get() {
        return this[SELECTED];
      },
      set: (selected) => {
        if (this.readonly)
          return;
        this[ListSymbol.E]?.();
        this[ListSymbol.D](item, selected);
      }
    });
    super[ListSymbol.h](item, trigger);
  }
  /* @internal */
  [ListSymbol.D](item, selected, trigger) {
    if (selected === item[SELECTED])
      return;
    const prev = this.selected;
    item[SELECTED] = selected;
    const changed = !selected ? prev === item : prev !== item;
    if (changed) {
      if (prev)
        prev[SELECTED] = false;
      this.dispatchEvent(
        new DOMEvent("change", {
          detail: { prev, current: this.selected },
          trigger
        })
      );
    }
  }
}

class AudioTrackList extends SelectList {
  getById(id) {
    if (id === "")
      return null;
    return this.d.find((track) => track.id === id) ?? null;
  }
}

const globalEval = eval;
const equalsRE = /:\s+'?"?(.*?)'?"?\)/g, notRE = /\s+not\s+/g, andRE = /\s+and\s+/g, orRE = /\s+or\s+/g, pxRE = /(\d)px/g;
class PlayerQueryList extends EventsTarget {
  constructor(store, query) {
    super();
    this.Ga = signal("true");
    this.Ha = /* @__PURE__ */ new Set();
    this.Ia = signal(true);
    this.$matches = computed(() => {
      let currentEval = this.Ga();
      if (currentEval === "never")
        return false;
      for (const prop of this.Ha) {
        const value = this.Ka[prop](), replaceValue = isString(value) ? `'${value}'` : value + "";
        currentEval = currentEval.replace(camelToKebabCase(prop), replaceValue);
      }
      return globalEval(`!!(${currentEval})`) && this.Ia();
    });
    this.Ja = query;
    this.Ka = store;
    root((dispose) => {
      effect(this.Ma.bind(this));
      effect(this.Na.bind(this));
      this.La = dispose;
    });
  }
  static {
    this.create = (query) => {
      const media = useMediaContext();
      return new PlayerQueryList(media.$state, query);
    };
  }
  get query() {
    return unwrap(this.Ja);
  }
  get matches() {
    return this.$matches();
  }
  Ma() {
    const query = this.query;
    if (query === "")
      return;
    if (query === "never") {
      this.Ga.set(query);
      return;
    }
    const queryList = query.trim().split(/\s*,\s*/g), mediaQueries = queryList.filter((q) => q.startsWith("@media")).join(","), playerQueries = queryList.filter((q) => !q.startsWith("@media"));
    if (mediaQueries.length) {
      const mediaQuery = window.matchMedia(mediaQueries), onChange = () => void this.Ia.set(mediaQuery.matches);
      onChange();
      listenEvent(mediaQuery, "change", onChange);
    }
    if (playerQueries.length) {
      const evaluation = this.Oa(playerQueries), validProps = Object.keys(mediaState.record);
      for (const query2 of evaluation.matchAll(/\(([-a-zA-Z]+)\s/g)) {
        const prop = kebabToCamelCase(query2[1]);
        if (validProps.includes(prop)) {
          this.Ha.add(prop);
        }
      }
      this.Ga.set(evaluation);
    }
    return () => {
      this.Ha.clear();
      this.Ga.set("true");
      this.Ia.set(true);
    };
  }
  Na() {
    this.$matches();
    this.dispatchEvent(new Event("change"));
  }
  Oa(queryList) {
    return queryList.map(
      (query) => "(" + query.replace(equalsRE, ' == "$1")').replace(notRE, "!").replace(andRE, " && ").replace(orRE, " || ").replace(pxRE, "$1").trim() + ")"
    ).join(" || ");
  }
  destroy() {
    this.La();
  }
}

class VideoQualityList extends SelectList {
  constructor() {
    super(...arguments);
    this.Pa = false;
    /**
     * Configures quality switching:
     *
     * - `current`: Trigger an immediate quality level switch. This will abort the current fragment
     * request if any, flush the whole buffer, and fetch fragment matching with current position
     * and requested quality level.
     *
     * - `next`: Trigger a quality level switch for next fragment. This could eventually flush
     * already buffered next fragment.
     *
     * - `load`: Set quality level for next loaded fragment.
     *
     * @see {@link https://vidstack.io/docs/player/core-concepts/quality#switch}
     * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#quality-switch-control-api}
     */
    this.switch = "current";
  }
  /**
   * Whether automatic quality selection is enabled.
   */
  get auto() {
    return this.Pa || this.readonly;
  }
  /* @internal */
  [(ListSymbol.E)]() {
    this[QualitySymbol.Qa](false);
  }
  /* @internal */
  [ListSymbol.k](trigger) {
    this[QualitySymbol.Qa](false, trigger);
  }
  /**
   * Request automatic quality selection (if supported). This will be a no-op if the list is
   * `readonly` as that already implies auto-selection.
   */
  autoSelect(trigger) {
    if (this.readonly || this.Pa || !this[QualitySymbol.Ra])
      return;
    this[QualitySymbol.Ra]?.();
    this[QualitySymbol.Qa](true, trigger);
  }
  /* @internal */
  [QualitySymbol.Qa](auto, trigger) {
    if (this.Pa === auto)
      return;
    this.Pa = auto;
    this.dispatchEvent(
      new DOMEvent("auto-change", {
        detail: auto,
        trigger
      })
    );
  }
}

function isAudioProvider(provider) {
  return provider?.$$PROVIDER_TYPE === "AUDIO";
}
function isVideoProvider(provider) {
  return provider?.$$PROVIDER_TYPE === "VIDEO";
}
function isHLSProvider(provider) {
  return provider?.$$PROVIDER_TYPE === "HLS";
}
function isHTMLAudioElement(element) {
  return element instanceof HTMLAudioElement;
}
function isHTMLVideoElement(element) {
  return element instanceof HTMLVideoElement;
}
function isHTMLMediaElement(element) {
  return isHTMLAudioElement(element) || isHTMLVideoElement(element);
}

const MEDIA_KEY_SHORTCUTS = {
  togglePaused: "k Space",
  toggleMuted: "m",
  toggleFullscreen: "f",
  togglePictureInPicture: "i",
  toggleCaptions: "c",
  seekBackward: "ArrowLeft",
  seekForward: "ArrowRight",
  volumeUp: "ArrowUp",
  volumeDown: "ArrowDown"
};
const MODIFIER_KEYS = /* @__PURE__ */ new Set(["Shift", "Alt", "Meta", "Control"]), BUTTON_SELECTORS = 'button, [role="button"]', IGNORE_SELECTORS = 'input, textarea, select, [contenteditable], [role^="menuitem"]';
class MediaKeyboardController extends MediaPlayerController {
  constructor(_media) {
    super();
    this.Sa = null;
    this.v = _media;
  }
  onConnect() {
    effect(this.Wa.bind(this));
  }
  Wa() {
    const { keyDisabled, keyTarget } = this.$props;
    if (keyDisabled())
      return;
    const target = keyTarget() === "player" ? this.el : document, $active = signal(false);
    if (target === this.el) {
      this.listen("focusin", () => $active.set(true));
      this.listen("focusout", (event) => {
        if (!this.el.contains(event.target))
          $active.set(false);
      });
    } else {
      if (!peek($active))
        $active.set(document.querySelector("[data-media-player]") === this.el);
      listenEvent(document, "focusin", (event) => {
        const activePlayer = event.composedPath().find((el) => el instanceof Element && el.localName === "media-player");
        if (activePlayer !== void 0)
          $active.set(this.el === activePlayer);
      });
    }
    effect(() => {
      if (!$active())
        return;
      listenEvent(target, "keyup", this.Xa.bind(this));
      listenEvent(target, "keydown", this.Ya.bind(this));
      listenEvent(target, "keydown", this.Za.bind(this), { capture: true });
    });
  }
  Xa(event) {
    const focused = document.activeElement, sliderFocused = focused?.classList.contains("vds-slider");
    if (!event.key || !this.$state.canSeek() || sliderFocused || focused?.matches(IGNORE_SELECTORS)) {
      return;
    }
    const method = this.Ua(event);
    if (method?.startsWith("seek")) {
      event.preventDefault();
      event.stopPropagation();
      if (this.Sa) {
        this.Va(event);
        this.Sa = null;
      } else {
        this.v.remote.seek(this.Ta, event);
        this.Ta = void 0;
      }
    }
    if (method?.startsWith("volume")) {
      const volumeSlider = this.el.querySelector("[data-media-volume-slider]");
      volumeSlider?.dispatchEvent(new DOMEvent("keyup", { trigger: event }));
    }
  }
  Ya(event) {
    if (!event.key || MODIFIER_KEYS.has(event.key))
      return;
    const focused = document.activeElement;
    if (focused?.matches(IGNORE_SELECTORS) || isKeyboardClick(event) && focused?.matches(BUTTON_SELECTORS)) {
      return;
    }
    const sliderFocused = focused?.classList.contains("vds-slider"), method = this.Ua(event);
    if (!method && !event.metaKey && /[0-9]/.test(event.key) && !sliderFocused) {
      event.preventDefault();
      event.stopPropagation();
      this.v.remote.seek(this.$state.duration() / 10 * Number(event.key), event);
      return;
    }
    if (!method || /volume|seek/.test(method) && sliderFocused)
      return;
    event.preventDefault();
    event.stopPropagation();
    switch (method) {
      case "seekForward":
      case "seekBackward":
        this._a(event, method);
        break;
      case "volumeUp":
      case "volumeDown":
        const volumeSlider = this.el.querySelector("[data-media-volume-slider]");
        if (volumeSlider) {
          volumeSlider.dispatchEvent(new DOMEvent("keydown", { trigger: event }));
        } else {
          const value = event.shiftKey ? 0.1 : 0.05;
          this.v.remote.changeVolume(
            this.$state.volume() + (method === "volumeUp" ? +value : -value),
            event
          );
        }
        break;
      case "toggleFullscreen":
        this.v.remote.toggleFullscreen("prefer-media", event);
        break;
      default:
        this.v.remote[method]?.(event);
    }
  }
  Za(event) {
    if (isHTMLMediaElement(event.target) && this.Ua(event)) {
      event.preventDefault();
    }
  }
  Ua(event) {
    const keyShortcuts = {
      ...this.$props.keyShortcuts(),
      ...this.v.ariaKeys
    };
    return Object.keys(keyShortcuts).find(
      (method) => keyShortcuts[method].split(" ").some(
        (keys) => replaceSymbolKeys(keys).replace(/Control/g, "Ctrl").split("+").every(
          (key) => MODIFIER_KEYS.has(key) ? event[key.toLowerCase() + "Key"] : event.key === key.replace("Space", " ")
        )
      )
    );
  }
  $a(event, type) {
    const seekBy = event.shiftKey ? 10 : 5;
    return this.Ta = Math.max(
      0,
      Math.min(
        (this.Ta ?? this.$state.currentTime()) + (type === "seekForward" ? +seekBy : -seekBy),
        this.$state.duration()
      )
    );
  }
  Va(event) {
    this.Sa?.dispatchEvent(new DOMEvent(event.type, { trigger: event }));
  }
  _a(event, type) {
    if (!this.$state.canSeek())
      return;
    if (!this.Sa)
      this.Sa = this.el.querySelector("[data-media-time-slider]");
    if (this.Sa) {
      this.Va(event);
    } else {
      this.v.remote.seeking(this.$a(event, type), event);
    }
  }
}
const SYMBOL_KEY_MAP = ["!", "@", "#", "$", "%", "^", "&", "*", "(", ")"];
function replaceSymbolKeys(key) {
  return key.replace(/Shift\+(\d)/g, (_, num) => SYMBOL_KEY_MAP[num - 1]);
}

class ARIAKeyShortcuts extends ViewController {
  constructor(_shortcut) {
    super();
    this.ab = _shortcut;
  }
  onAttach(el) {
    const { $props, ariaKeys } = useMediaContext(), keys = el.getAttribute("aria-keyshortcuts");
    if (keys) {
      ariaKeys[this.ab] = keys;
      {
        onDispose(() => {
          delete ariaKeys[this.ab];
        });
      }
      return;
    }
    const shortcuts = $props.keyShortcuts()[this.ab];
    if (shortcuts)
      el.setAttribute("aria-keyshortcuts", shortcuts);
  }
}

class AudioProviderLoader {
  canPlay({ src, type }) {
    return isString(src) ? AUDIO_EXTENSIONS.test(src) || AUDIO_TYPES.has(type) || src.startsWith("blob:") && type === "audio/object" : type === "audio/object";
  }
  mediaType() {
    return "audio";
  }
  async load() {
    return new (await import('../providers/vidstack-audio.js')).AudioProvider(this.target);
  }
}

class VideoProviderLoader {
  canPlay(src) {
    return isString(src.src) ? VIDEO_EXTENSIONS.test(src.src) || VIDEO_TYPES.has(src.type) || src.src.startsWith("blob:") && src.type === "video/object" || isHLSSrc(src) && canPlayHLSNatively() : src.type === "video/object";
  }
  mediaType() {
    return "video";
  }
  async load(context) {
    return new (await import('../providers/vidstack-video.js')).VideoProvider(this.target, context);
  }
}

class HLSProviderLoader extends VideoProviderLoader {
  static {
    this.supported = isHLSSupported();
  }
  preconnect() {
    preconnect("https://cdn.jsdelivr.net", "preconnect");
  }
  canPlay({ src, type }) {
    return HLSProviderLoader.supported && isString(src) && (HLS_VIDEO_EXTENSIONS.test(src) || HLS_VIDEO_TYPES.has(type));
  }
  async load(context) {
    return new (await import('../providers/vidstack-hls.js')).HLSProvider(this.target, context);
  }
}

const MEDIA_ATTRIBUTES = Symbol(0);
const mediaAttributes = [
  "autoplay",
  "autoplayError",
  "canFullscreen",
  "canPictureInPicture",
  "canLoad",
  "canPlay",
  "canSeek",
  "ended",
  "fullscreen",
  "loop",
  "live",
  "liveEdge",
  "mediaType",
  "muted",
  "paused",
  "pictureInPicture",
  "playing",
  "playsinline",
  "seeking",
  "started",
  "streamType",
  "viewType",
  "waiting"
];

const mediaPlayerProps = {
  autoplay: false,
  controls: false,
  currentTime: 0,
  crossorigin: null,
  fullscreenOrientation: "landscape",
  load: "visible",
  logLevel: "silent",
  loop: false,
  muted: false,
  paused: true,
  playsinline: false,
  playbackRate: 1,
  poster: "",
  preload: "metadata",
  preferNativeHLS: false,
  src: "",
  controlsDelay: 2e3,
  viewType: "unknown",
  streamType: "unknown",
  volume: 1,
  liveEdgeTolerance: 10,
  minLiveDVRWindow: 60,
  keyDisabled: false,
  keyTarget: "player",
  keyShortcuts: MEDIA_KEY_SHORTCUTS,
  title: ""
};

class MediaLoadController extends MediaPlayerController {
  constructor(_callback) {
    super();
    this.Wg = _callback;
  }
  async onAttach(el) {
    const load = this.$props.load();
    if (load === "eager") {
      requestAnimationFrame(this.Wg);
    } else if (load === "idle") {
      waitIdlePeriod(this.Wg);
    } else if (load === "visible") {
      const observer = new IntersectionObserver((entries) => {
        if (!this.scope)
          return;
        if (entries[0].isIntersecting) {
          observer.disconnect();
          this.Wg();
        }
      });
      observer.observe(el);
      return observer.disconnect.bind(observer);
    }
  }
}

class MediaPlayerDelegate {
  constructor(_handle, _media) {
    this.Bb = _handle;
    this.v = _media;
  }
  u(type, ...init) {
    this.Bb(new DOMEvent(type, init?.[0]));
  }
  async zg(info, trigger) {
    const { $state, logger } = this.v;
    if (peek($state.canPlay))
      return;
    this.u("can-play", { detail: info, trigger });
    tick();
    if ($state.canPlay() && $state.autoplay() && !$state.started()) {
      await this.Bh();
    }
  }
  async Bh() {
    const { player, $state } = this.v;
    $state.autoplaying.set(true);
    try {
      await player.play();
      this.u("autoplay", { detail: { muted: $state.muted() } });
    } catch (error) {
      this.u("autoplay-fail", {
        detail: {
          muted: $state.muted(),
          error
        }
      });
    } finally {
      $state.autoplaying.set(false);
    }
  }
}

class Queue {
  constructor() {
    this.Dh = /* @__PURE__ */ new Map();
  }
  /**
   * Queue the given `item` under the given `key` to be processed at a later time by calling
   * `serve(key)`.
   */
  L(key, item) {
    if (!this.Dh.has(key))
      this.Dh.set(key, /* @__PURE__ */ new Set());
    this.Dh.get(key).add(item);
  }
  /**
   * Process all items in queue for the given `key`.
   */
  gi(key, callback) {
    const items = this.Dh.get(key);
    if (items)
      for (const item of items)
        callback(item);
    this.Dh.delete(key);
  }
  /**
   * Removes all queued items under the given `key`.
   */
  Oh(key) {
    this.Dh.delete(key);
  }
  /**
   * The number of items currently queued under the given `key`.
   */
  Ei(key) {
    return this.Dh.get(key)?.size ?? 0;
  }
  /**
   * Clear all items in the queue.
   */
  j() {
    this.Dh.clear();
  }
}

class MediaRequestContext {
  constructor() {
    this._a = false;
    this.Hh = false;
    this.Fh = false;
    this.Dh = new Queue();
  }
}
class MediaRequestManager extends MediaPlayerController {
  constructor(_stateMgr, _request, _media) {
    super();
    this.Gh = false;
    this.db = _stateMgr;
    this.Ch = _request;
    this.v = _media;
    this.bb = _media.$provider;
    this.Eb = new MediaControls();
    this.Eh = new FullscreenController();
    this.Cc = new ScreenOrientationController();
  }
  onConnect() {
    const names = Object.getOwnPropertyNames(Object.getPrototypeOf(this)), handle = this.Kh.bind(this);
    for (const name of names) {
      if (name.startsWith("media-")) {
        this.listen(name, handle);
      }
    }
    this.listen("fullscreen-change", this.n.bind(this));
    effect(this.Lh.bind(this));
    effect(this.Mh.bind(this));
    effect(this.Nh.bind(this));
  }
  Kh(event) {
    event.stopPropagation();
    if (peek(this.bb))
      this[event.type]?.(event);
  }
  async Ab(requestEvent) {
    const { canPlay, paused, ended, autoplaying, seekableStart } = this.$state;
    if (!peek(paused))
      return;
    try {
      const provider = peek(this.bb);
      throwIfNotReadyForPlayback(provider, peek(canPlay));
      if (peek(ended)) {
        provider.currentTime = seekableStart() + 0.1;
      }
      return await provider.play();
    } catch (error) {
      const errorEvent = this.createEvent("play-fail", { detail: coerceToError(error) });
      errorEvent.autoplay = autoplaying();
      this.db.Bb(errorEvent);
      throw error;
    }
  }
  async zb() {
    const { canPlay, paused } = this.$state;
    if (peek(paused))
      return;
    const provider = peek(this.bb);
    throwIfNotReadyForPlayback(provider, peek(canPlay));
    return provider.pause();
  }
  Jb() {
    const { canPlay, live, liveEdge, canSeek, liveSyncPosition, seekableEnd, userBehindLiveEdge } = this.$state;
    userBehindLiveEdge.set(false);
    if (peek(() => !live() || liveEdge() || !canSeek()))
      return;
    const provider = peek(this.bb);
    throwIfNotReadyForPlayback(provider, peek(canPlay));
    provider.currentTime = liveSyncPosition() ?? seekableEnd() - 2;
  }
  async Fb(target = "prefer-media") {
    const provider = peek(this.bb);
    const adapter = target === "prefer-media" && this.Eh.supported || target === "media" ? this.Eh : provider?.fullscreen;
    throwIfFullscreenNotSupported(target, adapter);
    if (adapter.active)
      return;
    if (peek(this.$state.pictureInPicture)) {
      this.Gh = true;
      await this.Ib();
    }
    return adapter.enter();
  }
  async Gb(target = "prefer-media") {
    const provider = peek(this.bb);
    const adapter = target === "prefer-media" && this.Eh.supported || target === "media" ? this.Eh : provider?.fullscreen;
    throwIfFullscreenNotSupported(target, adapter);
    if (!adapter.active)
      return;
    if (this.Cc.locked)
      await this.Cc.unlock();
    try {
      const result = await adapter.exit();
      if (this.Gh && peek(this.$state.canPictureInPicture)) {
        await this.Hb();
      }
      return result;
    } finally {
      this.Gh = false;
    }
  }
  async Hb() {
    this.Ih();
    if (this.$state.pictureInPicture())
      return;
    return await this.bb().pictureInPicture.enter();
  }
  async Ib() {
    this.Ih();
    if (!this.$state.pictureInPicture())
      return;
    return await this.bb().pictureInPicture.exit();
  }
  Ih() {
    if (this.$state.canPictureInPicture())
      return;
    throw Error(
      "[vidstack] no pip support"
    );
  }
  Lh() {
    this.Eb.defaultDelay = this.$props.controlsDelay();
  }
  Mh() {
    const { canLoad, canFullscreen } = this.$state, supported = this.Eh.supported || this.bb()?.fullscreen?.supported || false;
    if (canLoad() && peek(canFullscreen) === supported)
      return;
    canFullscreen.set(supported);
  }
  Nh() {
    const { canLoad, canPictureInPicture } = this.$state, supported = this.bb()?.pictureInPicture?.supported || false;
    if (canLoad() && peek(canPictureInPicture) === supported)
      return;
    canPictureInPicture.set(supported);
  }
  ["media-audio-track-change-request"](event) {
    if (this.v.audioTracks.readonly) {
      return;
    }
    const index = event.detail, track = this.v.audioTracks[index];
    if (track) {
      this.Ch.Dh.L("audioTrack", event);
      track.selected = true;
    }
  }
  async ["media-enter-fullscreen-request"](event) {
    try {
      this.Ch.Dh.L("fullscreen", event);
      await this.Fb(event.detail);
    } catch (error) {
      this.o(error, event);
    }
  }
  async ["media-exit-fullscreen-request"](event) {
    try {
      this.Ch.Dh.L("fullscreen", event);
      await this.Gb(event.detail);
    } catch (error) {
      this.o(error, event);
    }
  }
  async n(event) {
    if (!event.detail)
      return;
    try {
      const lockType = peek(this.$props.fullscreenOrientation);
      if (this.Cc.supported && !isUndefined(lockType)) {
        await this.Cc.lock(lockType);
      }
    } catch (error) {
    }
  }
  o(error, request) {
    this.db.Bb(
      this.createEvent("fullscreen-error", {
        detail: coerceToError(error)
      })
    );
  }
  async ["media-enter-pip-request"](event) {
    try {
      this.Ch.Dh.L("pip", event);
      await this.Hb();
    } catch (error) {
      this.Jh(error, event);
    }
  }
  async ["media-exit-pip-request"](event) {
    try {
      this.Ch.Dh.L("pip", event);
      await this.Ib();
    } catch (error) {
      this.Jh(error, event);
    }
  }
  Jh(error, request) {
    this.db.Bb(
      this.createEvent("picture-in-picture-error", {
        detail: coerceToError(error)
      })
    );
  }
  ["media-live-edge-request"](event) {
    const { live, liveEdge, canSeek } = this.$state;
    if (!live() || liveEdge() || !canSeek())
      return;
    this.Ch.Dh.L("seeked", event);
    try {
      this.Jb();
    } catch (error) {
    }
  }
  ["media-loop-request"](event) {
    window.requestAnimationFrame(async () => {
      try {
        this.Ch.Hh = true;
        this.Ch.Fh = true;
        await this.Ab(event);
      } catch (e) {
        this.Ch.Hh = false;
        this.Ch.Fh = false;
      }
    });
  }
  async ["media-pause-request"](event) {
    if (this.$state.paused())
      return;
    try {
      this.Ch.Dh.L("pause", event);
      await this.bb().pause();
    } catch (error) {
      this.Ch.Dh.Oh("pause");
    }
  }
  async ["media-play-request"](event) {
    if (!this.$state.paused())
      return;
    try {
      this.Ch.Dh.L("play", event);
      await this.Ab(event);
    } catch (e) {
    }
  }
  ["media-rate-change-request"](event) {
    if (this.$state.playbackRate() === event.detail)
      return;
    this.Ch.Dh.L("rate", event);
    this.bb().playbackRate = event.detail;
  }
  ["media-quality-change-request"](event) {
    if (this.v.qualities.readonly) {
      return;
    }
    this.Ch.Dh.L("quality", event);
    const index = event.detail;
    if (index < 0) {
      this.v.qualities.autoSelect(event);
    } else {
      const quality = this.v.qualities[index];
      if (quality) {
        quality.selected = true;
      }
    }
  }
  ["media-pause-controls-request"](event) {
    this.Ch.Dh.L("controls", event);
    this.Eb.pause(event);
  }
  ["media-resume-controls-request"](event) {
    this.Ch.Dh.L("controls", event);
    this.Eb.resume(event);
  }
  ["media-seek-request"](event) {
    const { seekableStart, seekableEnd, ended, canSeek, live, userBehindLiveEdge } = this.$state;
    if (ended())
      this.Ch.Fh = true;
    this.Ch._a = false;
    this.Ch.Dh.Oh("seeking");
    const boundTime = Math.min(Math.max(seekableStart() + 0.1, event.detail), seekableEnd() - 0.1);
    if (!Number.isFinite(boundTime) || !canSeek())
      return;
    this.Ch.Dh.L("seeked", event);
    this.bb().currentTime = boundTime;
    if (live() && event.isOriginTrusted && Math.abs(seekableEnd() - boundTime) >= 2) {
      userBehindLiveEdge.set(true);
    }
  }
  ["media-seeking-request"](event) {
    this.Ch.Dh.L("seeking", event);
    this.$state.seeking.set(true);
    this.Ch._a = true;
  }
  ["media-start-loading"](event) {
    if (this.$state.canLoad())
      return;
    this.Ch.Dh.L("load", event);
    this.db.Bb(this.createEvent("can-load"));
  }
  ["media-text-track-change-request"](event) {
    const { index, mode } = event.detail, track = this.v.textTracks[index];
    if (track) {
      this.Ch.Dh.L("textTrack", event);
      track.setMode(mode, event);
    }
  }
  ["media-mute-request"](event) {
    if (this.$state.muted())
      return;
    this.Ch.Dh.L("volume", event);
    this.bb().muted = true;
  }
  ["media-unmute-request"](event) {
    const { muted, volume } = this.$state;
    if (!muted())
      return;
    this.Ch.Dh.L("volume", event);
    this.v.$provider().muted = false;
    if (volume() === 0) {
      this.Ch.Dh.L("volume", event);
      this.bb().volume = 0.25;
    }
  }
  ["media-volume-change-request"](event) {
    const { muted, volume } = this.$state;
    const newVolume = event.detail;
    if (volume() === newVolume)
      return;
    this.Ch.Dh.L("volume", event);
    this.bb().volume = newVolume;
    if (newVolume > 0 && muted()) {
      this.Ch.Dh.L("volume", event);
      this.bb().muted = false;
    }
  }
}
function throwIfNotReadyForPlayback(provider, canPlay) {
  if (provider && canPlay)
    return;
  throw Error(
    "[vidstack] media not ready"
  );
}
function throwIfFullscreenNotSupported(target, fullscreen) {
  if (fullscreen?.supported)
    return;
  throw Error(
    "[vidstack] no fullscreen support"
  );
}

var functionDebounce = debounce;
function debounce(fn, wait, callFirst) {
  var timeout = null;
  var debouncedFn = null;
  var clear = function() {
    if (timeout) {
      clearTimeout(timeout);
      debouncedFn = null;
      timeout = null;
    }
  };
  var flush = function() {
    var call = debouncedFn;
    clear();
    if (call) {
      call();
    }
  };
  var debounceWrapper = function() {
    if (!wait) {
      return fn.apply(this, arguments);
    }
    var context = this;
    var args = arguments;
    var callNow = callFirst && !timeout;
    clear();
    debouncedFn = function() {
      fn.apply(context, args);
    };
    timeout = setTimeout(function() {
      timeout = null;
      if (!callNow) {
        var call = debouncedFn;
        debouncedFn = null;
        return call();
      }
    }, wait);
    if (callNow) {
      return debouncedFn();
    }
  };
  debounceWrapper.cancel = clear;
  debounceWrapper.flush = flush;
  return debounceWrapper;
}

var functionThrottle = throttle;
function throttle(fn, interval, options) {
  var timeoutId = null;
  var throttledFn = null;
  var leading = options && options.leading;
  var trailing = options && options.trailing;
  if (leading == null) {
    leading = true;
  }
  if (trailing == null) {
    trailing = !leading;
  }
  if (leading == true) {
    trailing = false;
  }
  var cancel = function() {
    if (timeoutId) {
      clearTimeout(timeoutId);
      timeoutId = null;
    }
  };
  var flush = function() {
    var call = throttledFn;
    cancel();
    if (call) {
      call();
    }
  };
  var throttleWrapper = function() {
    var callNow = leading && !timeoutId;
    var context = this;
    var args = arguments;
    throttledFn = function() {
      return fn.apply(context, args);
    };
    if (!timeoutId) {
      timeoutId = setTimeout(function() {
        timeoutId = null;
        if (trailing) {
          return throttledFn();
        }
      }, interval);
    }
    if (callNow) {
      callNow = false;
      return throttledFn();
    }
  };
  throttleWrapper.cancel = cancel;
  throttleWrapper.flush = flush;
  return throttleWrapper;
}

const TRACKED_EVENT = /* @__PURE__ */ new Set([
  "autoplay",
  "autoplay-fail",
  "can-load",
  "sources-change",
  "source-change",
  "load-start",
  "abort",
  "error",
  "loaded-metadata",
  "loaded-data",
  "can-play",
  "play",
  "play-fail",
  "pause",
  "playing",
  "seeking",
  "seeked",
  "waiting"
]);

class MediaStateManager extends MediaPlayerController {
  constructor(_request, _media) {
    super();
    this.Ph = /* @__PURE__ */ new Map();
    this.Th = false;
    this["seeking"] = functionThrottle(
      (event) => {
        const { seeking, currentTime, paused } = this.$state;
        seeking.set(true);
        currentTime.set(event.detail);
        this.Qh("seeking", event);
        if (paused()) {
          this.Rh = event;
          this.Vh();
        }
      },
      150,
      { leading: true }
    );
    this.Vh = functionDebounce(() => {
      if (!this.Rh)
        return;
      this.Th = true;
      const { waiting, playing } = this.$state;
      waiting.set(true);
      playing.set(false);
      const event = this.createEvent("waiting", { trigger: this.Rh });
      this.Ph.set("waiting", event);
      this.dispatch(event);
      this.Rh = void 0;
      this.Th = false;
    }, 300);
    this.Ch = _request;
    this.v = _media;
  }
  onAttach(el) {
    el.setAttribute("aria-busy", "true");
  }
  onConnect(el) {
    this.ai();
    this.bi();
    this.ci();
    this.listen("fullscreen-change", this["fullscreen-change"].bind(this));
    this.listen("fullscreen-error", this["fullscreen-error"].bind(this));
    if (!this.v.$state.paused()) {
      requestAnimationFrame(() => {
        this.v.$provider()?.play();
      });
    }
  }
  Bb(event) {
    const type = event.type;
    this[event.type]?.(event);
    {
      if (TRACKED_EVENT.has(type))
        this.Ph.set(type, event);
      this.dispatch(event);
    }
  }
  Sh() {
    this.Wh();
    this.Ch.Fh = false;
    this.Ch.Hh = false;
    this.Th = false;
    this.Rh = void 0;
    this.Ph.clear();
  }
  Qh(request, event) {
    this.Ch.Dh.gi(request, (requestEvent) => {
      event.request = requestEvent;
      appendTriggerEvent(event, requestEvent);
    });
  }
  ai() {
    this.Uh();
    this.Xh();
    const textTracks = this.v.textTracks;
    listenEvent(textTracks, "add", this.Uh.bind(this));
    listenEvent(textTracks, "remove", this.Uh.bind(this));
    listenEvent(textTracks, "mode-change", this.Xh.bind(this));
  }
  bi() {
    const qualities = this.v.qualities;
    listenEvent(qualities, "add", this.Yh.bind(this));
    listenEvent(qualities, "remove", this.Yh.bind(this));
    listenEvent(qualities, "change", this.Qg.bind(this));
    listenEvent(qualities, "auto-change", this.di.bind(this));
    listenEvent(qualities, "readonly-change", this.ei.bind(this));
  }
  ci() {
    const audioTracks = this.v.audioTracks;
    listenEvent(audioTracks, "add", this.Zh.bind(this));
    listenEvent(audioTracks, "remove", this.Zh.bind(this));
    listenEvent(audioTracks, "change", this.fi.bind(this));
  }
  Uh(event) {
    const { textTracks } = this.$state;
    textTracks.set(this.v.textTracks.toArray());
    this.dispatch("text-tracks-change", {
      detail: textTracks(),
      trigger: event
    });
  }
  Xh(event) {
    if (event)
      this.Qh("textTrack", event);
    const current = this.v.textTracks.selected, { textTrack } = this.$state;
    if (textTrack() !== current) {
      textTrack.set(current);
      this.dispatch("text-track-change", {
        detail: current,
        trigger: event
      });
    }
  }
  Zh(event) {
    const { audioTracks } = this.$state;
    audioTracks.set(this.v.audioTracks.toArray());
    this.dispatch("audio-tracks-change", {
      detail: audioTracks(),
      trigger: event
    });
  }
  fi(event) {
    const { audioTrack } = this.$state;
    audioTrack.set(this.v.audioTracks.selected);
    this.Qh("audioTrack", event);
    this.dispatch("audio-track-change", {
      detail: audioTrack(),
      trigger: event
    });
  }
  Yh(event) {
    const { qualities } = this.$state;
    qualities.set(this.v.qualities.toArray());
    this.dispatch("qualities-change", {
      detail: qualities(),
      trigger: event
    });
  }
  Qg(event) {
    const { quality } = this.$state;
    quality.set(this.v.qualities.selected);
    this.Qh("quality", event);
    this.dispatch("quality-change", {
      detail: quality(),
      trigger: event
    });
  }
  di() {
    this.$state.autoQuality.set(this.v.qualities.auto);
  }
  ei() {
    this.$state.canSetQuality.set(!this.v.qualities.readonly);
  }
  ["provider-change"](event) {
    const prevProvider = this.v.$provider(), newProvider = event.detail;
    if (prevProvider?.type === newProvider?.type)
      return;
    prevProvider?.destroy?.();
    this.v.$provider.set(event.detail);
    if (prevProvider && event.detail === null)
      this._h(event);
  }
  ["provider-loader-change"](event) {
  }
  ["autoplay"](event) {
    appendTriggerEvent(event, this.Ph.get("play"));
    appendTriggerEvent(event, this.Ph.get("can-play"));
    this.$state.autoplayError.set(void 0);
  }
  ["autoplay-fail"](event) {
    appendTriggerEvent(event, this.Ph.get("play-fail"));
    appendTriggerEvent(event, this.Ph.get("can-play"));
    this.$state.autoplayError.set(event.detail);
    this.Sh();
  }
  ["can-load"](event) {
    this.$state.canLoad.set(true);
    this.Ph.set("can-load", event);
    this.Qh("load", event);
    this.v.textTracks[TextTrackSymbol.ua]();
  }
  ["media-type-change"](event) {
    appendTriggerEvent(event, this.Ph.get("source-change"));
    const viewType = this.$state.viewType();
    this.$state.mediaType.set(event.detail);
    const providedViewType = this.$state.providedViewType(), currentViewType = providedViewType === "unknown" ? event.detail : providedViewType;
    if (viewType !== currentViewType) {
      {
        setTimeout(() => {
          requestAnimationFrame(() => {
            if (!this.scope)
              return;
            this.$state.inferredViewType.set(event.detail);
            this.dispatch("view-type-change", {
              detail: currentViewType,
              trigger: event
            });
          });
        }, 0);
      }
    }
  }
  ["stream-type-change"](event) {
    const { streamType, inferredStreamType } = this.$state;
    appendTriggerEvent(event, this.Ph.get("source-change"));
    inferredStreamType.set(event.detail);
    event.detail = streamType();
  }
  ["rate-change"](event) {
    this.$state.playbackRate.set(event.detail);
    this.Qh("rate", event);
  }
  ["sources-change"](event) {
    this.$state.sources.set(event.detail);
  }
  ["source-change"](event) {
    appendTriggerEvent(event, this.Ph.get("sources-change"));
    this._h(event);
    this.Ph.set(event.type, event);
    this.$state.source.set(event.detail);
    this.el?.setAttribute("aria-busy", "true");
  }
  _h(event) {
    this.v.audioTracks[ListSymbol.j](event);
    this.v.qualities[ListSymbol.j](event);
    this.Sh();
    softResetMediaState(this.v.$state);
  }
  ["abort"](event) {
    appendTriggerEvent(event, this.Ph.get("source-change"));
    appendTriggerEvent(event, this.Ph.get("can-load"));
  }
  ["load-start"](event) {
    appendTriggerEvent(event, this.Ph.get("source-change"));
  }
  ["error"](event) {
    this.$state.error.set(event.detail);
    appendTriggerEvent(event, this.Ph.get("abort"));
  }
  ["loaded-metadata"](event) {
    appendTriggerEvent(event, this.Ph.get("load-start"));
  }
  ["loaded-data"](event) {
    appendTriggerEvent(event, this.Ph.get("load-start"));
  }
  ["can-play"](event) {
    if (event.trigger?.type !== "loadedmetadata") {
      appendTriggerEvent(event, this.Ph.get("loaded-metadata"));
    }
    this.$h(event.detail);
    this.el?.setAttribute("aria-busy", "false");
  }
  ["can-play-through"](event) {
    this.$h(event.detail);
    appendTriggerEvent(event, this.Ph.get("can-play"));
  }
  $h(detail) {
    const { seekable, seekableEnd, buffered, duration, canPlay } = this.$state;
    seekable.set(detail.seekable);
    buffered.set(detail.buffered);
    duration.set(seekableEnd);
    canPlay.set(true);
  }
  ["duration-change"](event) {
    const { live, duration } = this.$state, time = event.detail;
    if (!live())
      duration.set(!Number.isNaN(time) ? time : 0);
  }
  ["progress"](event) {
    const { buffered, seekable, live, duration, seekableEnd } = this.$state, detail = event.detail;
    buffered.set(detail.buffered);
    seekable.set(detail.seekable);
    if (live()) {
      duration.set(seekableEnd);
      this.dispatch("duration-change", {
        detail: seekableEnd(),
        trigger: event
      });
    }
  }
  ["play"](event) {
    const { paused, autoplayError, ended, autoplaying } = this.$state;
    event.autoplay = autoplaying();
    if (this.Ch.Hh || !paused()) {
      event.stopImmediatePropagation();
      return;
    }
    appendTriggerEvent(event, this.Ph.get("waiting"));
    this.Qh("play", event);
    paused.set(false);
    autoplayError.set(void 0);
    if (ended() || this.Ch.Fh) {
      this.Ch.Fh = false;
      ended.set(false);
      this.Bb(this.createEvent("replay", { trigger: event }));
    }
  }
  ["play-fail"](event) {
    appendTriggerEvent(event, this.Ph.get("play"));
    this.Qh("play", event);
    const { paused, playing } = this.$state;
    paused.set(true);
    playing.set(false);
    this.Sh();
  }
  ["playing"](event) {
    const playEvent = this.Ph.get("play");
    if (playEvent) {
      appendTriggerEvent(event, this.Ph.get("waiting"));
      appendTriggerEvent(event, playEvent);
    } else {
      appendTriggerEvent(event, this.Ph.get("seeked"));
    }
    setTimeout(() => this.Sh(), 0);
    const { paused, playing, seeking, ended } = this.$state;
    paused.set(false);
    playing.set(true);
    seeking.set(false);
    ended.set(false);
    if (this.Ch.Hh) {
      event.stopImmediatePropagation();
      this.Ch.Hh = false;
      return;
    }
    this["started"](event);
  }
  ["started"](event) {
    const { started, live, liveSyncPosition, seekableEnd } = this.$state;
    if (!started()) {
      if (live()) {
        const end = liveSyncPosition() ?? seekableEnd() - 2;
        if (Number.isFinite(end))
          this.v.$provider().currentTime = end;
      }
      started.set(true);
      this.Bb(this.createEvent("started", { trigger: event }));
    }
  }
  ["pause"](event) {
    if (this.Ch.Hh) {
      event.stopImmediatePropagation();
      return;
    }
    appendTriggerEvent(event, this.Ph.get("seeked"));
    this.Qh("pause", event);
    const { paused, playing, seeking } = this.$state;
    paused.set(true);
    playing.set(false);
    seeking.set(false);
    this.Sh();
  }
  ["time-update"](event) {
    const { currentTime, played, waiting } = this.$state, detail = event.detail;
    currentTime.set(detail.currentTime);
    played.set(detail.played);
    waiting.set(false);
    for (const track of this.v.textTracks) {
      track[TextTrackSymbol.ta](detail.currentTime, event);
    }
  }
  ["volume-change"](event) {
    const { volume, muted } = this.$state, detail = event.detail;
    volume.set(detail.volume);
    muted.set(detail.muted || detail.volume === 0);
    this.Qh("volume", event);
  }
  ["seeked"](event) {
    const { seeking, currentTime, paused, duration, ended } = this.$state;
    if (this.Ch._a) {
      seeking.set(true);
      event.stopImmediatePropagation();
    } else if (seeking()) {
      const waitingEvent = this.Ph.get("waiting");
      appendTriggerEvent(event, waitingEvent);
      if (waitingEvent?.trigger?.type !== "seeking") {
        appendTriggerEvent(event, this.Ph.get("seeking"));
      }
      if (paused())
        this.Wh();
      seeking.set(false);
      if (event.detail !== duration())
        ended.set(false);
      currentTime.set(event.detail);
      this.Qh("seeked", event);
      const origin = event.originEvent;
      if (origin && origin.isTrusted && !/seek/.test(origin.type)) {
        this["started"](event);
      }
    }
  }
  ["waiting"](event) {
    if (this.Th || this.Ch._a)
      return;
    event.stopImmediatePropagation();
    this.Rh = event;
    this.Vh();
  }
  ["ended"](event) {
    if (this.Ch.Hh) {
      event.stopImmediatePropagation();
      return;
    }
    const { paused, playing, seeking, ended } = this.$state;
    paused.set(true);
    playing.set(false);
    seeking.set(false);
    ended.set(true);
    this.Sh();
  }
  Wh() {
    this.Vh.cancel();
    this.$state.waiting.set(false);
  }
  ["fullscreen-change"](event) {
    this.$state.fullscreen.set(event.detail);
    this.Qh("fullscreen", event);
  }
  ["fullscreen-error"](event) {
    this.Qh("fullscreen", event);
  }
  ["picture-in-picture-change"](event) {
    this.$state.pictureInPicture.set(event.detail);
    this.Qh("pip", event);
  }
  ["picture-in-picture-error"](event) {
    this.Qh("pip", event);
  }
}

class MediaStateSync extends MediaPlayerController {
  onSetup() {
    effect(this.ii.bind(this));
    effect(this.ji.bind(this));
    effect(this.ki.bind(this));
    effect(this.li.bind(this));
    effect(this.mi.bind(this));
    effect(this.ni.bind(this));
    effect(this.oi.bind(this));
    effect(this.pi.bind(this));
    effect(this.qi.bind(this));
  }
  hi() {
    return;
  }
  ii() {
    const autoplay = this.$props.autoplay();
    this.$state.autoplay.set(autoplay);
    this.dispatch("autoplay-change", { detail: autoplay });
  }
  ki() {
    const loop = this.$props.loop();
    this.$state.loop.set(loop);
    this.dispatch("loop-change", { detail: loop });
  }
  li() {
    const controls = this.$props.controls();
    this.$state.controls.set(controls);
  }
  ji() {
    const poster = this.$props.poster();
    this.$state.poster.set(poster);
    this.dispatch("poster-change", { detail: poster });
  }
  mi() {
    const crossorigin = this.$props.crossorigin();
    this.$state.crossorigin.set(crossorigin === true ? "" : crossorigin);
  }
  ni() {
    const playsinline = this.$props.playsinline();
    this.$state.playsinline.set(playsinline);
    this.dispatch("playsinline-change", { detail: playsinline });
  }
  pi() {
    this.dispatch("live-change", { detail: this.$state.live() });
  }
  oi() {
    this.$state.liveEdgeTolerance.set(this.$props.liveEdgeTolerance());
    this.$state.minLiveDVRWindow.set(this.$props.minLiveDVRWindow());
  }
  qi() {
    this.dispatch("live-edge-change", { detail: this.$state.liveEdge() });
  }
}

let $keyboard = signal(false);
{
  listenEvent(document, "pointerdown", () => {
    $keyboard.set(false);
  });
  listenEvent(document, "keydown", (e) => {
    if (e.metaKey || e.altKey || e.ctrlKey)
      return;
    $keyboard.set(true);
  });
}
class FocusVisibleController extends ViewController {
  constructor() {
    super(...arguments);
    this.vi = signal(false);
  }
  onConnect(el) {
    effect(() => {
      if (!$keyboard()) {
        this.vi.set(false);
        updateFocusAttr(el, false);
        this.listen("pointerenter", this.wi.bind(this));
        this.listen("pointerleave", this.xi.bind(this));
        return;
      }
      const active = document.activeElement === el;
      this.vi.set(active);
      updateFocusAttr(el, active);
      this.listen("focus", this.yi.bind(this));
      this.listen("blur", this.zi.bind(this));
    });
  }
  focused() {
    return this.vi();
  }
  yi() {
    this.vi.set(true);
    updateFocusAttr(this.el, true);
  }
  zi() {
    this.vi.set(false);
    updateFocusAttr(this.el, false);
  }
  wi() {
    updateHoverAttr(this.el, true);
  }
  xi() {
    updateHoverAttr(this.el, false);
  }
}
function updateFocusAttr(el, isFocused) {
  setAttribute(el, "data-focus", isFocused);
  setAttribute(el, "data-hocus", isFocused);
}
function updateHoverAttr(el, isHovering) {
  setAttribute(el, "data-hocus", isHovering);
  setAttribute(el, "data-hover", isHovering);
}

class RequestQueue {
  constructor() {
    this.Ai = false;
    this.Bi = deferredPromise();
    this.Dh = /* @__PURE__ */ new Map();
  }
  /**
   * The number of callbacks that are currently in queue.
   */
  get Ei() {
    return this.Dh.size;
  }
  /**
   * Whether items in the queue are being served immediately, otherwise they're queued to
   * be processed later.
   */
  get Fi() {
    return this.Ai;
  }
  /**
   * Waits for the queue to be flushed (ie: start serving).
   */
  async Gi() {
    if (this.Ai)
      return;
    await this.Bi.promise;
  }
  /**
   * Queue the given `callback` to be invoked at a later time by either calling the `serve()` or
   * `start()` methods. If the queue has started serving (i.e., `start()` was already called),
   * then the callback will be invoked immediately.
   *
   * @param key - Uniquely identifies this callback so duplicates are ignored.
   * @param callback - The function to call when this item in the queue is being served.
   */
  L(key, callback) {
    if (this.Ai) {
      callback();
      return;
    }
    this.Dh.delete(key);
    this.Dh.set(key, callback);
  }
  /**
   * Invokes the callback with the given `key` in the queue (if it exists).
   */
  gi(key) {
    this.Dh.get(key)?.();
    this.Dh.delete(key);
  }
  /**
   * Flush all queued items and start serving future requests immediately until `stop()` is called.
   */
  Cb() {
    this.Ci();
    this.Ai = true;
    if (this.Dh.size > 0)
      this.Ci();
  }
  /**
   * Stop serving requests, they'll be queued until you begin processing again by calling `start()`.
   */
  Db() {
    this.Ai = false;
  }
  /**
   * Stop serving requests, empty the request queue, and release any promises waiting for the
   * queue to flush.
   */
  j() {
    this.Db();
    this.Dh.clear();
    this.Di();
  }
  Ci() {
    for (const key of this.Dh.keys())
      this.gi(key);
    this.Di();
  }
  Di() {
    this.Bi.resolve();
    this.Bi = deferredPromise();
  }
}

var __defProp$f = Object.defineProperty;
var __getOwnPropDesc$f = Object.getOwnPropertyDescriptor;
var __decorateClass$f = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$f(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$f(target, key, result);
  return result;
};
const _MediaPlayer = class _MediaPlayer extends Component {
  constructor() {
    super();
    this.canPlayQueue = new RequestQueue();
    this.pb();
    new MediaStateSync();
    const context = {
      player: this,
      scope: getScope(),
      qualities: new VideoQualityList(),
      audioTracks: new AudioTrackList(),
      $provider: signal(null),
      $props: this.$props,
      $state: this.$state
    };
    context.remote = new MediaRemoteControl(void 0);
    context.remote.setPlayer(this);
    context.$iosControls = computed(this.qb.bind(this));
    context.textTracks = new TextTrackList();
    context.textTracks[TextTrackSymbol.Ba] = this.$state.crossorigin;
    context.textRenderers = new TextRenderers(context);
    context.ariaKeys = {};
    this.v = context;
    provideContext(mediaContext, context);
    this.orientation = new ScreenOrientationController();
    new FocusVisibleController();
    new MediaKeyboardController(context);
    const request = new MediaRequestContext();
    this.db = new MediaStateManager(request, context);
    this.cb = new MediaRequestManager(this.db, request, context);
    context.delegate = new MediaPlayerDelegate(
      this.db.Bb.bind(this.db),
      context
    );
    new MediaLoadController(this.startLoading.bind(this));
  }
  static {
    this.props = mediaPlayerProps;
  }
  static {
    this.state = mediaState;
  }
  get bb() {
    return this.v.$provider();
  }
  onSetup() {
    this.rb();
    effect(this.sb.bind(this));
    effect(this.tb.bind(this));
    effect(this.S.bind(this));
    effect(this.ub.bind(this));
    effect(this.vb.bind(this));
    effect(this.wb.bind(this));
    effect(this.xb.bind(this));
  }
  onAttach(el) {
    el.setAttribute("data-media-player", "");
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "role", "region");
    effect(this.fb.bind(this));
    effect(this.gb.bind(this));
    listenEvent(el, "find-media-player", this.yb.bind(this));
  }
  onConnect(el) {
    if (IS_IPHONE)
      setAttribute(el, "data-iphone", "");
    canChangeVolume().then(this.$state.canSetVolume.set);
    const pointerQuery = window.matchMedia("(pointer: coarse)");
    this.hb(pointerQuery);
    pointerQuery.onchange = this.hb.bind(this);
    const resize = new ResizeObserver(animationFrameThrottle(this.eb.bind(this)));
    resize.observe(el);
    effect(this.eb.bind(this));
    this.dispatch("media-player-connect", {
      detail: this,
      bubbles: true,
      composed: true
    });
    onDispose(() => {
      resize.disconnect();
      pointerQuery.onchange = null;
    });
  }
  onDestroy() {
    this.v.player = null;
    this.canPlayQueue.j();
  }
  pb() {
    const providedProps = {
      viewType: "providedViewType",
      streamType: "providedStreamType"
    };
    for (const prop2 of Object.keys(this.$props)) {
      this.$state[providedProps[prop2] ?? prop2]?.set(this.$props[prop2]());
    }
    effect(this.ib.bind(this));
    this.$state.muted.set(this.$props.muted() || this.$props.volume() === 0);
  }
  fb() {
    const { title } = this.$props, { live, viewType } = this.$state, isLive = live(), type = uppercaseFirstChar(viewType()), typeText = type !== "Unknown" ? `${isLive ? "Live " : ""}${type}` : isLive ? "Live" : "Media";
    const newTitle = title();
    if (newTitle) {
      this.el?.setAttribute("data-title", newTitle);
      this.el?.removeAttribute("title");
    }
    const currentTitle = this.el?.getAttribute("data-title") || "";
    this.$state.title.set(currentTitle);
    setAttribute(
      this.el,
      "aria-label",
      currentTitle ? `${typeText} - ${currentTitle}` : typeText + " Player"
    );
  }
  gb() {
    const orientation = this.orientation.landscape ? "landscape" : "portrait";
    this.$state.orientation.set(orientation);
    setAttribute(this.el, "data-orientation", orientation);
    this.eb();
  }
  sb() {
    if (this.$state.canPlay() && this.bb)
      this.canPlayQueue.Cb();
    else
      this.canPlayQueue.Db();
  }
  ib() {
    this.$state.providedViewType.set(this.$props.viewType());
    this.$state.providedStreamType.set(this.$props.streamType());
  }
  rb() {
    if (_MediaPlayer[MEDIA_ATTRIBUTES]) {
      this.setAttributes(_MediaPlayer[MEDIA_ATTRIBUTES]);
      return;
    }
    const $attrs = {
      "data-captions": function() {
        const track = this.$state.textTrack();
        return !!track && isTrackCaptionKind(track);
      },
      "data-ios-controls": function() {
        return this.v.$iosControls();
      },
      "data-controls": function() {
        return this.controls.showing;
      },
      "data-buffering": function() {
        const { canPlay, waiting } = this.$state;
        return !canPlay() || waiting();
      },
      "data-error": function() {
        const { error } = this.$state;
        return !!error();
      }
    };
    const alias = {
      canPictureInPicture: "can-pip",
      pictureInPicture: "pip"
    };
    for (const prop2 of mediaAttributes) {
      const attrName = "data-" + (alias[prop2] ?? camelToKebabCase(prop2));
      $attrs[attrName] = function() {
        return this.$state[prop2]();
      };
    }
    delete $attrs.title;
    _MediaPlayer[MEDIA_ATTRIBUTES] = $attrs;
    this.setAttributes($attrs);
  }
  yb(event) {
    event.detail(this);
  }
  eb() {
    if (!this.el)
      return;
    const width = this.el.clientWidth, height = this.el.clientHeight;
    this.$state.width.set(width);
    this.$state.height.set(height);
    setStyle(this.el, "--player-width", width + "px");
    setStyle(this.el, "--player-height", height + "px");
  }
  hb(queryList) {
    const pointer = queryList.matches ? "coarse" : "fine";
    setAttribute(this.el, "data-pointer", pointer);
    this.$state.pointer.set(pointer);
    this.eb();
  }
  qb() {
    return !canFullscreen() && this.$state.mediaType() === "video" && (this.$state.controls() && !this.$props.playsinline() || this.$state.fullscreen());
  }
  get provider() {
    return this.bb;
  }
  get controls() {
    return this.cb.Eb;
  }
  get qualities() {
    return this.v.qualities;
  }
  get audioTracks() {
    return this.v.audioTracks;
  }
  get textTracks() {
    return this.v.textTracks;
  }
  get textRenderers() {
    return this.v.textRenderers;
  }
  get paused() {
    return this.bb?.paused ?? true;
  }
  set paused(paused) {
    this.jb(paused);
  }
  S() {
    this.jb(this.$props.paused());
  }
  jb(paused) {
    if (paused) {
      this.canPlayQueue.L("paused", () => this.cb.zb());
    } else
      this.canPlayQueue.L("paused", () => this.cb.Ab());
  }
  get muted() {
    return this.bb?.muted ?? false;
  }
  set muted(muted) {
    this.kb(muted);
  }
  tb() {
    this.kb(this.$props.muted());
  }
  kb(muted) {
    this.canPlayQueue.L("muted", () => this.bb.muted = muted);
  }
  get currentTime() {
    return this.bb?.currentTime ?? 0;
  }
  set currentTime(time) {
    this.lb(time);
  }
  vb() {
    this.lb(this.$props.currentTime());
  }
  lb(time) {
    this.canPlayQueue.L("currentTime", () => {
      const adapter = this.bb;
      if (time !== adapter.currentTime) {
        peek(() => {
          const boundTime = Math.min(
            Math.max(this.$state.seekableStart() + 0.1, time),
            this.$state.seekableEnd() - 0.1
          );
          if (Number.isFinite(boundTime))
            adapter.currentTime = boundTime;
        });
      }
    });
  }
  get volume() {
    return this.bb?.volume ?? 1;
  }
  set volume(volume) {
    this.mb(volume);
  }
  ub() {
    this.mb(this.$props.volume());
  }
  mb(volume) {
    const clampedVolume = clampNumber(0, volume, 1);
    this.canPlayQueue.L("volume", () => this.bb.volume = clampedVolume);
  }
  get playsinline() {
    return this.bb?.playsinline ?? false;
  }
  set playsinline(inline) {
    this.nb(inline);
  }
  wb() {
    this.nb(this.$props.playsinline());
  }
  nb(inline) {
    this.canPlayQueue.L("playsinline", () => this.bb.playsinline = inline);
  }
  get playbackRate() {
    return this.bb?.playbackRate ?? 1;
  }
  set playbackRate(rate) {
    this.ob(rate);
  }
  xb() {
    this.ob(this.$props.playbackRate());
  }
  ob(rate) {
    this.canPlayQueue.L("rate", () => this.bb.playbackRate = rate);
  }
  async play() {
    return this.cb.Ab();
  }
  async pause() {
    return this.cb.zb();
  }
  async enterFullscreen(target) {
    return this.cb.Fb(target);
  }
  async exitFullscreen(target) {
    return this.cb.Gb(target);
  }
  enterPictureInPicture() {
    return this.cb.Hb();
  }
  exitPictureInPicture() {
    return this.cb.Ib();
  }
  seekToLiveEdge() {
    this.cb.Jb();
  }
  startLoading() {
    this.v.delegate.u("can-load");
  }
  matchQuery(query) {
    return scoped(() => PlayerQueryList.create(query), this.scope);
  }
  destroy() {
    this.v.remote.setPlayer(null);
    this.dispatch("destroy");
  }
};
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "canPlayQueue", 2);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "provider", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "controls", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "orientation", 2);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "qualities", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "audioTracks", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "textTracks", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "textRenderers", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "paused", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "muted", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "currentTime", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "volume", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "playsinline", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "playbackRate", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "play", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "pause", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "enterFullscreen", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "exitFullscreen", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "enterPictureInPicture", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "exitPictureInPicture", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "seekToLiveEdge", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "startLoading", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "matchQuery", 1);
let MediaPlayer = _MediaPlayer;

const SETUP = Symbol(0);
class SourceSelection {
  constructor(_domSources, _media, _loader) {
    this.Hi = false;
    this.Nb = _domSources;
    this.v = _media;
    this.Kb = _loader;
    const HLS_LOADER = new HLSProviderLoader(), VIDEO_LOADER = new VideoProviderLoader(), AUDIO_LOADER = new AudioProviderLoader();
    this.Ii = computed(() => {
      return _media.$props.preferNativeHLS() ? [VIDEO_LOADER, AUDIO_LOADER, HLS_LOADER] : [HLS_LOADER, VIDEO_LOADER, AUDIO_LOADER];
    });
    const { $state } = _media;
    $state.sources.set(normalizeSrc(_media.$props.src()));
    for (const src of $state.sources()) {
      const loader = this.Ii().find((loader2) => loader2.canPlay(src));
      if (!loader)
        continue;
      const mediaType = loader.mediaType(src);
      this.v.$state.source.set(src);
      this.v.$state.mediaType.set(mediaType);
      this.v.$state.inferredViewType.set(mediaType);
      this.Kb.set(loader);
      this.Hi = true;
    }
  }
  connect() {
    const loader = this.Kb();
    if (this.Hi) {
      this.Ji(this.v.$state.source(), loader);
      this.Ki(loader);
      this.Hi = false;
    }
    effect(this.Mi.bind(this));
    effect(this.Ni.bind(this));
    effect(this.Oi.bind(this));
    effect(this.Pi.bind(this));
  }
  Mi() {
    this.v.delegate.u("sources-change", {
      detail: [...normalizeSrc(this.v.$props.src()), ...this.Nb()]
    });
  }
  Ni() {
    const { $state } = this.v;
    const sources = $state.sources(), currentSource = peek($state.source), newSource = this.Li(currentSource, sources), noMatch = sources[0]?.src && !newSource.src && !newSource.type;
    if (noMatch) {
      const { crossorigin } = $state, credentials = getRequestCredentials(crossorigin()), abort = new AbortController();
      Promise.all(
        sources.map(
          (source) => isString(source.src) && source.type === "?" ? fetch(source.src, {
            method: "HEAD",
            credentials,
            signal: abort.signal
          }).then((res) => {
            source.type = res.headers.get("content-type") || "??";
            return source;
          }).catch(() => source) : source
        )
      ).then((sources2) => {
        if (abort.signal.aborted)
          return;
        this.Li(peek($state.source), sources2);
        tick();
      });
      return () => abort.abort();
    }
    tick();
  }
  Li(currentSource, sources) {
    let newSource = { src: "", type: "" }, newLoader = null;
    for (const src of sources) {
      const loader = peek(this.Ii).find((loader2) => loader2.canPlay(src));
      if (loader) {
        newSource = src;
        newLoader = loader;
      }
    }
    if (!isSameSrc(currentSource, newSource)) {
      this.Ji(newSource, newLoader);
    }
    if (newLoader !== peek(this.Kb)) {
      this.Ki(newLoader);
    }
    return newSource;
  }
  Ji(src, loader) {
    this.v.delegate.u("source-change", { detail: src });
    this.v.delegate.u("media-type-change", {
      detail: loader?.mediaType(src) || "unknown"
    });
  }
  Ki(loader) {
    this.v.delegate.u("provider-change", { detail: null });
    loader && peek(() => loader.preconnect?.(this.v));
    this.Kb.set(loader);
    this.v.delegate.u("provider-loader-change", { detail: loader });
  }
  Oi() {
    const provider = this.v.$provider();
    if (!provider || provider[SETUP])
      return;
    if (this.v.$state.canLoad()) {
      untrack(() => provider.setup(this.v));
      provider[SETUP] = true;
      return;
    }
    peek(() => provider.preconnect?.(this.v));
  }
  Pi() {
    const provider = this.v.$provider(), source = this.v.$state.source();
    if (isSameSrc(provider?.currentSrc, source)) {
      return;
    }
    if (this.v.$state.canLoad()) {
      peek(() => provider?.loadSource(source, peek(this.v.$state.preload)));
      return;
    }
    try {
      isString(source.src) && preconnect(new URL(source.src).origin, "preconnect");
    } catch (error) {
    }
  }
}
function normalizeSrc(src) {
  return (isArray(src) ? src : [!isString(src) && "src" in src ? src : { src }]).map(
    ({ src: src2, type }) => ({
      src: src2,
      type: type ?? (!isString(src2) || src2.startsWith("blob:") ? "video/object" : "?")
    })
  );
}
function isSameSrc(a, b) {
  return a?.src === b?.src && a?.type === b?.type;
}

class Tracks {
  constructor(_domTracks, _media) {
    this.Qi = [];
    this.Ob = _domTracks;
    this.v = _media;
    effect(this.Ri.bind(this));
  }
  Ri() {
    const newTracks = this.Ob();
    for (const oldTrack of this.Qi) {
      if (!newTracks.some((t) => t.id === oldTrack.id)) {
        const track = oldTrack.id && this.v.textTracks.getById(oldTrack.id);
        if (track)
          this.v.textTracks.remove(track);
      }
    }
    for (const newTrack of newTracks) {
      const id = newTrack.id || TextTrack.createId(newTrack);
      if (!this.v.textTracks.getById(id)) {
        newTrack.id = id;
        this.v.textTracks.add(newTrack);
      }
    }
    this.Qi = newTracks;
  }
}

var __defProp$e = Object.defineProperty;
var __getOwnPropDesc$e = Object.getOwnPropertyDescriptor;
var __decorateClass$e = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$e(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$e(target, key, result);
  return result;
};
class MediaProvider extends Component {
  constructor() {
    super(...arguments);
    this.Nb = signal([]);
    this.Ob = signal([]);
    this.Kb = null;
    this.Lb = -1;
  }
  static {
    this.state = new State({
      loader: null
    });
  }
  onSetup() {
    this.v = useMediaContext();
    this.Mb = new SourceSelection(this.Nb, this.v, this.$state.loader);
  }
  onAttach(el) {
    el.setAttribute("data-media-provider", "");
  }
  onConnect(el) {
    this.Mb.connect();
    new Tracks(this.Ob, this.v);
    const resize = new ResizeObserver(animationFrameThrottle(this.eb.bind(this)));
    resize.observe(el);
    const mutation = new MutationObserver(this.Pb.bind(this));
    mutation.observe(el, { attributes: true, childList: true });
    if (IS_SAFARI) {
      listenEvent(el, "touchstart", (e) => e.preventDefault(), { passive: false });
    }
    this.eb();
    this.Pb();
    onDispose(() => {
      resize.disconnect();
      mutation.disconnect();
    });
  }
  load(target) {
    window.cancelAnimationFrame(this.Lb);
    this.Lb = requestAnimationFrame(() => this.Rb(target));
    onDispose(() => {
      window.cancelAnimationFrame(this.Lb);
    });
  }
  Rb(target) {
    if (!this.scope)
      return;
    const loader = this.$state.loader(), { $provider } = this.v;
    if (this.Kb === loader && loader?.target === target && peek($provider))
      return;
    this.Qb();
    this.Kb = loader;
    if (loader)
      loader.target = target || null;
    if (!loader || !target)
      return;
    loader.load(this.v).then((provider) => {
      if (!this.scope)
        return;
      if (peek(this.$state.loader) !== loader)
        return;
      this.v.delegate.u("provider-change", {
        detail: provider
      });
    });
  }
  onDestroy() {
    this.Kb = null;
    this.Qb();
  }
  Qb() {
    this.v.delegate.u("provider-change", { detail: null });
  }
  eb() {
    if (!this.el)
      return;
    const player = this.v.player, width = this.el.offsetWidth, height = this.el.offsetHeight;
    if (!player)
      return;
    player.$state.mediaWidth.set(width);
    player.$state.mediaHeight.set(height);
    if (player.el) {
      setStyle(player.el, "--media-width", width + "px");
      setStyle(player.el, "--media-height", height + "px");
    }
  }
  Pb() {
    const sources = [], tracks = [], children = this.el.children;
    for (const el of children) {
      if (el instanceof HTMLSourceElement) {
        sources.push({
          src: el.src,
          type: el.type
        });
      } else if (el instanceof HTMLTrackElement) {
        tracks.push({
          id: el.id,
          src: el.src,
          kind: el.track.kind,
          language: el.srclang,
          label: el.label,
          default: el.default,
          type: el.getAttribute("data-type")
        });
      }
    }
    this.Nb.set(sources);
    this.Ob.set(tracks);
    tick();
  }
}
__decorateClass$e([
  method
], MediaProvider.prototype, "load", 1);

class Controls extends Component {
  static {
    this.props = {
      hideDelay: 2e3
    };
  }
  onSetup() {
    this.v = useMediaContext();
    effect(this.Tb.bind(this));
  }
  onAttach(el) {
    const { pictureInPicture, fullscreen } = this.v.$state;
    setStyle(el, "pointer-events", "none");
    setAttributeIfEmpty(el, "role", "group");
    this.setAttributes({
      "data-visible": this.Sb.bind(this),
      "data-fullscreen": fullscreen,
      "data-pip": pictureInPicture
    });
    effect(() => {
      this.dispatch("change", { detail: this.Sb() });
    });
    effect(() => {
      const isFullscreen = fullscreen();
      for (const side of ["top", "right", "bottom", "left"]) {
        setStyle(el, `padding-${side}`, isFullscreen && `env(safe-area-inset-${side})`);
      }
    });
  }
  Tb() {
    const { controls } = this.v.player, { hideDelay } = this.$props;
    controls.defaultDelay = hideDelay();
  }
  Sb() {
    const { controlsVisible } = this.v.$state;
    return controlsVisible();
  }
}

class Popper extends ViewController {
  constructor(_delegate) {
    super();
    this.Ti = -1;
    this.Ui = -1;
    this.Si = null;
    this.vc = _delegate;
    effect(this.Vi.bind(this));
  }
  onDestroy() {
    this.Si?.();
    this.Si = null;
  }
  Vi() {
    const trigger = this.vc.Ub();
    if (!trigger) {
      this.hide();
      return;
    }
    const show = this.show.bind(this), hide = this.hide.bind(this);
    this.vc.bc(trigger, show, hide);
  }
  show(trigger) {
    window.cancelAnimationFrame(this.Ui);
    this.Ui = -1;
    this.Si?.();
    this.Si = null;
    this.Ti = window.setTimeout(
      () => {
        this.Ti = -1;
        const content = this.vc.Vb();
        if (content)
          content.style.removeProperty("display");
        peek(() => this.vc.R(true, trigger));
      },
      this.vc.ac?.() ?? 0
    );
  }
  hide(trigger) {
    window.clearTimeout(this.Ti);
    this.Ti = -1;
    peek(() => this.vc.R(false, trigger));
    this.Ui = requestAnimationFrame(() => {
      this.Ui = -1;
      const content = this.vc.Vb();
      if (content) {
        const isAnimated = hasAnimation(content);
        const onHide = () => {
          content.style.display = "none";
          this.Si = null;
        };
        if (isAnimated) {
          this.Si?.();
          const stop = listenEvent(content, "animationend", onHide, { once: true });
          this.Si = stop;
        } else {
          onHide();
        }
      }
    });
  }
}

const tooltipContext = createContext();

let id = 0;
class Tooltip extends Component {
  constructor() {
    super();
    this.Wb = `media-tooltip-${++id}`;
    this.Ub = signal(null);
    this.Vb = signal(null);
    new FocusVisibleController();
    const { showDelay } = this.$props;
    new Popper({
      Ub: this.Ub,
      Vb: this.Vb,
      ac: showDelay,
      bc(trigger, show, hide) {
        listenEvent(trigger, "touchstart", (e) => e.preventDefault());
        listenEvent(trigger, "focus", show);
        listenEvent(trigger, "blur", hide);
        listenEvent(trigger, "mouseenter", show);
        listenEvent(trigger, "mouseleave", hide);
      },
      R: this.$b.bind(this)
    });
  }
  static {
    this.props = {
      showDelay: 500
    };
  }
  onAttach(el) {
    el.style.setProperty("display", "contents");
  }
  onSetup() {
    provideContext(tooltipContext, {
      Ub: this.Ub,
      Vb: this.Vb,
      Xb: this.Xb.bind(this),
      Yb: this.Yb.bind(this),
      Zb: this.Zb.bind(this),
      _b: this._b.bind(this)
    });
  }
  Xb(el) {
    this.Ub.set(el);
    el.removeAttribute("aria-label");
    let tooltipName = el.getAttribute("data-media-tooltip");
    if (tooltipName) {
      this.el?.setAttribute(`data-media-${tooltipName}-tooltip`, "");
    }
    setAttribute(el, "data-describedby", this.Wb);
  }
  Yb(el) {
    el.removeAttribute("data-describedby");
    el.removeAttribute("aria-describedby");
    this.Ub.set(null);
  }
  Zb(el) {
    el.setAttribute("id", this.Wb);
    el.style.display = "none";
    setAttributeIfEmpty(el, "role", "tooltip");
    this.Vb.set(el);
  }
  _b(el) {
    el.removeAttribute("id");
    el.removeAttribute("role");
    this.Vb.set(null);
  }
  $b(isShowing) {
    const trigger = this.Ub(), content = this.Vb();
    if (trigger) {
      setAttribute(trigger, "aria-describedby", isShowing ? this.Wb : null);
    }
    for (const el of [this.el, trigger, content]) {
      el && setAttribute(el, "data-visible", isShowing);
    }
  }
}

class TooltipContent extends Component {
  static {
    this.props = {
      placement: "top center",
      offset: 0,
      alignOffset: 0
    };
  }
  constructor() {
    super();
    new FocusVisibleController();
    const { placement } = this.$props;
    this.setAttributes({
      "data-placement": placement
    });
  }
  onAttach(el) {
    this.dc(el);
    Object.assign(el.style, {
      position: "absolute",
      top: 0,
      left: 0,
      width: "max-content"
    });
  }
  onConnect(el) {
    this.dc(el);
    const tooltip = useContext(tooltipContext);
    onDispose(() => tooltip._b(el));
    onDispose(
      requestScopedAnimationFrame(() => {
        if (!this.connectScope)
          return;
        effect(this.ec.bind(this));
      })
    );
  }
  dc(el) {
    const tooltip = useContext(tooltipContext);
    tooltip.Zb(el);
  }
  ec() {
    const { placement, offset: mainOffset, alignOffset } = this.$props;
    return autoPlacement(this.el, this.fc(), placement(), {
      offsetVarName: "media-tooltip",
      xOffset: alignOffset(),
      yOffset: mainOffset()
    });
  }
  fc() {
    return useContext(tooltipContext).Ub();
  }
}

class ToggleButtonController extends ViewController {
  constructor(_delegate) {
    super();
    this.vc = _delegate;
    new FocusVisibleController();
    if (_delegate.kc) {
      new ARIAKeyShortcuts(_delegate.kc);
    }
  }
  static {
    this.props = {
      disabled: false
    };
  }
  onSetup() {
    const { disabled } = this.$props;
    this.setAttributes({
      "data-pressed": this.vc.hc,
      "aria-pressed": this.Wi.bind(this),
      "aria-disabled": () => disabled() ? "true" : null
    });
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "role", "button");
  }
  onConnect(el) {
    onPress(el, this.Xi.bind(this));
  }
  Wi() {
    return ariaBool$1(this.vc.hc());
  }
  Yi(event) {
    if (isWriteSignal(this.vc.hc)) {
      this.vc.hc.set((p) => !p);
    }
  }
  Xi(event) {
    const disabled = this.$props.disabled() || this.el.hasAttribute("data-disabled");
    if (disabled) {
      event.stopImmediatePropagation();
      return;
    }
    event.preventDefault();
    (this.vc.ic ?? this.Yi)(event);
  }
}

var __defProp$d = Object.defineProperty;
var __getOwnPropDesc$d = Object.getOwnPropertyDescriptor;
var __decorateClass$d = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$d(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$d(target, key, result);
  return result;
};
class ToggleButton extends Component {
  constructor() {
    super();
    this.gc = signal(false);
    new ToggleButtonController({
      hc: this.gc
    });
  }
  static {
    this.props = {
      disabled: false,
      defaultPressed: false
    };
  }
  get pressed() {
    return this.gc();
  }
}
__decorateClass$d([
  prop
], ToggleButton.prototype, "pressed", 1);

class PlayButton extends Component {
  constructor() {
    super();
    new ToggleButtonController({
      hc: this.hc.bind(this),
      kc: "togglePaused",
      ic: this.ic.bind(this)
    });
  }
  static {
    this.props = ToggleButtonController.props;
  }
  onSetup() {
    this.v = useMediaContext();
    const { paused, ended } = this.v.$state;
    this.setAttributes({
      "data-paused": paused,
      "data-ended": ended
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-tooltip", "play");
    setARIALabel(el, this.jc.bind(this));
  }
  ic(event) {
    const remote = this.v.remote;
    this.hc() ? remote.pause(event) : remote.play(event);
  }
  hc() {
    const { paused } = this.v.$state;
    return !paused();
  }
  jc() {
    const { paused } = this.v.$state;
    return paused() ? "Play" : "Pause";
  }
}

function ariaBool(value) {
  return value ? "true" : "false";
}
function $ariaBool(signal) {
  return () => ariaBool(signal());
}

class CaptionButton extends Component {
  constructor() {
    super();
    new ToggleButtonController({
      hc: this.hc.bind(this),
      kc: "toggleCaptions",
      ic: this.ic.bind(this)
    });
  }
  static {
    this.props = ToggleButtonController.props;
  }
  onSetup() {
    this.v = useMediaContext();
    this.setAttributes({
      "data-active": this.hc.bind(this),
      "data-supported": () => !this.lc(),
      "aria-hidden": $ariaBool(this.lc.bind(this))
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-tooltip", "caption");
    setARIALabel(el, this.jc.bind(this));
  }
  ic(event) {
    this.v.remote.toggleCaptions(event);
  }
  hc() {
    const { textTrack } = this.v.$state, track = textTrack();
    return !!track && isTrackCaptionKind(track);
  }
  lc() {
    const { textTracks } = this.v.$state;
    return textTracks().filter(isTrackCaptionKind).length == 0;
  }
  jc() {
    const { textTrack } = this.v.$state;
    return textTrack() ? "Closed-Captions Off" : "Closed-Captions On";
  }
}

class FullscreenButton extends Component {
  constructor() {
    super();
    new ToggleButtonController({
      hc: this.hc.bind(this),
      kc: "toggleFullscreen",
      ic: this.ic.bind(this)
    });
  }
  static {
    this.props = {
      ...ToggleButtonController.props,
      target: "prefer-media"
    };
  }
  onSetup() {
    this.v = useMediaContext();
    const { fullscreen } = this.v.$state, isSupported = this.mc.bind(this);
    this.setAttributes({
      "data-active": fullscreen,
      "data-supported": isSupported,
      "aria-hidden": $ariaBool(() => !isSupported())
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-tooltip", "fullscreen");
    setARIALabel(el, this.jc.bind(this));
  }
  ic(event) {
    const remote = this.v.remote, target = this.$props.target();
    this.hc() ? remote.exitFullscreen(target, event) : remote.enterFullscreen(target, event);
  }
  hc() {
    const { fullscreen } = this.v.$state;
    return fullscreen();
  }
  mc() {
    const { canFullscreen } = this.v.$state;
    return canFullscreen();
  }
  jc() {
    const { fullscreen } = this.v.$state;
    return fullscreen() ? "Exit Fullscreen" : "Enter Fullscreen";
  }
}

class MuteButton extends Component {
  constructor() {
    super();
    new ToggleButtonController({
      hc: this.hc.bind(this),
      kc: "toggleMuted",
      ic: this.ic.bind(this)
    });
  }
  static {
    this.props = ToggleButtonController.props;
  }
  onSetup() {
    this.v = useMediaContext();
    this.setAttributes({
      "data-muted": this.hc.bind(this),
      "data-state": this.nc.bind(this)
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-mute-button", "");
    el.setAttribute("data-media-tooltip", "mute");
    setARIALabel(el, this.jc.bind(this));
  }
  ic(event) {
    const remote = this.v.remote;
    this.hc() ? remote.unmute(event) : remote.mute(event);
  }
  hc() {
    const { muted, volume } = this.v.$state;
    return muted() || volume() === 0;
  }
  jc() {
    return this.hc() ? "Unmute" : "Mute";
  }
  nc() {
    const { muted, volume } = this.v.$state, $volume = volume();
    if (muted() || $volume === 0)
      return "muted";
    else if ($volume >= 0.5)
      return "high";
    else if ($volume < 0.5)
      return "low";
  }
}

class PIPButton extends Component {
  constructor() {
    super();
    new ToggleButtonController({
      hc: this.hc.bind(this),
      kc: "togglePictureInPicture",
      ic: this.ic.bind(this)
    });
  }
  static {
    this.props = ToggleButtonController.props;
  }
  onSetup() {
    this.v = useMediaContext();
    const { pictureInPicture } = this.v.$state, isSupported = this.mc.bind(this);
    this.setAttributes({
      "data-active": pictureInPicture,
      "data-supported": isSupported,
      "aria-hidden": $ariaBool(() => !isSupported())
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-tooltip", "pip");
    setARIALabel(el, this.jc.bind(this));
  }
  ic(event) {
    const remote = this.v.remote;
    this.hc() ? remote.exitPictureInPicture(event) : remote.enterPictureInPicture(event);
  }
  hc() {
    const { pictureInPicture } = this.v.$state;
    return pictureInPicture();
  }
  mc() {
    const { canPictureInPicture } = this.v.$state;
    return canPictureInPicture();
  }
  jc() {
    const { pictureInPicture } = this.v.$state;
    return pictureInPicture() ? "Exit Picture In Picture" : "Enter Picture In Picture";
  }
}

class SeekButton extends Component {
  constructor() {
    super();
    new FocusVisibleController();
  }
  static {
    this.props = {
      disabled: false,
      seconds: 30
    };
  }
  onSetup() {
    this.v = useMediaContext();
    const { seeking } = this.v.$state, { seconds } = this.$props, isSupported = this.mc.bind(this);
    this.setAttributes({
      seconds,
      "data-seeking": seeking,
      "data-supported": isSupported,
      "aria-hidden": $ariaBool(() => !isSupported())
    });
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "role", "button");
    el.setAttribute("data-media-tooltip", "seek");
    setARIALabel(el, this.jc.bind(this));
  }
  onConnect(el) {
    onPress(el, this.ic.bind(this));
  }
  mc() {
    const { canSeek } = this.v.$state;
    return canSeek();
  }
  jc() {
    const { seconds } = this.$props;
    return `Seek ${seconds() > 0 ? "forward" : "backward"} ${seconds()} seconds`;
  }
  ic(event) {
    const { seconds, disabled } = this.$props;
    if (disabled())
      return;
    const { currentTime } = this.v.$state, seekTo = currentTime() + seconds();
    this.v.remote.seek(seekTo, event);
  }
}

class LiveButton extends Component {
  constructor() {
    super();
    new FocusVisibleController();
  }
  static {
    this.props = {
      disabled: false
    };
  }
  onSetup() {
    this.v = useMediaContext();
    const { disabled } = this.$props, { live, liveEdge } = this.v.$state, isHidden = () => !live();
    this.setAttributes({
      "data-edge": liveEdge,
      "data-hidden": isHidden,
      "aria-disabled": $ariaBool(disabled),
      "aria-hidden": $ariaBool(isHidden)
    });
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "role", "button");
    el.setAttribute("data-media-tooltip", "live");
  }
  onConnect(el) {
    onPress(el, this.ic.bind(this));
  }
  ic(event) {
    const { disabled } = this.$props, { liveEdge } = this.v.$state;
    if (disabled() || liveEdge())
      return;
    this.v.remote.seekToLiveEdge(event);
  }
}

const sliderState = new State({
  min: 0,
  max: 100,
  value: 0,
  pointerValue: 0,
  focused: false,
  dragging: false,
  pointing: false,
  get active() {
    return this.dragging || this.focused || this.pointing;
  },
  get fillRate() {
    return calcRate(this.min, this.max, this.value);
  },
  get fillPercent() {
    return this.fillRate * 100;
  },
  get pointerRate() {
    return calcRate(this.min, this.max, this.pointerValue);
  },
  get pointerPercent() {
    return this.pointerRate * 100;
  }
});
function calcRate(min, max, value) {
  const range = max - min, offset = value - min;
  return range > 0 ? offset / range : 0;
}

function getClampedValue(min, max, value, step) {
  return clampNumber(min, round(value, getNumberOfDecimalPlaces(step)), max);
}
function getValueFromRate(min, max, rate, step) {
  const boundRate = clampNumber(0, rate, 1), range = max - min, fill = range * boundRate, stepRatio = fill / step, steps = step * stepRatio;
  return min + steps;
}

const SliderKeyDirection = {
  Left: -1,
  ArrowLeft: -1,
  Up: 1,
  ArrowUp: 1,
  Right: 1,
  ArrowRight: 1,
  Down: -1,
  ArrowDown: -1
};
class SliderEventsController extends ViewController {
  constructor(_delegate, _media) {
    super();
    this.bb = null;
    this._i = null;
    this.$i = null;
    this.nj = functionThrottle(
      (event) => {
        this.Zi(this.aj(event), event);
      },
      20,
      { leading: true }
    );
    this.vc = _delegate;
    this.v = _media;
  }
  onConnect() {
    effect(this.gj.bind(this));
    effect(this.hj.bind(this));
    if (this.vc.jd) {
      const provider = this.v.player.el?.querySelector(
        "media-provider,[data-media-provider]"
      );
      if (provider) {
        this.bb = provider;
        listenEvent(provider, "touchstart", this.ij.bind(this));
        listenEvent(provider, "touchmove", this.jj.bind(this));
      }
    }
  }
  ij(event) {
    this._i = event.touches[0].clientX;
  }
  jj(event) {
    if (isNull(this._i))
      return;
    event.preventDefault();
    if (this.$state.dragging())
      return;
    const diff = event.touches[0].clientX - this._i;
    if (Math.abs(diff) > 20) {
      this._i = event.touches[0].clientX;
      this.$i = this.$state.value();
      this.bj(this.$i, event);
    }
  }
  gj() {
    if (this.vc.uc())
      return;
    this.listen("focus", this.yi.bind(this));
    this.listen("pointerenter", this.wi.bind(this));
    this.listen("pointermove", this.kj.bind(this));
    this.listen("pointerleave", this.xi.bind(this));
    this.listen("pointerdown", this.lj.bind(this));
    this.listen("keydown", this.Ya.bind(this));
    this.listen("keyup", this.Xa.bind(this));
  }
  hj() {
    if (this.vc.uc() || !this.$state.dragging())
      return;
    listenEvent(document, "pointerup", this.mj.bind(this));
    listenEvent(document, "pointermove", this.nj.bind(this));
    if (IS_SAFARI) {
      listenEvent(document, "touchmove", this.oj.bind(this), {
        passive: false
      });
    }
  }
  yi() {
    this.Zi(this.$state.value());
  }
  cj(newValue, trigger) {
    const { value, min, max, dragging } = this.$state;
    const clampedValue = Math.max(min(), Math.min(newValue, max()));
    value.set(clampedValue);
    const event = this.createEvent("value-change", { detail: clampedValue, trigger });
    this.dispatch(event);
    this.vc.Uc?.(event);
    if (dragging()) {
      const event2 = this.createEvent("drag-value-change", { detail: clampedValue, trigger });
      this.dispatch(event2);
      this.vc.Tc?.(event2);
    }
  }
  Zi(value, trigger) {
    const { pointerValue, dragging } = this.$state;
    pointerValue.set(value);
    this.dispatch("pointer-value-change", { detail: value, trigger });
    if (dragging()) {
      this.cj(value, trigger);
    }
  }
  aj(event) {
    let thumbPositionRate, rect = this.el.getBoundingClientRect(), { min, max } = this.$state;
    if (this.$props.orientation() === "vertical") {
      const { bottom: trackBottom, height: trackHeight } = rect;
      thumbPositionRate = (trackBottom - event.clientY) / trackHeight;
    } else {
      if (this._i && isNumber(this.$i)) {
        const { width } = this.bb.getBoundingClientRect(), rate = (event.clientX - this._i) / width, range = max() - min(), diff = range * Math.abs(rate);
        thumbPositionRate = (rate < 0 ? this.$i - diff : this.$i + diff) / range;
      } else {
        const { left: trackLeft, width: trackWidth } = rect;
        thumbPositionRate = (event.clientX - trackLeft) / trackWidth;
      }
    }
    return Math.max(
      min(),
      Math.min(
        max(),
        this.vc.tc(
          getValueFromRate(min(), max(), thumbPositionRate, this.vc.rc())
        )
      )
    );
  }
  wi(event) {
    this.$state.pointing.set(true);
  }
  kj(event) {
    const { dragging } = this.$state;
    if (dragging())
      return;
    this.Zi(this.aj(event), event);
  }
  xi(event) {
    this.$state.pointing.set(false);
  }
  lj(event) {
    if (event.button !== 0)
      return;
    const value = this.aj(event);
    this.bj(value, event);
    this.Zi(value, event);
  }
  bj(value, trigger) {
    const { dragging } = this.$state;
    if (dragging())
      return;
    dragging.set(true);
    this.v.remote.pauseControls(trigger);
    const event = this.createEvent("drag-start", { detail: value, trigger });
    this.dispatch(event);
    this.vc.ad?.(event);
  }
  ej(value, trigger) {
    const { dragging } = this.$state;
    if (!dragging())
      return;
    dragging.set(false);
    this.v.remote.resumeControls(trigger);
    const event = this.createEvent("drag-end", { detail: value, trigger });
    this.dispatch(event);
    this.vc.Zc?.(event);
    this._i = null;
    this.$i = null;
  }
  Ya(event) {
    if (isDOMEvent(event)) {
      const trigger = event.trigger;
      if (isKeyboardEvent(trigger))
        event = trigger;
      else
        return;
    }
    const { key } = event;
    const { min, max } = this.$state;
    let newValue;
    if (key === "Home" || key === "PageUp") {
      newValue = min();
    } else if (key === "End" || key === "PageDown") {
      newValue = max();
    } else if (!event.metaKey && /[0-9]/.test(key)) {
      newValue = (max() - min()) / 10 * Number(key);
    }
    if (!isUndefined(newValue)) {
      this.Zi(newValue, event);
      this.cj(newValue, event);
      return;
    }
    const value = this.fj(event);
    if (!value)
      return;
    const repeat = key === this.dj;
    if (!this.$state.dragging() && repeat)
      this.bj(value, event);
    this.Zi(value, event);
    if (!repeat)
      this.cj(value, event);
    this.dj = key;
  }
  Xa(event) {
    if (isDOMEvent(event)) {
      const trigger = event.trigger;
      if (isKeyboardEvent(trigger))
        event = trigger;
      else
        return;
    }
    this.dj = "";
    const { dragging, value } = this.$state;
    if (!dragging())
      return;
    const newValue = this.fj(event) ?? value();
    this.Zi(newValue);
    this.ej(newValue, event);
  }
  fj(event) {
    const { key, shiftKey } = event, isValidKey = Object.keys(SliderKeyDirection).includes(key);
    if (!isValidKey)
      return;
    const { shiftKeyMultiplier } = this.$props;
    const { value } = this.$state, step = this.vc.rc(), keyStep = this.vc.sc();
    const modifiedStep = !shiftKey ? keyStep : keyStep * shiftKeyMultiplier(), direction = Number(SliderKeyDirection[key]), diff = modifiedStep * direction, steps = (value() + diff) / step;
    return Number((step * steps).toFixed(3));
  }
  // -------------------------------------------------------------------------------------------
  // Document (Pointer Events)
  // -------------------------------------------------------------------------------------------
  mj(event) {
    if (event.button !== 0)
      return;
    const value = this.aj(event);
    this.Zi(value, event);
    this.ej(value, event);
  }
  oj(event) {
    event.preventDefault();
  }
}

const sliderValueFormatContext = createContext(() => ({}));

const sliderContext = createContext();

class SliderController extends ViewController {
  constructor(_delegate) {
    super();
    this.Bc = animationFrameThrottle(
      (fillPercent, pointerPercent) => {
        this.el?.style.setProperty("--slider-fill", fillPercent + "%");
        this.el?.style.setProperty("--slider-pointer", pointerPercent + "%");
      }
    );
    this.vc = _delegate;
  }
  static {
    this.props = {
      disabled: false,
      step: 1,
      keyStep: 1,
      orientation: "horizontal",
      shiftKeyMultiplier: 5
    };
  }
  onSetup() {
    this.v = useMediaContext();
    const focus = new FocusVisibleController();
    focus.attach(this);
    this.$state.focused = focus.focused.bind(focus);
    if (!hasProvidedContext(sliderValueFormatContext)) {
      provideContext(sliderValueFormatContext);
    }
    provideContext(sliderContext, {
      Cc: this.$props.orientation,
      Dc: this.vc.uc,
      Ec: signal(null)
    });
    effect(this.xc.bind(this));
    effect(this.yc.bind(this));
    this.zc();
    new SliderEventsController(this.vc, this.v).attach(this);
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "role", "slider");
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "autocomplete", "off");
    effect(this.wc.bind(this));
  }
  // -------------------------------------------------------------------------------------------
  // Watch
  // -------------------------------------------------------------------------------------------
  xc() {
    const { dragging, value, min, max } = this.$state;
    if (peek(dragging))
      return;
    value.set(getClampedValue(min(), max(), value(), this.vc.rc()));
  }
  yc() {
    if (!this.vc.uc())
      return;
    const { dragging, pointing } = this.$state;
    dragging.set(false);
    pointing.set(false);
  }
  // -------------------------------------------------------------------------------------------
  // ARIA
  // -------------------------------------------------------------------------------------------
  Ac() {
    return ariaBool$1(this.vc.uc());
  }
  // -------------------------------------------------------------------------------------------
  // Attributes
  // -------------------------------------------------------------------------------------------
  zc() {
    const { orientation } = this.$props, { dragging, active, pointing } = this.$state;
    this.setAttributes({
      "data-dragging": dragging,
      "data-pointing": pointing,
      "data-active": active,
      "aria-disabled": this.Ac.bind(this),
      "aria-valuemin": this.$state.min,
      "aria-valuemax": this.$state.max,
      "aria-valuenow": this.vc.oc,
      "aria-valuetext": this.vc.pc,
      "aria-orientation": orientation
    });
  }
  wc() {
    const { fillPercent, pointerPercent } = this.$state;
    this.Bc(round(fillPercent(), 3), round(pointerPercent(), 3));
  }
}

class Slider extends Component {
  static {
    this.props = {
      ...SliderController.props,
      min: 0,
      max: 100,
      value: 0
    };
  }
  static {
    this.state = sliderState;
  }
  constructor() {
    super();
    new SliderController({
      rc: this.$props.step,
      sc: this.$props.keyStep,
      tc: Math.round,
      uc: this.$props.disabled,
      oc: this.oc.bind(this),
      pc: this.pc.bind(this)
    });
  }
  onSetup() {
    effect(this.qc.bind(this));
  }
  // -------------------------------------------------------------------------------------------
  // Props
  // -------------------------------------------------------------------------------------------
  oc() {
    const { value } = this.$state;
    return Math.round(value());
  }
  pc() {
    const { value, max } = this.$state;
    return round(value() / max() * 100, 2) + "%";
  }
  // -------------------------------------------------------------------------------------------
  // Watch
  // -------------------------------------------------------------------------------------------
  qc() {
    const { min, max } = this.$props;
    this.$state.min.set(min());
    this.$state.max.set(max());
  }
}

const cache = /* @__PURE__ */ new Map(), pending = /* @__PURE__ */ new Set(), registry = /* @__PURE__ */ new Set();
class ThumbnailsLoader {
  constructor($src, _media) {
    this.$cues = signal([]);
    this.$src = $src;
    this.v = _media;
    effect(this.xf.bind(this));
    registry.add(this);
    onDispose(() => registry.delete(this));
  }
  static create(src) {
    const media = useMediaContext();
    return new ThumbnailsLoader(src, media);
  }
  xf() {
    const { canLoad } = this.v.$state;
    if (!canLoad())
      return;
    const controller = new AbortController(), { crossorigin } = this.v.$state;
    const src = this.$src();
    if (!src)
      return;
    if (cache.has(src)) {
      const cues = cache.get(src);
      cache.delete(src);
      cache.set(src, cues);
      if (cache.size > 30) {
        const firstKey = cache.keys().next().value;
        cache.delete(firstKey);
      }
      this.$cues.set(cache.get(src));
    } else if (!pending.has(src)) {
      pending.add(src);
      import('media-captions').then(({ parseResponse }) => {
        parseResponse(
          fetch(src, {
            signal: controller.signal,
            credentials: getRequestCredentials(crossorigin())
          })
        ).then(({ cues }) => {
          this.$cues.set(cues);
          for (const t of registry) {
            if (peek(t.$src) === src)
              t.$cues.set(cues);
          }
          cache.set(src, cues);
          pending.delete(src);
        }).catch(noop);
      });
    }
    return () => {
      this.$cues.set([]);
    };
  }
}

class Thumbnail extends Component {
  constructor() {
    super(...arguments);
    this.of = [];
    this.pf = animationFrameThrottle(this.wf.bind(this));
  }
  static {
    this.props = {
      src: "",
      time: 0
    };
  }
  static {
    this.state = new State({
      src: "",
      img: null,
      coords: null,
      activeCue: null,
      loading: false,
      error: null,
      hidden: false
    });
  }
  onSetup() {
    this.v = useMediaContext();
    this.nf = ThumbnailsLoader.create(this.$props.src);
    this.setAttributes({
      "data-loading": this.Jc.bind(this),
      "data-error": this.Hc.bind(this),
      "data-hidden": this.$state.hidden,
      "aria-hidden": $ariaBool(this.$state.hidden)
    });
  }
  onConnect(el) {
    effect(this.gf.bind(this));
    effect(this.Mc.bind(this));
    effect(this.hf.bind(this));
    effect(this.rf.bind(this));
    effect(this.sf.bind(this));
  }
  gf() {
    const img = this.$state.img();
    if (!img)
      return;
    listenEvent(img, "load", this.tf.bind(this));
    listenEvent(img, "error", this.Pc.bind(this));
  }
  hf() {
    const { src, loading, error } = this.$state;
    src();
    loading.set(true);
    error.set(null);
  }
  tf() {
    const { loading, error } = this.$state;
    loading.set(false);
    error.set(null);
    this.pf();
  }
  Pc(event) {
    const { loading, error } = this.$state;
    loading.set(false);
    error.set(event);
  }
  Jc() {
    const { loading, hidden } = this.$state;
    return !hidden() && loading();
  }
  Hc() {
    const { error } = this.$state;
    return !isNull(error());
  }
  Mc() {
    const { hidden } = this.$state, { duration } = this.v.$state, cues = this.nf.$cues();
    hidden.set(this.Hc() || !Number.isFinite(duration()) || cues.length === 0);
  }
  Gc() {
    return this.$props.time();
  }
  rf() {
    const time = this.Gc(), { activeCue } = this.$state, { duration } = this.v.$state, cues = this.nf.$cues();
    if (!cues || !Number.isFinite(duration())) {
      activeCue.set(null);
      return;
    }
    activeCue.set(findActiveCue(cues, time));
  }
  sf() {
    const { src } = this.$props, { coords, activeCue } = this.$state, cue = activeCue(), baseURL = peek(src);
    if (!baseURL || !cue) {
      this.$state.src.set("");
      this.qf();
      return;
    }
    const [_src, _coords = ""] = (cue.text || "").split("#");
    coords.set(this.uf(_coords));
    if (!peek(coords)) {
      this.qf();
      return;
    }
    this.$state.src.set(this.vf(baseURL, _src));
    this.pf();
  }
  vf(baseURL, src) {
    return !/https?:/.test(src) ? `${baseURL.split("/").slice(0, -1).join("/")}${src.replace(/^\/?/, "/")}`.replace(
      /^\/\//,
      "/"
    ) : src;
  }
  uf(coords) {
    const [props, values] = coords.split("="), resolvedCoords = {}, coordValues = values?.split(",");
    if (!props || !values)
      return null;
    for (let i = 0; i < props.length; i++)
      resolvedCoords[props[i]] = +coordValues[i];
    return resolvedCoords;
  }
  wf() {
    if (!this.scope)
      return;
    const img = this.$state.img(), coords = this.$state.coords();
    if (!img || !coords || !this.el)
      return;
    const { w, h, x, y } = coords, { maxWidth, maxHeight, minWidth, minHeight } = getComputedStyle(this.el), minRatio = Math.max(parseInt(minWidth) / w, parseInt(minHeight) / h), maxRatio = Math.min(parseInt(maxWidth) / w, parseInt(maxHeight) / h), scale = maxRatio < 1 ? maxRatio : minRatio > 1 ? minRatio : 1;
    this.mf(this.el, "--thumbnail-width", `${w * scale}px`);
    this.mf(this.el, "--thumbnail-height", `${h * scale}px`);
    this.mf(img, "width", `${img.naturalWidth * scale}px`);
    this.mf(img, "height", `${img.naturalHeight * scale}px`);
    this.mf(img, "transform", `translate(-${x * scale}px, -${y * scale}px)`);
    this.mf(img, "max-width", "none");
  }
  mf(el, name, value) {
    el.style.setProperty(name, value);
    this.of.push(() => el.style.removeProperty(name));
  }
  qf() {
    for (const reset of this.of)
      reset();
    this.of = [];
  }
}

var __defProp$c = Object.defineProperty;
var __getOwnPropDesc$c = Object.getOwnPropertyDescriptor;
var __decorateClass$c = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$c(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$c(target, key, result);
  return result;
};
class SliderVideo extends Component {
  static {
    this.props = {
      src: null
    };
  }
  static {
    this.state = new State({
      video: null,
      src: null,
      canPlay: false,
      error: null,
      hidden: false
    });
  }
  get video() {
    return this.$state.video();
  }
  onSetup() {
    this.v = useMediaContext();
    this.Fc = useState(Slider.state);
    this.setAttributes({
      "data-loading": this.Jc.bind(this),
      "data-hidden": this.$state.hidden,
      "data-error": this.Hc.bind(this),
      "aria-hidden": $ariaBool(this.$state.hidden)
    });
  }
  onAttach(el) {
    effect(this.Kc.bind(this));
    effect(this.Lc.bind(this));
    effect(this.Mc.bind(this));
    effect(this.Nc.bind(this));
    effect(this.Oc.bind(this));
  }
  Kc() {
    const video = this.$state.video();
    if (!video)
      return;
    if (video.readyState >= 2)
      this.Ic();
    listenEvent(video, "canplay", this.Ic.bind(this));
    listenEvent(video, "error", this.Pc.bind(this));
  }
  Lc() {
    const { src } = this.$state, { canLoad } = this.v.$state;
    src.set(canLoad() ? this.$props.src() : null);
  }
  Jc() {
    const { canPlay, hidden } = this.$state;
    return !canPlay() && !hidden();
  }
  Hc() {
    const { error } = this.$state;
    return !isNull(error);
  }
  Mc() {
    const { src, hidden } = this.$state, { canLoad, duration } = this.v.$state;
    hidden.set(canLoad() && (!src() || this.Hc() || !Number.isFinite(duration())));
  }
  Nc() {
    const { src, canPlay, error } = this.$state;
    src();
    canPlay.set(false);
    error.set(null);
  }
  Ic(event) {
    const { canPlay, error } = this.$state;
    canPlay.set(true);
    error.set(null);
    this.dispatch("can-play", { trigger: event });
  }
  Pc(event) {
    const { canPlay, error } = this.$state;
    canPlay.set(false);
    error.set(event);
    this.dispatch("error", { trigger: event });
  }
  Oc() {
    const { video, canPlay } = this.$state, { duration } = this.v.$state, { pointerRate } = this.Fc, media = video(), canUpdate = canPlay() && media && Number.isFinite(duration()) && Number.isFinite(pointerRate());
    if (canUpdate) {
      media.currentTime = pointerRate() * duration();
    }
  }
}
__decorateClass$c([
  prop
], SliderVideo.prototype, "video", 1);

function padNumberWithZeroes(num, expectedLength) {
  const str = String(num);
  const actualLength = str.length;
  const shouldPad = actualLength < expectedLength;
  if (shouldPad) {
    const padLength = expectedLength - actualLength;
    const padding = `0`.repeat(padLength);
    return `${padding}${num}`;
  }
  return str;
}
function parseTime(duration) {
  const hours = Math.trunc(duration / 3600);
  const minutes = Math.trunc(duration % 3600 / 60);
  const seconds = Math.trunc(duration % 60);
  const fraction = Number((duration - Math.trunc(duration)).toPrecision(3));
  return {
    hours,
    minutes,
    seconds,
    fraction
  };
}
function formatTime(duration, shouldPadHours = false, shouldPadMinutes = false, shouldAlwaysShowHours = false) {
  const { hours, minutes, seconds } = parseTime(duration);
  const paddedHours = shouldPadHours ? padNumberWithZeroes(hours, 2) : hours;
  const paddedMinutes = shouldPadMinutes ? padNumberWithZeroes(minutes, 2) : minutes;
  const paddedSeconds = padNumberWithZeroes(seconds, 2);
  if (hours > 0 || shouldAlwaysShowHours) {
    return `${paddedHours}:${paddedMinutes}:${paddedSeconds}`;
  }
  return `${paddedMinutes}:${paddedSeconds}`;
}
function formatSpokenTime(duration) {
  const spokenParts = [];
  const { hours, minutes, seconds } = parseTime(duration);
  if (hours > 0) {
    spokenParts.push(`${hours} hour`);
  }
  if (minutes > 0) {
    spokenParts.push(`${minutes} min`);
  }
  if (seconds > 0 || spokenParts.length === 0) {
    spokenParts.push(`${seconds} sec`);
  }
  return spokenParts.join(" ");
}

var __defProp$b = Object.defineProperty;
var __getOwnPropDesc$b = Object.getOwnPropertyDescriptor;
var __decorateClass$b = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$b(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$b(target, key, result);
  return result;
};
class SliderValue extends Component {
  static {
    this.props = {
      type: "current",
      format: null,
      showHours: false,
      padHours: false,
      padMinutes: false,
      decimalPlaces: 2
    };
  }
  onSetup() {
    this.Fc = useState(Slider.state);
    this.Qc = useContext(sliderValueFormatContext);
    this.Rc = computed(this.getValueText.bind(this));
  }
  getValueText() {
    const { type, format, decimalPlaces, padHours, padMinutes, showHours } = this.$props;
    const { value: sliderValue, pointerValue, min, max } = this.Fc;
    const value = type() === "current" ? sliderValue() : pointerValue();
    if (format() === "percent") {
      const range = max() - min();
      const percent = value / range * 100;
      return (this.Qc.percent ?? round)(percent, decimalPlaces()) + "\uFE6A";
    } else if (format() === "time") {
      return (this.Qc.time ?? formatTime)(value, padHours(), padMinutes(), showHours());
    } else {
      return this.Qc.value?.(value) ?? value.toFixed(2);
    }
  }
}
__decorateClass$b([
  method
], SliderValue.prototype, "getValueText", 1);

class SliderPreview extends Component {
  static {
    this.props = {
      offset: 0,
      noClamp: false
    };
  }
  onSetup() {
    this.Fc = useContext(sliderContext);
    const { active } = useState(Slider.state);
    this.setAttributes({
      "data-visible": active
    });
  }
  onAttach(el) {
    Object.assign(el.style, {
      position: "absolute",
      top: 0,
      left: 0,
      width: "max-content"
    });
  }
  onConnect(el) {
    const { Ec: _preview } = this.Fc;
    _preview.set(el);
    onDispose(() => _preview.set(null));
    effect(this.Sc.bind(this));
    const resize = new ResizeObserver(this.Sc.bind(this));
    resize.observe(el);
    onDispose(() => resize.disconnect());
  }
  Sc() {
    const { Dc: _disabled, Cc: _orientation } = this.Fc;
    if (_disabled())
      return;
    const el = this.el, { offset, noClamp } = this.$props;
    updateSliderPreviewPlacement(el, {
      clamp: !noClamp(),
      offset: offset(),
      orientation: _orientation()
    });
  }
}
function updateSliderPreviewPlacement(el, {
  clamp,
  offset,
  orientation
}) {
  const { width, height } = el.getBoundingClientRect(), styles = {
    top: null,
    right: null,
    bottom: null,
    left: null
  };
  styles[orientation === "horizontal" ? "bottom" : "left"] = `calc(100% + var(--media-slider-preview-offset, ${offset}px))`;
  if (orientation === "horizontal") {
    const widthHalf = width / 2;
    if (!clamp) {
      styles.left = `calc(var(--slider-pointer) - ${widthHalf}px)`;
    } else {
      const leftClamp = `max(0px, calc(var(--slider-pointer) - ${widthHalf}px))`, rightClamp = `calc(100% - ${width}px)`;
      styles.left = `min(${leftClamp}, ${rightClamp})`;
    }
  } else {
    const heightHalf = height / 2;
    if (!clamp) {
      styles.bottom = `calc(var(--slider-pointer) - ${heightHalf}px)`;
    } else {
      const topClamp = `max(${heightHalf}px, calc(var(--slider-pointer) - ${heightHalf}px))`, bottomClamp = `calc(100% - ${height}px)`;
      styles.bottom = `min(${topClamp}, ${bottomClamp})`;
    }
  }
  Object.assign(el.style, styles);
}

class VolumeSlider extends Component {
  constructor() {
    super(...arguments);
    this.Vc = functionThrottle(this.Wc.bind(this), 25);
  }
  static {
    this.props = SliderController.props;
  }
  static {
    this.state = sliderState;
  }
  onSetup() {
    this.v = useMediaContext();
    new SliderController({
      rc: this.$props.step,
      sc: this.$props.keyStep,
      uc: this.$props.disabled,
      tc: Math.round,
      oc: this.oc.bind(this),
      pc: this.pc.bind(this),
      Tc: this.Tc.bind(this),
      Uc: this.Uc.bind(this)
    }).attach(this);
    effect(this.ub.bind(this));
  }
  onAttach(el) {
    el.setAttribute("data-media-volume-slider", "");
    setAttributeIfEmpty(el, "aria-label", "Media volume");
    const { canSetVolume } = this.v.$state;
    this.setAttributes({
      "data-supported": canSetVolume,
      "aria-hidden": $ariaBool(() => !canSetVolume())
    });
  }
  oc() {
    const { value } = this.$state;
    return Math.round(value());
  }
  pc() {
    const { value, max } = this.$state;
    return round(value() / max() * 100, 2) + "%";
  }
  ub() {
    const { muted, volume } = this.v.$state;
    const newValue = muted() ? 0 : volume() * 100;
    this.$state.value.set(newValue);
    this.dispatch("value-change", { detail: newValue });
  }
  Wc(event) {
    if (!event.trigger)
      return;
    const mediaVolume = round(event.detail / 100, 3);
    this.v.remote.changeVolume(mediaVolume, event);
  }
  Uc(event) {
    this.Vc(event);
  }
  Tc(event) {
    this.Vc(event);
  }
}

class TimeSlider extends Component {
  constructor() {
    super();
    this.$c = signal(null);
    this._c = false;
    new SliderController({
      jd: true,
      rc: this.rc.bind(this),
      sc: this.sc.bind(this),
      uc: this.uc.bind(this),
      tc: this.tc,
      oc: this.oc.bind(this),
      pc: this.pc.bind(this),
      ad: this.ad.bind(this),
      Tc: this.Tc.bind(this),
      Zc: this.Zc.bind(this),
      Uc: this.Uc.bind(this)
    });
  }
  static {
    this.props = {
      ...SliderController.props,
      pauseWhileDragging: false,
      seekingRequestThrottle: 100
    };
  }
  static {
    this.state = sliderState;
  }
  onSetup() {
    this.v = useMediaContext();
    provideContext(sliderValueFormatContext, {
      value: this.bd.bind(this),
      time: this.cd.bind(this)
    });
    this.setAttributes({
      "data-chapters": this.dd.bind(this)
    });
    this.setStyles({
      "--slider-progress": this.ed.bind(this)
    });
    effect(this.vb.bind(this));
    effect(this.fd.bind(this));
  }
  onAttach(el) {
    el.setAttribute("data-media-time-slider", "");
    setAttributeIfEmpty(el, "aria-label", "Media time");
  }
  onConnect(el) {
    effect(this.gd.bind(this));
    observeActiveTextTrack(this.v.textTracks, "chapters", this.$c.set);
  }
  ed() {
    const { bufferedEnd, duration } = this.v.$state;
    return round(Math.min(bufferedEnd() / Math.max(duration(), 1), 1) * 100, 3) + "%";
  }
  dd() {
    const { duration } = this.v.$state;
    return this.$c()?.cues.length && Number.isFinite(duration()) && duration() > 0;
  }
  fd() {
    this.Yc = functionThrottle(
      this._a.bind(this),
      this.$props.seekingRequestThrottle()
    );
  }
  vb() {
    const { currentTime } = this.v.$state, { value, dragging } = this.$state, newValue = this.hd(currentTime());
    if (!peek(dragging)) {
      value.set(newValue);
      this.dispatch("value-change", { detail: newValue });
    }
  }
  gd() {
    const player = this.v.player.el, { Ec: _preview } = useContext(sliderContext);
    player && _preview() && setAttribute(player, "data-preview", this.$state.active());
  }
  _a(time, event) {
    this.v.remote.seeking(time, event);
  }
  id(time, percent, event) {
    this.Yc.cancel();
    const { live } = this.v.$state;
    if (live() && percent >= 99) {
      this.v.remote.seekToLiveEdge(event);
      return;
    }
    this.v.remote.seek(time, event);
  }
  ad(event) {
    const { pauseWhileDragging } = this.$props;
    if (pauseWhileDragging()) {
      const { paused } = this.v.$state;
      this._c = !paused();
      this.v.remote.pause(event);
    }
  }
  Tc(event) {
    this.Yc(this.Xc(event.detail), event);
  }
  Zc(event) {
    const percent = event.detail;
    this.id(this.Xc(percent), percent, event);
    const { pauseWhileDragging } = this.$props;
    if (pauseWhileDragging() && this._c) {
      this.v.remote.play(event);
      this._c = false;
    }
  }
  Uc(event) {
    const { dragging } = this.$state;
    if (dragging() || !event.trigger)
      return;
    this.Zc(event);
  }
  // -------------------------------------------------------------------------------------------
  // Props
  // -------------------------------------------------------------------------------------------
  rc() {
    const value = this.$props.step() / this.v.$state.duration() * 100;
    return Number.isFinite(value) ? value : 1;
  }
  sc() {
    const value = this.$props.keyStep() / this.v.$state.duration() * 100;
    return Number.isFinite(value) ? value : 1;
  }
  tc(value) {
    return round(value, 3);
  }
  uc() {
    const { canSeek } = this.v.$state;
    return this.$props.disabled() || !canSeek();
  }
  // -------------------------------------------------------------------------------------------
  // ARIA
  // -------------------------------------------------------------------------------------------
  oc() {
    const { value } = this.$state;
    return Math.round(value());
  }
  pc() {
    const time = this.Xc(this.$state.value()), { duration } = this.v.$state;
    return Number.isFinite(time) ? `${formatSpokenTime(time)} out of ${formatSpokenTime(duration())}` : "live";
  }
  // -------------------------------------------------------------------------------------------
  // Format
  // -------------------------------------------------------------------------------------------
  Xc(percent) {
    const { duration } = this.v.$state;
    return Math.round(percent / 100 * duration());
  }
  hd(time) {
    const { liveEdge, duration } = this.v.$state, rate = Math.max(0, Math.min(1, liveEdge() ? 1 : Math.min(time, duration()) / duration()));
    return Number.isNaN(rate) ? 0 : Number.isFinite(rate) ? rate * 100 : 100;
  }
  bd(percent) {
    const time = this.Xc(percent), { live, duration } = this.v.$state;
    return Number.isFinite(time) ? (live() ? time - duration() : time).toFixed(0) : "LIVE";
  }
  cd(percent, padHours, padMinutes, showHours) {
    const time = this.Xc(percent), { live, duration } = this.v.$state, value = live() ? time - duration() : time;
    return Number.isFinite(time) ? `${value < 0 ? "-" : ""}${formatTime(
      Math.abs(value),
      padHours,
      isNull(padMinutes) ? Math.abs(value) >= 3600 : padMinutes,
      showHours
    )}` : "LIVE";
  }
}

var __defProp$a = Object.defineProperty;
var __getOwnPropDesc$a = Object.getOwnPropertyDescriptor;
var __decorateClass$a = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$a(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$a(target, key, result);
  return result;
};
class SliderChapters extends Component {
  constructor() {
    super(...arguments);
    this.ld = null;
    this.$c = null;
    this.qd = signal(null);
    this.kd = [];
    this.oa = [];
    this.rd = signal(this.oa);
    this.md = signal(-1);
    this.nd = signal(-1);
    this.sd = 0;
    this.Hd = animationFrameThrottle((bufferedPercent) => {
      let percent;
      for (let i = this.sd; i < this.kd.length; i++) {
        percent = this.ud(this.oa[i], bufferedPercent);
        this.kd[i].style.setProperty("--chapter-progress", percent + "%");
        if (percent < 100) {
          this.sd = i;
          break;
        }
      }
    });
    this.Id = computed(this.Jd.bind(this));
  }
  static {
    this.props = {
      disabled: false
    };
  }
  get cues() {
    return this.rd();
  }
  get activeCue() {
    return this.oa[this.md()] || null;
  }
  get activePointerCue() {
    return this.oa[this.nd()] || null;
  }
  onSetup() {
    this.v = useMediaContext();
    this.od = useState(TimeSlider.state);
  }
  onAttach(el) {
    const onChapterChange = this.zd.bind(this);
    observeActiveTextTrack(this.v.textTracks, "chapters", onChapterChange);
    effect(this.vd.bind(this));
  }
  onConnect() {
    onDispose(this.j.bind(this));
  }
  setRefs(refs) {
    this.kd = refs;
    this.pd?.dispose();
    if (this.kd.length === 1) {
      const el = this.kd[0];
      el.style.width = "100%";
      el.style.setProperty("--chapter-fill", "var(--slider-fill)");
      el.style.setProperty("--chapter-progress", "var(--slider-progress)");
    } else if (this.kd.length > 0) {
      scoped(() => this.Y(), this.pd = createScope());
    }
  }
  wd(track) {
    if (peek(this.qd) === track)
      return;
    this.qd.set(track);
    this.j();
    this.Ad();
  }
  Ad() {
    const track = this.qd();
    if (!track?.cues.length || this.oa.length)
      return;
    const chapters = this.Bd(track.cues);
    this.oa = chapters;
    this.rd.set(chapters);
    if (chapters[0].startTime === 0) {
      this.md.set(0);
    }
  }
  j() {
    if (!this.oa.length)
      return;
    this.kd = [];
    this.oa = [];
    this.rd.set(this.oa);
    this.md.set(-1);
    this.nd.set(-1);
    this.sd = 0;
    this.pd?.dispose();
  }
  Y() {
    this.Cd();
    effect(this.Dd.bind(this));
    effect(this.Ed.bind(this));
    effect(this.Fd.bind(this));
  }
  Gd() {
    return this.oa[this.oa.length - 1].endTime;
  }
  Cd() {
    let cue, endTime = this.Gd();
    for (let i = 0; i < this.oa.length; i++) {
      cue = this.oa[i];
      this.kd[i].style.width = round((cue.endTime - cue.startTime) / endTime * 100, 3) + "%";
    }
  }
  Dd() {
    const { liveEdge } = this.v.$state;
    let { fillPercent, value } = this.od, prevActiveIndex = peek(this.md), currentChapter = this.oa[prevActiveIndex], currentActiveIndex = this.xd(
      currentChapter.startTime <= peek(value) ? prevActiveIndex : 0,
      fillPercent()
    );
    if (liveEdge()) {
      this.td(0, this.oa.length, "100%");
    } else if (currentActiveIndex > prevActiveIndex) {
      this.td(prevActiveIndex, currentActiveIndex, "100%");
    } else if (currentActiveIndex < prevActiveIndex) {
      this.td(currentActiveIndex + 1, prevActiveIndex + 1, "0%");
    }
    const percent = liveEdge() ? "100%" : this.ud(this.oa[currentActiveIndex], fillPercent()) + "%";
    this.yd(this.kd[currentActiveIndex], percent);
    this.md.set(currentActiveIndex);
  }
  Ed() {
    let { pointing, pointerPercent } = this.od;
    if (!pointing()) {
      this.nd.set(-1);
      return;
    }
    const activeIndex = this.xd(0, pointerPercent());
    this.nd.set(activeIndex);
  }
  td(start, end, percent) {
    for (let i = start; i < end; i++)
      this.yd(this.kd[i], percent);
  }
  yd(ref, percent) {
    ref.style.setProperty("--chapter-fill", percent);
  }
  xd(startIndex, percent) {
    let chapterPercent = 0;
    for (let i = startIndex; i < this.oa.length; i++) {
      chapterPercent = this.ud(this.oa[i], percent);
      if (chapterPercent >= 0 && chapterPercent < 100)
        return i;
    }
    return 0;
  }
  Fd() {
    this.Hd(this.Id());
  }
  Jd() {
    const { bufferedEnd, duration } = this.v.$state;
    return round(Math.min(bufferedEnd() / Math.max(duration(), 1), 1), 3) * 100;
  }
  ud(cue, percent) {
    const lastChapter = this.oa[this.oa.length - 1], startPercent = cue.startTime / lastChapter.endTime * 100, endPercent = cue.endTime / lastChapter.endTime * 100;
    return Math.max(
      0,
      round(
        percent >= endPercent ? 100 : (percent - startPercent) / (endPercent - startPercent) * 100,
        3
      )
    );
  }
  Bd(cues) {
    const chapters = [];
    if (cues[0].startTime !== 0) {
      chapters.push(new window.VTTCue(0, cues[0].startTime, ""));
    }
    for (let i = 0; i < cues.length - 1; i++) {
      const currentCue = cues[i], nextCue = cues[i + 1];
      chapters.push(currentCue);
      if (nextCue) {
        const timeDiff = nextCue.startTime - currentCue.endTime;
        if (timeDiff > 0) {
          chapters.push(new window.VTTCue(currentCue.endTime, currentCue.endTime + timeDiff, ""));
        }
      }
    }
    chapters.push(cues[cues.length - 1]);
    return chapters;
  }
  zd(track) {
    this.$c = track;
    this.vd();
  }
  vd() {
    if (!this.scope)
      return;
    const { disabled } = this.$props;
    if (disabled())
      return;
    this.wd(this.$c);
    this.ld = this.Kd()?.querySelector('[data-part="chapter-title"]') || null;
    if (this.ld)
      effect(this.Ld.bind(this));
    return () => {
      this.wd(null);
      if (this.ld) {
        this.ld.textContent = "";
        this.ld = null;
      }
    };
  }
  Ld() {
    const cue = this.activePointerCue || this.activeCue;
    if (this.ld)
      this.ld.textContent = cue?.text || "";
  }
  Kd() {
    let node = this.el;
    while (node && node.getAttribute("role") !== "slider") {
      node = node.parentElement;
    }
    return node;
  }
}
__decorateClass$a([
  prop
], SliderChapters.prototype, "cues", 1);
__decorateClass$a([
  prop
], SliderChapters.prototype, "activeCue", 1);
__decorateClass$a([
  prop
], SliderChapters.prototype, "activePointerCue", 1);
__decorateClass$a([
  method
], SliderChapters.prototype, "setRefs", 1);

const menuContext = createContext();

const FOCUSABLE_ELEMENTS_SELECTOR = /* @__PURE__ */ [
  "a[href]",
  "[tabindex]",
  "input",
  "select",
  "button"
].map((selector) => `${selector}:not([aria-hidden])`).join(",");
const VALID_KEYS = /* @__PURE__ */ new Set([
  "Escape",
  "Tab",
  "ArrowUp",
  "ArrowDown",
  "Home",
  "PageUp",
  "End",
  "PageDown",
  "Enter",
  " "
]);
class MenuFocusController {
  constructor(_delegate) {
    this.Ie = 0;
    this.qj = null;
    this.pj = [];
    this.vc = _delegate;
  }
  get d() {
    return this.pj;
  }
  ee(el) {
    listenEvent(el, "focus", this.yi.bind(this));
    this.qj = el;
    onDispose(() => {
      this.qj = null;
    });
    return this;
  }
  bc() {
    if (!this.qj)
      return;
    this.Y();
    listenEvent(this.qj, "keyup", this.Xa.bind(this));
    listenEvent(this.qj, "keydown", this.Ya.bind(this));
    onDispose(() => {
      this.Ie = 0;
      this.pj = [];
    });
  }
  Y() {
    this.Ie = 0;
    this.pj = this.uj();
  }
  we(index = this.tj()) {
    const element = this.pj[index], container = this.vc.qe();
    if (element && container) {
      requestAnimationFrame(() => {
        container.scrollTop = element.offsetTop - container.offsetHeight / 2 + element.offsetHeight / 2;
      });
    }
  }
  rj(index) {
    this.Ie = index;
    this.pj[index]?.focus();
    this.we(index);
  }
  tj() {
    return this.pj.findIndex((el) => el.getAttribute("aria-checked") === "true");
  }
  yi() {
    this.Y();
    setTimeout(() => {
      const index = this.tj();
      this.rj(index >= 0 ? index : 0);
    }, 100);
  }
  Xa(event) {
    if (!VALID_KEYS.has(event.key))
      return;
    event.stopPropagation();
    event.preventDefault();
  }
  Ya(event) {
    if (!VALID_KEYS.has(event.key))
      return;
    event.stopPropagation();
    event.preventDefault();
    switch (event.key) {
      case "Escape":
        this.vc.re(event);
        break;
      case "Tab":
        this.rj(this.sj(event.shiftKey ? -1 : 1));
        break;
      case "ArrowUp":
        this.rj(this.sj(-1));
        break;
      case "ArrowDown":
        this.rj(this.sj(1));
        break;
      case "Home":
      case "PageUp":
        this.rj(0);
        break;
      case "End":
      case "PageDown":
        this.rj(this.pj.length - 1);
        break;
    }
  }
  sj(delta) {
    let index = this.Ie;
    do {
      index = (index + delta + this.pj.length) % this.pj.length;
    } while (this.pj[index]?.offsetParent === null);
    return index;
  }
  uj() {
    if (!this.qj)
      return [];
    const focusableElements = this.qj.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR), elements = [];
    const is = (node) => {
      return node.getAttribute("role") === "menu";
    };
    for (const el of focusableElements) {
      if (el instanceof HTMLElement && el.offsetParent !== null && // does not have display: none
      isElementParent(this.qj, el, is)) {
        elements.push(el);
      }
    }
    return elements;
  }
}

var __defProp$9 = Object.defineProperty;
var __getOwnPropDesc$9 = Object.getOwnPropertyDescriptor;
var __decorateClass$9 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$9(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$9(target, key, result);
  return result;
};
let idCount = 0;
class Menu extends Component {
  constructor() {
    super();
    this.Md = signal(false);
    this.Dc = signal(false);
    this.Ub = signal(null);
    this.Vb = signal(null);
    this.Vd = signal(false);
    this.Od = /* @__PURE__ */ new Set();
    this.Pd = null;
    this.me = this.ne.bind(this);
    this.ke = this.oe.bind(this);
    this.le = this.pe.bind(this);
    const { showDelay } = this.$props;
    this.Qd = new Popper({
      Ub: this.Ub,
      Vb: this.Vb,
      ac: showDelay,
      bc: (trigger, show, hide) => {
        onPress(trigger, (event) => {
          if (this.Md())
            hide(event);
          else
            show(event);
        });
        const closeTarget = this.be();
        if (closeTarget) {
          onPress(closeTarget, (event) => {
            event.stopPropagation();
            hide(event);
          });
        }
      },
      R: this.ce.bind(this)
    });
  }
  static {
    this.props = {
      showDelay: 0
    };
  }
  get triggerElement() {
    return this.Ub();
  }
  get contentElement() {
    return this.Vb();
  }
  get isSubmenu() {
    return !!this.Td;
  }
  onSetup() {
    this.v = useMediaContext();
    const currentIdCount = ++idCount;
    this.Rd = `media-menu-${currentIdCount}`;
    this.Sd = `media-menu-button-${currentIdCount}`;
    this.Nd = new MenuFocusController({
      qe: this.de.bind(this),
      re: this.close.bind(this)
    });
    if (hasProvidedContext(menuContext)) {
      this.Td = useContext(menuContext);
    }
    this.setAttributes({
      "data-open": this.Md,
      "data-submenu": this.isSubmenu,
      "data-disabled": this.uc.bind(this)
    });
    provideContext(menuContext, {
      se: this.Ub,
      Md: this.Md,
      te: signal(""),
      Wd: this.Wd.bind(this),
      Xd: this.Xd.bind(this),
      Yd: this.Yd.bind(this),
      Zd: this.Zd.bind(this),
      _d: this._d.bind(this),
      Ud: this.Ud.bind(this)
    });
  }
  onAttach(el) {
    el.style.setProperty("display", "contents");
    this.Nd.ee(el);
  }
  onConnect(el) {
    effect(this.fe.bind(this));
    if (this.isSubmenu)
      this.Td?.Ud(this);
    requestAnimationFrame(() => {
      this.eb();
    });
  }
  onDestroy() {
    this.Ub.set(null);
    this.Vb.set(null);
    this.Pd = null;
  }
  fe() {
    const expanded = this.ge();
    this.eb();
    this.$d(expanded);
    if (!expanded)
      return;
    effect(() => {
      const { height } = this.v.$state, content = this.Vb();
      content && setStyle(content, "--player-height", height() + "px");
    });
    this.Nd.bc();
    this.listen("pointerup", this.he.bind(this));
    listenEvent(window, "pointerup", this.ie.bind(this));
  }
  Xd(button) {
    const el = button.el, isMenuItem = this.isSubmenu, isARIADisabled = $ariaBool(this.uc.bind(this));
    setAttributeIfEmpty(el, "tabindex", isMenuItem ? "-1" : "0");
    setAttributeIfEmpty(el, "role", isMenuItem ? "menuitem" : "button");
    setAttribute(el, "id", this.Sd);
    setAttribute(el, "aria-haspopup", "menu");
    setAttribute(el, "aria-expanded", "false");
    setAttribute(el, "data-submenu", this.isSubmenu);
    if (!this.isSubmenu) {
      this.ae(el);
    }
    const watchAttrs = () => {
      setAttribute(el, "data-open", this.Md());
      setAttribute(el, "aria-disabled", isARIADisabled());
    };
    effect(watchAttrs);
    this.Ub.set(el);
    onDispose(() => {
      this.Ub.set(null);
    });
  }
  Yd(items) {
    const el = items.el;
    el.style.setProperty("display", "none");
    setAttribute(el, "id", this.Rd);
    setAttributeIfEmpty(el, "role", "menu");
    setAttributeIfEmpty(el, "tabindex", "-1");
    setAttribute(el, "data-submenu", this.isSubmenu);
    this.Vb.set(el);
    onDispose(() => this.Vb.set(null));
    if (!this.isSubmenu) {
      this.ae(el);
    }
    const watchAttrs = () => {
      setAttribute(el, "data-open", this.Md());
    };
    effect(watchAttrs);
    this.Nd.ee(el);
    this.$d(false);
    requestAnimationFrame(this.eb.bind(this));
  }
  Zd(observer) {
    this.Pd = observer;
  }
  ae(el) {
    listenEvent(el, "click", (e) => e.stopPropagation());
    listenEvent(el, "pointerup", (e) => e.stopPropagation());
  }
  $d(expanded) {
    const content = peek(this.Vb);
    if (content)
      setAttribute(content, "aria-hidden", ariaBool$1(!expanded));
  }
  _d(disabled) {
    this.Vd.set(disabled);
  }
  ce(isExpanded, event) {
    event?.stopPropagation();
    if (this.Md() === isExpanded)
      return;
    if (this.uc()) {
      if (isExpanded)
        this.Qd.hide(event);
      return;
    }
    const trigger = this.Ub(), content = this.Vb();
    if (trigger) {
      setAttribute(trigger, "aria-controls", isExpanded && this.Rd);
      setAttribute(trigger, "aria-expanded", ariaBool$1(isExpanded));
    }
    if (content)
      setAttribute(content, "aria-labelledby", isExpanded && this.Sd);
    this.Md.set(isExpanded);
    this.je(event);
    tick();
    if (isKeyboardEvent(event)) {
      if (isExpanded) {
        content?.focus();
      } else {
        trigger?.focus();
      }
      for (const el of [this.el, content]) {
        el && el.setAttribute("data-keyboard", "");
      }
    } else {
      for (const el of [this.el, content]) {
        el && el.removeAttribute("data-keyboard");
      }
    }
    this.dispatch(isExpanded ? "open" : "close", { trigger: event });
    if (isExpanded) {
      if (!this.isSubmenu && this.v.activeMenu !== this) {
        this.v.activeMenu?.close(event);
        this.v.activeMenu = this;
      }
      this.Pd?.ue?.(event);
    } else {
      if (this.isSubmenu) {
        setTimeout(() => {
          for (const el of this.Od)
            el.close(event);
        }, 300);
      } else {
        this.v.activeMenu = null;
      }
      this.Pd?.ve?.(event);
    }
    if (isExpanded && !isKeyboardEvent(event)) {
      requestAnimationFrame(() => {
        this.Nd.Y();
        setTimeout(() => {
          this.Nd.we();
        }, 100);
      });
    }
  }
  ge() {
    return !this.uc() && this.Md();
  }
  uc() {
    return this.Dc() || this.Vd();
  }
  Wd(disabled) {
    this.Dc.set(disabled);
  }
  he(event) {
    event.stopPropagation();
  }
  ie(event) {
    if (this.isSubmenu)
      return setTimeout(this.close.bind(this, event), 800);
    else
      this.close(event);
  }
  be() {
    const target = this.el.querySelector('[data-part="close-target"]');
    return isElementParent(this.el, target, (node) => node.getAttribute("role") === "menu") ? target : null;
  }
  de() {
    if (!this.isSubmenu) {
      const content = peek(this.Vb);
      return content || null;
    } else {
      let el = this.el;
      while (el && el.tagName !== "media-menu" && el.hasAttribute("data-submenu")) {
        el = el.parentNode;
      }
      return el;
    }
  }
  je(trigger) {
    if (this.isSubmenu)
      return;
    if (this.Md())
      this.v.remote.pauseControls(trigger);
    else
      this.v.remote.resumeControls(trigger);
  }
  Ud(menu) {
    this.Od.add(menu);
    listenEvent(menu, "open", this.ke);
    listenEvent(menu, "close", this.le);
    onDispose(this.me);
  }
  ne(menu) {
    this.Od.delete(menu);
  }
  oe(event) {
    for (const target of this.Od) {
      if (target !== event.target) {
        for (const el of [target.el, target.triggerElement]) {
          el?.setAttribute("aria-hidden", "true");
        }
      }
    }
    requestAnimationFrame(() => {
      this.eb();
    });
  }
  pe() {
    for (const target of this.Od) {
      for (const el of [target.el, target.triggerElement]) {
        el?.setAttribute("aria-hidden", "false");
      }
    }
    requestAnimationFrame(() => {
      this.eb();
    });
  }
  eb() {
    const content = peek(this.Vb);
    if (!content || false)
      return;
    let { paddingTop, paddingBottom, borderTopWidth, borderBottomWidth } = getComputedStyle(content), height = parseFloat(paddingTop) + parseFloat(paddingBottom) + parseFloat(borderTopWidth) + parseFloat(borderBottomWidth), children = [...content.children];
    for (const child of children) {
      if (child instanceof HTMLElement && child.style.display === "contents") {
        children.push(...child.children);
      } else {
        height += child.offsetHeight || 0;
      }
    }
    requestAnimationFrame(() => {
      if (!content)
        return;
      setAttribute(content, "data-resizing", "");
      setTimeout(() => {
        if (content)
          setAttribute(content, "data-resizing", false);
      }, 400);
      setStyle(content, "--menu-height", height + "px");
    });
  }
  open(trigger) {
    if (peek(this.Md))
      return;
    this.Qd.show(trigger);
    tick();
  }
  close(trigger) {
    if (!peek(this.Md))
      return;
    this.Qd.hide(trigger);
    tick();
  }
}
__decorateClass$9([
  prop
], Menu.prototype, "triggerElement", 1);
__decorateClass$9([
  prop
], Menu.prototype, "contentElement", 1);
__decorateClass$9([
  prop
], Menu.prototype, "isSubmenu", 1);
__decorateClass$9([
  method
], Menu.prototype, "open", 1);
__decorateClass$9([
  method
], Menu.prototype, "close", 1);

var __defProp$8 = Object.defineProperty;
var __getOwnPropDesc$8 = Object.getOwnPropertyDescriptor;
var __decorateClass$8 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$8(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$8(target, key, result);
  return result;
};
class MenuButton extends Component {
  constructor() {
    super();
    new FocusVisibleController();
  }
  static {
    this.props = {
      disabled: false
    };
  }
  get expanded() {
    return this.xe?.Md() ?? false;
  }
  onSetup() {
    this.xe = useContext(menuContext);
  }
  onAttach(el) {
    this.xe.Xd(this);
    effect(this.yc.bind(this));
  }
  onConnect(el) {
    const hint = Array.from(el.querySelectorAll('[data-part="hint"]')).pop();
    if (hint) {
      effect(() => {
        const text = this.xe.te();
        if (text)
          hint.textContent = text;
      });
    }
    onPress(el, (trigger) => {
      this.dispatch("select", { trigger });
    });
  }
  yc() {
    this.xe._d(this.$props.disabled());
  }
}
__decorateClass$8([
  prop
], MenuButton.prototype, "expanded", 1);

class MenuPortal extends Component {
  constructor() {
    super(...arguments);
    this.b = null;
  }
  static {
    this.props = {
      container: null,
      disabled: false
    };
  }
  onSetup() {
    this.v = useMediaContext();
    provideContext(menuPortalContext, {
      dc: this.ze.bind(this)
    });
  }
  onAttach(el) {
    el.style.setProperty("display", "contents");
  }
  // Need this so connect scope is defined.
  onConnect(el) {
  }
  onDestroy() {
    this.b?.remove();
    this.b = null;
  }
  ze(el) {
    this.ye(false);
    this.b = el;
    requestScopedAnimationFrame(() => {
      requestScopedAnimationFrame(() => {
        if (!this.connectScope)
          return;
        effect(this.yc.bind(this));
      });
    });
  }
  yc() {
    const { fullscreen } = this.v.$state, { disabled } = this.$props, _disabled = disabled();
    this.ye(_disabled === "fullscreen" ? !fullscreen() : !_disabled);
  }
  ye(shouldPortal) {
    if (!this.b)
      return;
    let container = this.Ae(this.$props.container());
    if (!container)
      return;
    const isPortalled = this.b.parentElement === container;
    setAttribute(this.b, "data-portal", shouldPortal);
    if (shouldPortal) {
      if (!isPortalled) {
        this.b.remove();
        container.append(this.b);
      }
    } else if (isPortalled && this.b.parentElement === container) {
      this.b.remove();
      this.el?.append(this.b);
    }
  }
  Ae(selector) {
    if (selector instanceof HTMLElement)
      return selector;
    return selector ? document.querySelector(selector) : document.body;
  }
}
const menuPortalContext = createContext();

class MenuItems extends Component {
  constructor() {
    super();
    new FocusVisibleController();
    const { placement } = this.$props;
    this.setAttributes({
      "data-placement": placement
    });
  }
  static {
    this.props = {
      placement: null,
      offset: 0,
      alignOffset: 0
    };
  }
  onAttach(el) {
    this.xe = useContext(menuContext);
    this.xe.Yd(this);
    if (hasProvidedContext(menuPortalContext)) {
      const portal = useContext(menuPortalContext);
      if (portal) {
        provideContext(menuPortalContext, null);
        portal.dc(el);
        onDispose(() => portal.dc(null));
      }
    }
  }
  onConnect(el) {
    effect(this.ec.bind(this));
  }
  ec() {
    if (!this.el)
      return;
    const placement = this.$props.placement();
    if (placement) {
      Object.assign(this.el.style, {
        position: "absolute",
        top: 0,
        left: 0,
        width: "max-content"
      });
      const { offset: mainOffset, alignOffset } = this.$props;
      return autoPlacement(this.el, this.cc(), placement, {
        offsetVarName: "media-menu",
        xOffset: alignOffset(),
        yOffset: mainOffset()
      });
    } else {
      this.el.removeAttribute("style");
      this.el.style.display = "none";
    }
  }
  cc() {
    return this.xe.se();
  }
}

const radioControllerContext = createContext();

class RadioGroupController extends ViewController {
  constructor() {
    super(...arguments);
    this.vj = /* @__PURE__ */ new Set();
    this.He = signal("");
    this.x = null;
    this.zj = this.R.bind(this);
  }
  get Be() {
    return Array.from(this.vj).map((radio) => radio.He());
  }
  get value() {
    return this.He();
  }
  set value(value) {
    this.R(value);
  }
  onSetup() {
    provideContext(radioControllerContext, {
      add: this.xj.bind(this),
      remove: this.yj.bind(this)
    });
  }
  onAttach(el) {
    const isMenuItem = hasProvidedContext(menuContext);
    if (!isMenuItem)
      setAttributeIfEmpty(el, "role", "radiogroup");
    this.setAttributes({ value: this.He });
  }
  onDestroy() {
    this.vj.clear();
  }
  xj(radio) {
    if (this.vj.has(radio))
      return;
    this.vj.add(radio);
    radio.Ee = this.zj;
    radio.De(radio.He() === this.He());
  }
  yj(radio) {
    radio.Ee = null;
    this.vj.delete(radio);
  }
  R(newValue, trigger) {
    const currentValue = peek(this.He);
    if (!newValue || newValue === currentValue)
      return;
    const currentRadio = this.wj(currentValue), newRadio = this.wj(newValue);
    currentRadio?.De(false, trigger);
    newRadio?.De(true, trigger);
    this.He.set(newValue);
    this.Uc?.(newValue, trigger);
  }
  wj(newValue) {
    for (const radio of this.vj) {
      if (newValue === peek(radio.He))
        return radio;
    }
    return null;
  }
}

var __defProp$7 = Object.defineProperty;
var __getOwnPropDesc$7 = Object.getOwnPropertyDescriptor;
var __decorateClass$7 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$7(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$7(target, key, result);
  return result;
};
class RadioGroup extends Component {
  constructor() {
    super();
    this.x = new RadioGroupController();
    this.x.Uc = this.Uc.bind(this);
  }
  static {
    this.props = {
      value: ""
    };
  }
  get values() {
    return this.x.Be;
  }
  get value() {
    return this.x.value;
  }
  onSetup() {
    effect(this.xc.bind(this));
  }
  xc() {
    this.x.value = this.$props.value();
  }
  Uc(value, trigger) {
    const event = this.createEvent("change", { detail: value, trigger });
    this.dispatch(event);
  }
}
__decorateClass$7([
  prop
], RadioGroup.prototype, "values", 1);
__decorateClass$7([
  prop
], RadioGroup.prototype, "value", 1);

var __defProp$6 = Object.defineProperty;
var __getOwnPropDesc$6 = Object.getOwnPropertyDescriptor;
var __decorateClass$6 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$6(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$6(target, key, result);
  return result;
};
class Radio extends Component {
  constructor() {
    super();
    this.Ce = signal(false);
    this.x = {
      He: this.$props.value,
      De: this.De.bind(this),
      Ee: null
    };
    new FocusVisibleController();
  }
  static {
    this.props = {
      value: ""
    };
  }
  get checked() {
    return this.Ce();
  }
  onSetup() {
    this.setAttributes({
      value: this.$props.value,
      "data-checked": this.Ce,
      "aria-checked": $ariaBool(this.Ce)
    });
  }
  onAttach(el) {
    const isMenuItem = hasProvidedContext(menuContext);
    setAttributeIfEmpty(el, "tabindex", isMenuItem ? "-1" : "0");
    setAttributeIfEmpty(el, "role", isMenuItem ? "menuitemradio" : "radio");
    effect(this.xc.bind(this));
  }
  onConnect(el) {
    this.Fe();
    onPress(el, this.ic.bind(this));
    onDispose(this.c.bind(this));
  }
  c() {
    scoped(() => {
      const group = useContext(radioControllerContext);
      group.remove(this.x);
    }, this.connectScope);
  }
  Fe() {
    const group = useContext(radioControllerContext);
    group.add(this.x);
  }
  xc() {
    const { value } = this.$props, newValue = value();
    if (peek(this.Ce)) {
      this.x.Ee?.(newValue);
    }
  }
  ic(event) {
    if (peek(this.Ce))
      return;
    this.R(true, event);
    this.Ge(event);
    this.x.Ee?.(peek(this.$props.value), event);
  }
  De(value, trigger) {
    if (peek(this.Ce) === value)
      return;
    this.R(value, trigger);
  }
  R(value, trigger) {
    this.Ce.set(value);
    this.dispatch("change", { detail: value, trigger });
  }
  Ge(trigger) {
    this.dispatch("select", { trigger });
  }
}
__decorateClass$6([
  prop
], Radio.prototype, "checked", 1);

var __defProp$5 = Object.defineProperty;
var __getOwnPropDesc$5 = Object.getOwnPropertyDescriptor;
var __decorateClass$5 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$5(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$5(target, key, result);
  return result;
};
class ChaptersRadioGroup extends Component {
  constructor() {
    super();
    this.Ie = signal(0);
    this.ia = signal(null);
    this.x = new RadioGroupController();
    this.x.Uc = this.Uc.bind(this);
  }
  static {
    this.props = {
      thumbnails: ""
    };
  }
  get value() {
    return this.x.value;
  }
  get disabled() {
    const track = this.ia();
    return !track || !track.cues.length;
  }
  onSetup() {
    this.v = useMediaContext();
    if (hasProvidedContext(menuContext)) {
      this.xe = useContext(menuContext);
    }
    const { thumbnails } = this.$props;
    this.setAttributes({
      "data-thumbnails": () => !!thumbnails()
    });
  }
  onAttach(el) {
    this.xe?.Zd({
      ue: this.ue.bind(this)
    });
  }
  getOptions() {
    const track = this.ia();
    if (!track)
      return [];
    return track.cues.map((cue, i) => ({
      cue,
      value: i + "",
      label: cue.text,
      startTime: formatTime(cue.startTime, false, cue.startTime >= 3600),
      duration: formatSpokenTime(cue.endTime - cue.startTime)
    }));
  }
  ue() {
    peek(() => this.vb());
  }
  onConnect(el) {
    effect(this.xc.bind(this));
    effect(this.vb.bind(this));
    effect(this.Je.bind(this));
    observeActiveTextTrack(this.v.textTracks, "chapters", this.ia.set);
  }
  xc() {
    this.x.value = this.Ke();
  }
  vb() {
    if (!this.xe?.Md())
      return;
    const track = this.ia();
    if (!track) {
      this.Ie.set(-1);
      return;
    }
    const { currentTime } = this.v.$state, time = currentTime(), activeCueIndex = track.cues.findIndex((cue) => isCueActive(cue, time));
    this.Ie.set(activeCueIndex);
    if (activeCueIndex >= 0) {
      const cue = track.cues[activeCueIndex], radio = this.el.querySelector(`[aria-checked='true']`), playedPercent = (time - cue.startTime) / (cue.endTime - cue.startTime) * 100;
      radio && setStyle(radio, "--progress", round(playedPercent, 3) + "%");
    }
  }
  Je() {
    this.xe?.Wd(this.disabled);
  }
  Ke() {
    return this.Ie() + "";
  }
  Uc(value, trigger) {
    if (this.disabled || !trigger)
      return;
    const index = +value, cues = this.ia()?.cues;
    if (isNumber(index) && cues?.[index]) {
      this.Ie.set(index);
      this.v.remote.seek(cues[index].startTime, trigger);
      this.dispatch("change", { detail: cues[index], trigger });
    }
  }
}
__decorateClass$5([
  prop
], ChaptersRadioGroup.prototype, "value", 1);
__decorateClass$5([
  prop
], ChaptersRadioGroup.prototype, "disabled", 1);
__decorateClass$5([
  method
], ChaptersRadioGroup.prototype, "getOptions", 1);

var __defProp$4 = Object.defineProperty;
var __getOwnPropDesc$4 = Object.getOwnPropertyDescriptor;
var __decorateClass$4 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$4(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$4(target, key, result);
  return result;
};
class AudioRadioGroup extends Component {
  constructor() {
    super();
    this.x = new RadioGroupController();
    this.x.Uc = this.Uc.bind(this);
  }
  static {
    this.props = {
      emptyLabel: "Default"
    };
  }
  get value() {
    return this.x.value;
  }
  get disabled() {
    const { audioTracks } = this.v.$state;
    return audioTracks().length === 0;
  }
  onSetup() {
    this.v = useMediaContext();
    if (hasProvidedContext(menuContext)) {
      this.xe = useContext(menuContext);
    }
  }
  onConnect(el) {
    effect(this.xc.bind(this));
    effect(this.Je.bind(this));
    effect(this.Le.bind(this));
  }
  getOptions() {
    const { audioTracks } = this.v.$state;
    return audioTracks().map((track) => ({
      track,
      label: track.label,
      value: track.label.toLowerCase()
    }));
  }
  xc() {
    this.x.value = this.Ke();
  }
  Le() {
    const { emptyLabel } = this.$props, { audioTrack } = this.v.$state, track = audioTrack();
    this.xe?.te.set(track?.label ?? emptyLabel());
  }
  Je() {
    this.xe?.Wd(this.disabled);
  }
  Ke() {
    const { audioTrack } = this.v.$state;
    const track = audioTrack();
    return track ? track.label.toLowerCase() : "";
  }
  Uc(value, trigger) {
    if (this.disabled)
      return;
    const index = this.v.audioTracks.toArray().findIndex((track) => track.label.toLowerCase() === value);
    if (index >= 0) {
      const track = this.v.audioTracks[index];
      this.v.remote.changeAudioTrack(index, trigger);
      this.dispatch("change", { detail: track, trigger });
    }
  }
}
__decorateClass$4([
  prop
], AudioRadioGroup.prototype, "value", 1);
__decorateClass$4([
  prop
], AudioRadioGroup.prototype, "disabled", 1);
__decorateClass$4([
  method
], AudioRadioGroup.prototype, "getOptions", 1);

var __defProp$3 = Object.defineProperty;
var __getOwnPropDesc$3 = Object.getOwnPropertyDescriptor;
var __decorateClass$3 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$3(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$3(target, key, result);
  return result;
};
class CaptionsRadioGroup extends Component {
  constructor() {
    super();
    this.x = new RadioGroupController();
    this.x.Uc = this.Uc.bind(this);
  }
  static {
    this.props = {
      offLabel: "Off"
    };
  }
  get value() {
    return this.x.value;
  }
  get disabled() {
    const { textTracks } = this.v.$state;
    return textTracks().filter(isTrackCaptionKind).length === 0;
  }
  onSetup() {
    this.v = useMediaContext();
    if (hasProvidedContext(menuContext)) {
      this.xe = useContext(menuContext);
    }
  }
  onConnect(el) {
    super.onConnect?.(el);
    effect(this.xc.bind(this));
    effect(this.Je.bind(this));
    effect(this.Le.bind(this));
  }
  getOptions() {
    const { offLabel } = this.$props, { textTracks } = this.v.$state;
    return [
      { value: "off", label: offLabel },
      ...textTracks().filter(isTrackCaptionKind).map((track) => ({
        track,
        label: track.label,
        value: track.label.toLowerCase()
      }))
    ];
  }
  xc() {
    this.x.value = this.Ke();
  }
  Le() {
    const { offLabel } = this.$props, { textTrack } = this.v.$state, track = textTrack();
    this.xe?.te.set(
      track && isTrackCaptionKind(track) && track.mode === "showing" ? track.label : offLabel()
    );
  }
  Je() {
    this.xe?.Wd(this.disabled);
  }
  Ke() {
    const { textTrack } = this.v.$state, track = textTrack();
    return track && isTrackCaptionKind(track) && track.mode === "showing" ? track.label.toLowerCase() : "off";
  }
  Uc(value, trigger) {
    if (this.disabled)
      return;
    if (value === "off") {
      const track = this.v.textTracks.selected;
      if (track) {
        const index2 = this.v.textTracks.toArray().indexOf(track);
        this.v.remote.changeTextTrackMode(index2, "disabled", trigger);
        this.dispatch("change", { detail: null, trigger });
      }
      return;
    }
    const index = this.v.textTracks.toArray().findIndex((track) => track.label.toLowerCase() === value);
    if (index >= 0) {
      const track = this.v.textTracks[index];
      this.v.remote.changeTextTrackMode(index, "showing", trigger);
      this.dispatch("change", { detail: track, trigger });
    }
  }
}
__decorateClass$3([
  prop
], CaptionsRadioGroup.prototype, "value", 1);
__decorateClass$3([
  prop
], CaptionsRadioGroup.prototype, "disabled", 1);
__decorateClass$3([
  method
], CaptionsRadioGroup.prototype, "getOptions", 1);

var __defProp$2 = Object.defineProperty;
var __getOwnPropDesc$2 = Object.getOwnPropertyDescriptor;
var __decorateClass$2 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$2(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$2(target, key, result);
  return result;
};
class SpeedRadioGroup extends Component {
  constructor() {
    super();
    this.x = new RadioGroupController();
    this.x.Uc = this.Uc.bind(this);
  }
  static {
    this.props = {
      normalLabel: "Normal",
      rates: [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]
    };
  }
  get value() {
    return this.x.value;
  }
  onSetup() {
    this.v = useMediaContext();
    if (hasProvidedContext(menuContext)) {
      this.xe = useContext(menuContext);
    }
  }
  onConnect(el) {
    effect(this.xc.bind(this));
    effect(this.Le.bind(this));
  }
  getOptions() {
    const { rates, normalLabel } = this.$props;
    return rates().map((rate) => ({
      label: rate === 1 ? normalLabel : rate + "\xD7",
      value: rate + ""
    }));
  }
  xc() {
    this.x.value = this.Ke();
  }
  Le() {
    const { normalLabel } = this.$props, { playbackRate } = this.v.$state, rate = playbackRate();
    this.xe?.te.set(rate === 1 ? normalLabel() : rate + "\xD7");
  }
  Ke() {
    const { playbackRate } = this.v.$state;
    return playbackRate() + "";
  }
  Uc(value, trigger) {
    const rate = +value;
    this.v.remote.changePlaybackRate(rate, trigger);
    this.dispatch("change", { detail: rate, trigger });
  }
}
__decorateClass$2([
  prop
], SpeedRadioGroup.prototype, "value", 1);
__decorateClass$2([
  method
], SpeedRadioGroup.prototype, "getOptions", 1);

var __defProp$1 = Object.defineProperty;
var __getOwnPropDesc$1 = Object.getOwnPropertyDescriptor;
var __decorateClass$1 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$1(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$1(target, key, result);
  return result;
};
class QualityRadioGroup extends Component {
  constructor() {
    super();
    this.Ne = computed(() => {
      const { qualities } = this.v.$state;
      return [...qualities()].sort(
        (a, b) => b.height === a.height ? b.bitrate - a.bitrate : b.height - a.height
      );
    });
    this.x = new RadioGroupController();
    this.x.Uc = this.Uc.bind(this);
  }
  static {
    this.props = {
      autoLabel: "Auto",
      hideBitrate: false
    };
  }
  get value() {
    return this.x.value;
  }
  get disabled() {
    const { canSetQuality, qualities } = this.v.$state;
    return !canSetQuality() || qualities().length === 0;
  }
  onSetup() {
    this.v = useMediaContext();
    if (hasProvidedContext(menuContext)) {
      this.xe = useContext(menuContext);
    }
  }
  onConnect(el) {
    effect(this.xc.bind(this));
    effect(this.Je.bind(this));
    effect(this.Le.bind(this));
  }
  getOptions() {
    const { autoLabel, hideBitrate } = this.$props;
    return [
      { value: "auto", label: autoLabel },
      ...this.Ne().map((quality) => {
        const rate = `${round(quality.bitrate / 1e6, 2)} Mbps`;
        return {
          quality,
          label: quality.height + "p",
          value: this.Me(quality),
          bitrate: () => !hideBitrate() ? rate : null
        };
      })
    ];
  }
  xc() {
    this.x.value = this.Ke();
  }
  Le() {
    const { autoLabel } = this.$props, { autoQuality, quality } = this.v.$state, qualityText = quality() ? quality().height + "p" : "";
    this.xe?.te.set(!autoQuality() ? qualityText : autoLabel() + ` (${qualityText})`);
  }
  Je() {
    const { qualities } = this.v.$state;
    this.xe?.Wd(qualities().length === 0);
  }
  Uc(value, trigger) {
    if (this.disabled)
      return;
    if (value === "auto") {
      this.v.remote.changeQuality(-1, trigger);
      this.dispatch("change", { detail: "auto", trigger });
      return;
    }
    const { qualities } = this.v.$state, index = peek(qualities).findIndex((quality) => this.Me(quality) === value);
    if (index >= 0) {
      const quality = peek(qualities)[index];
      this.v.remote.changeQuality(index, trigger);
      this.dispatch("change", { detail: quality, trigger });
    }
  }
  Ke() {
    const { quality, autoQuality } = this.v.$state;
    if (autoQuality())
      return "auto";
    const currentQuality = quality();
    return currentQuality ? this.Me(currentQuality) : "auto";
  }
  Me(quality) {
    return quality.height + "_" + quality.bitrate;
  }
}
__decorateClass$1([
  prop
], QualityRadioGroup.prototype, "value", 1);
__decorateClass$1([
  prop
], QualityRadioGroup.prototype, "disabled", 1);
__decorateClass$1([
  method
], QualityRadioGroup.prototype, "getOptions", 1);

class Gesture extends Component {
  constructor() {
    super(...arguments);
    this.bb = null;
    this.Oe = 0;
    this.Pe = -1;
  }
  static {
    this.props = {
      event: void 0,
      action: void 0
    };
  }
  onSetup() {
    this.v = useMediaContext();
    const { event, action } = this.$props;
    this.setAttributes({
      event,
      action
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-gesture", "");
    el.style.setProperty("pointer-events", "none");
  }
  onConnect(el) {
    this.bb = this.v.player.el?.querySelector(
      "[data-media-provider]"
    );
    effect(this.Re.bind(this));
  }
  Re() {
    let eventType = this.$props.event();
    if (!this.bb || !eventType)
      return;
    if (/^dbl/.test(eventType)) {
      eventType = eventType.split(/^dbl/)[1];
    }
    listenEvent(
      this.bb,
      eventType,
      this.Se.bind(this)
    );
  }
  Se(event) {
    if (!this.Te(event) || isPointerEvent(event) && (event.button !== 0 || this.v.activeMenu)) {
      return;
    }
    event.MEDIA_GESTURE = true;
    event.preventDefault();
    const isDblEvent = peek(this.$props.event)?.startsWith("dbl");
    if (!isDblEvent) {
      if (this.Oe === 0) {
        setTimeout(() => {
          if (this.Oe === 1)
            this.Qe(event);
        }, 250);
      }
    } else if (this.Oe === 1) {
      queueMicrotask(() => this.Qe(event));
      clearTimeout(this.Pe);
      this.Oe = 0;
      return;
    }
    if (this.Oe === 0) {
      this.Pe = window.setTimeout(() => {
        this.Oe = 0;
      }, 275);
    }
    this.Oe++;
  }
  Qe(event) {
    this.el.setAttribute("data-triggered", "");
    requestAnimationFrame(() => {
      if (this.Ue()) {
        this.Ve(peek(this.$props.action), event);
      }
      requestAnimationFrame(() => {
        this.el.removeAttribute("data-triggered");
      });
    });
  }
  /** Validate event occurred in gesture bounds. */
  Te(event) {
    if (!this.el)
      return false;
    if (isPointerEvent(event) || isMouseEvent(event) || isTouchEvent(event)) {
      const touch = isTouchEvent(event) ? event.touches[0] : void 0;
      const clientX = touch?.clientX ?? event.clientX;
      const clientY = touch?.clientY ?? event.clientY;
      const rect = this.el.getBoundingClientRect();
      const inBounds = clientY >= rect.top && clientY <= rect.bottom && clientX >= rect.left && clientX <= rect.right;
      return event.type.includes("leave") ? !inBounds : inBounds;
    }
    return true;
  }
  /** Validate gesture has the highest z-index in this triggered group. */
  Ue() {
    const gestures = this.v.player.el.querySelectorAll(
      "[data-media-gesture][data-triggered]"
    );
    return Array.from(gestures).sort(
      (a, b) => +getComputedStyle(b).zIndex - +getComputedStyle(a).zIndex
    )[0] === this.el;
  }
  Ve(action, trigger) {
    if (!action)
      return;
    const [method, value] = action.replace(/:([a-z])/, "-$1").split(":");
    if (action.includes(":fullscreen")) {
      this.v.remote.toggleFullscreen("prefer-media", trigger);
    } else if (action.includes("seek:")) {
      this.v.remote.seek(peek(this.v.$state.currentTime) + (+value || 0), trigger);
    } else {
      this.v.remote[kebabToCamelCase(method)](trigger);
    }
  }
}

class CaptionsTextRenderer {
  constructor(_renderer) {
    this.priority = 10;
    this.ia = null;
    this.Lf = createDisposalBin();
    this.Xe = _renderer;
  }
  attach() {
  }
  canRender() {
    return true;
  }
  detach() {
    this.Lf.empty();
    this.Xe.reset();
    this.ia = null;
  }
  changeTrack(track) {
    if (!track || this.ia === track)
      return;
    this.Lf.empty();
    if (track.readyState < 2) {
      this.Xe.reset();
      this.Lf.add(
        listenEvent(track, "load", () => this.Aj(track), { once: true })
      );
    } else {
      this.Aj(track);
    }
    this.Lf.add(
      listenEvent(track, "add-cue", (event) => {
        this.Xe.addCue(event.detail);
      }),
      listenEvent(track, "remove-cue", (event) => {
        this.Xe.removeCue(event.detail);
      })
    );
    this.ia = track;
  }
  Aj(track) {
    this.Xe.changeTrack({
      cues: [...track.cues],
      regions: [...track.regions]
    });
  }
}

class Captions extends Component {
  static {
    this.props = {
      textDir: "ltr"
    };
  }
  onSetup() {
    this.v = useMediaContext();
    this.setAttributes({
      "aria-hidden": $ariaBool(this.lc.bind(this))
    });
  }
  onAttach(el) {
    el.style.setProperty("pointer-events", "none");
  }
  onConnect(el) {
    if (this.Xe) {
      effect(this.Ze.bind(this));
      return;
    }
    import('media-captions').then((lib) => {
      if (!this.connectScope)
        return;
      scoped(() => {
        this.Ye = lib;
        const { CaptionsRenderer } = this.Ye;
        this.Xe = new CaptionsRenderer(el);
        this.We = new CaptionsTextRenderer(this.Xe);
        effect(this.Ze.bind(this));
      }, this.connectScope);
    });
  }
  onDestroy() {
    if (this.We) {
      this.We.detach();
      this.v.textRenderers.remove(this.We);
    }
    this.Xe?.destroy();
  }
  lc() {
    const { textTrack } = this.v.$state, track = textTrack();
    return !track || !isTrackCaptionKind(track);
  }
  Ze() {
    const { viewType } = this.v.$state;
    if (viewType() === "audio") {
      return this.$e();
    } else {
      return this.af();
    }
  }
  $e() {
    effect(this.vd.bind(this));
    return () => {
      this.el.textContent = "";
    };
  }
  vd() {
    if (this.lc())
      return;
    const { textTrack } = this.v.$state;
    this._e();
    listenEvent(textTrack(), "cue-change", this._e.bind(this));
    effect(this.bf.bind(this));
  }
  _e() {
    this.el.textContent = "";
    const { currentTime, textTrack } = this.v.$state, time = peek(currentTime), activeCues = peek(textTrack).activeCues;
    const { renderVTTCueString } = this.Ye;
    for (const cue of activeCues) {
      const cueEl = document.createElement("div");
      cueEl.setAttribute("data-part", "cue");
      cueEl.innerHTML = renderVTTCueString(cue, time);
      this.el.append(cueEl);
    }
  }
  bf() {
    const { currentTime } = this.v.$state, { updateTimedVTTCueNodes } = this.Ye;
    updateTimedVTTCueNodes(this.el, currentTime());
  }
  af() {
    effect(this.cf.bind(this));
    effect(this.df.bind(this));
    this.v.textRenderers.add(this.We);
    return () => {
      this.el.textContent = "";
      this.We.detach();
      this.v.textRenderers.remove(this.We);
    };
  }
  cf() {
    this.Xe.dir = this.$props.textDir();
  }
  df() {
    if (this.lc())
      return;
    const { currentTime } = this.v.$state;
    this.Xe.currentTime = currentTime();
  }
}

class Poster extends Component {
  static {
    this.props = {
      src: void 0,
      alt: void 0
    };
  }
  static {
    this.state = new State({
      img: null,
      src: null,
      alt: null,
      loading: true,
      error: null,
      hidden: false
    });
  }
  onSetup() {
    this.v = useMediaContext();
    this.ef();
    this.ff();
    this.Mc();
  }
  onAttach(el) {
    el.style.setProperty("pointer-events", "none");
    effect(this.gf.bind(this));
    effect(this.ef.bind(this));
    effect(this.ff.bind(this));
    effect(this.Mc.bind(this));
    const { started } = this.v.$state;
    this.setAttributes({
      "data-visible": () => !started(),
      "data-loading": this.Jc.bind(this),
      "data-error": this.Hc.bind(this),
      "data-hidden": this.$state.hidden
    });
  }
  onConnect(el) {
    const { canLoad, poster } = this.v.$state;
    window.requestAnimationFrame(() => {
      if (!canLoad())
        preconnect(poster());
    });
    effect(this.hf.bind(this));
  }
  Hc() {
    const { error } = this.$state;
    return !isNull(error());
  }
  Mc() {
    const { src } = this.$props, { poster } = this.v.$state;
    this.$state.hidden.set(this.Hc() || !(src() || poster()));
  }
  Jc() {
    const { loading, hidden } = this.$state;
    return !hidden() && loading();
  }
  gf() {
    const img = this.$state.img();
    if (!img)
      return;
    listenEvent(img, "load", this.jf.bind(this));
    listenEvent(img, "error", this.Pc.bind(this));
  }
  ef() {
    const { src: _src } = this.$props, { src } = this.$state, { canLoad, poster } = this.v.$state;
    const _poster = _src() || poster();
    src.set(canLoad() && _poster.length ? _poster : null);
  }
  ff() {
    const { src, alt } = this.$state;
    alt.set(src() ? this.$props.alt() : null);
  }
  hf() {
    const { loading, error } = this.$state, { canLoad, poster } = this.v.$state;
    loading.set(canLoad() && !!poster());
    error.set(null);
  }
  jf() {
    const { loading, error } = this.$state;
    loading.set(false);
    error.set(null);
  }
  Pc(event) {
    const { loading, error } = this.$state;
    loading.set(false);
    error.set(event);
  }
}

class Time extends Component {
  static {
    this.props = {
      type: "current",
      showHours: false,
      padHours: null,
      padMinutes: null,
      remainder: false
    };
  }
  static {
    this.state = new State({
      timeText: ""
    });
  }
  onSetup() {
    this.v = useMediaContext();
    this.kf();
    const { type, remainder } = this.$props;
    this.setAttributes({
      "data-type": type,
      "data-remainder": remainder
    });
  }
  onAttach(el) {
    effect(this.kf.bind(this));
  }
  kf() {
    const { type, remainder, padHours, padMinutes, showHours } = this.$props, seconds = this.lf(type()), duration = this.v.$state.duration();
    if (!Number.isFinite(seconds + duration)) {
      this.$state.timeText.set("LIVE");
      return;
    }
    const time = remainder() ? Math.max(0, duration - seconds) : seconds, formattedTime = formatTime(
      time,
      padHours(),
      isNull(padMinutes()) ? time >= 3600 : padMinutes(),
      showHours()
    );
    this.$state.timeText.set(formattedTime);
  }
  lf(type) {
    const { bufferedEnd, duration, currentTime } = this.v.$state;
    switch (type) {
      case "buffered":
        return bufferedEnd();
      case "duration":
        return duration();
      default:
        return currentTime();
    }
  }
}

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class DefaultLayout extends Component {
  constructor() {
    super(...arguments);
    this.menuContainer = null;
  }
  static {
    this.props = {
      when: "",
      smallWhen: "",
      thumbnails: "",
      customIcons: false,
      translations: null,
      menuGroup: "bottom",
      noModal: false
    };
  }
  get isMatch() {
    return this.zf.matches;
  }
  get isSmallLayout() {
    return this.yf.matches;
  }
  onSetup() {
    const { when, smallWhen, thumbnails, translations, menuGroup, noModal } = this.$props;
    this.zf = PlayerQueryList.create(when);
    this.yf = PlayerQueryList.create(smallWhen);
    this.setAttributes({
      "data-match": this.zf.$matches,
      "data-size": () => this.yf.matches ? "sm" : null
    });
    const self = this;
    provideContext(defaultLayoutContext, {
      smQueryList: this.yf,
      thumbnails,
      translations,
      menuGroup,
      noModal,
      get menuContainer() {
        return self.menuContainer;
      }
    });
  }
}
__decorateClass([
  prop
], DefaultLayout.prototype, "menuContainer", 2);
__decorateClass([
  prop
], DefaultLayout.prototype, "isMatch", 1);
__decorateClass([
  prop
], DefaultLayout.prototype, "isSmallLayout", 1);
class DefaultAudioLayout extends DefaultLayout {
  static {
    this.props = {
      ...super.props,
      when: "(view-type: audio)",
      smallWhen: "(width < 576)"
    };
  }
}
class DefaultVideoLayout extends DefaultLayout {
  static {
    this.props = {
      ...super.props,
      when: "(view-type: video)",
      smallWhen: "(width < 576) or (height < 380)"
    };
  }
}
function useDefaultLayoutLang(translations, word) {
  return translations()?.[word] ?? word;
}
const defaultLayoutContext = createContext();
function useDefaultLayoutContext() {
  return useContext(defaultLayoutContext);
}

export { LiveButton as $, ARIAKeyShortcuts as A, isHTMLVideoElement as B, isHTMLMediaElement as C, DefaultAudioLayout as D, sliderContext as E, FullscreenController as F, GroupedLog as G, HLSProviderLoader as H, DefaultLayout as I, defaultLayoutContext as J, useDefaultLayoutLang as K, List as L, MediaProvider as M, Controls as N, Tooltip as O, PlayerQueryList as P, TooltipContent as Q, ToggleButton as R, Slider as S, Thumbnail as T, PlayButton as U, VideoQualityList as V, CaptionButton as W, FullscreenButton as X, MuteButton as Y, PIPButton as Z, SeekButton as _, MediaPlayer as a, sliderState as a0, SliderController as a1, SliderVideo as a2, SliderValue as a3, SliderPreview as a4, updateSliderPreviewPlacement as a5, VolumeSlider as a6, TimeSlider as a7, SliderChapters as a8, Menu as a9, MenuButton as aa, MenuPortal as ab, menuPortalContext as ac, MenuItems as ad, RadioGroup as ae, Radio as af, ChaptersRadioGroup as ag, AudioRadioGroup as ah, CaptionsRadioGroup as ai, SpeedRadioGroup as aj, QualityRadioGroup as ak, Gesture as al, Captions as am, Poster as an, Time as ao, ThumbnailsLoader as ap, FocusVisibleController as aq, tooltipContext as ar, useDefaultLayoutContext as b, DefaultVideoLayout as c, formatSpokenTime as d, canFullscreen as e, formatTime as f, ScreenOrientationController as g, MediaRemoteControl as h, MediaControls as i, MEDIA_KEY_SHORTCUTS as j, mediaState as k, TimeRange as l, mediaContext as m, getTimeRangesStart as n, getTimeRangesEnd as o, TextRenderers as p, TextTrackList as q, AudioTrackList as r, softResetMediaState as s, AudioProviderLoader as t, useMediaContext as u, VideoProviderLoader as v, isAudioProvider as w, isVideoProvider as x, isHLSProvider as y, isHTMLAudioElement as z };
